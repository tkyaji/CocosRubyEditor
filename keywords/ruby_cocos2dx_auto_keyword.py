def get_keywords():
	return {'classes': {'CC::CatmullRomTo': {'base_class': 'CC::CardinalSplineTo', 'ifunctions': {'init_with_duration(dt, points)': {'ret_type': 'bool', 'arguments': [{'type': 'float', 'name': 'dt'}, {'type': 'CC::PointArray', 'name': 'points'}], 'sublime': 'init_with_duration(${1:dt}, ${2:points})$0'}}, 'sfunctions': {}}, 'CC::LabelAtlas': {'base_class': 'CC::AtlasNode', 'ifunctions': {'update_atlas_values()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_atlas_values'}, 'init_with_string(string, char_map_file, item_width, item_height, start_char_map)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'string'}, {'type': 'string', 'name': 'char_map_file'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'init_with_string(${1:string}, ${2:char_map_file}, ${3:item_width}, ${4:item_height}, ${5:start_char_map})$0'}, 'set_string(label)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'label'}], 'sublime': 'set_string(${1:label})$0'}, 'get_string()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_string'}, 'init_with_string(string, fnt_file)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'string'}, {'type': 'string', 'name': 'fnt_file'}], 'sublime': 'init_with_string(${1:string}, ${2:fnt_file})$0'}, 'init_with_string(string, texture, item_width, item_height, start_char_map)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'string'}, {'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'init_with_string(${1:string}, ${2:texture}, ${3:item_width}, ${4:item_height}, ${5:start_char_map})$0'}}, 'sfunctions': {'create(string, fnt_file)': {'ret_type': 'CC::LabelAtlas', 'arguments': [{'type': 'string', 'name': 'string'}, {'type': 'string', 'name': 'fnt_file'}], 'sublime': 'create(${1:string}, ${2:fnt_file})$0'}, 'create(string, char_map_file, item_width, item_height, start_char_map)': {'ret_type': 'CC::LabelAtlas', 'arguments': [{'type': 'string', 'name': 'string'}, {'type': 'string', 'name': 'char_map_file'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'create(${1:string}, ${2:char_map_file}, ${3:item_width}, ${4:item_height}, ${5:start_char_map})$0'}, 'create()': {'ret_type': 'CC::LabelAtlas', 'arguments': [], 'sublime': 'create'}}}, 'CC::Show': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::Show', 'arguments': [], 'sublime': 'create'}}}, 'CC::Waves3D': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_amplitude_rate(amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:amplitude_rate})$0'}, 'set_amplitude(amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude'}], 'sublime': 'set_amplitude(${1:amplitude})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}}, 'sfunctions': {'create(duration, grid_size, waves, amplitude)': {'ret_type': 'CC::Waves3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'waves'}, {'type': 'float', 'name': 'amplitude'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:waves}, ${4:amplitude})$0'}}}, 'CC::EaseSineInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseSineInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::TiledGrid3DAction': {'base_class': 'CC::GridAction', 'ifunctions': {'get_grid()': {'ret_type': 'CC::GridBase', 'arguments': [], 'sublime': 'get_grid'}}, 'sfunctions': {}}, 'CC::Grid3DAction': {'base_class': 'CC::GridAction', 'ifunctions': {'get_grid()': {'ret_type': 'CC::GridBase', 'arguments': [], 'sublime': 'get_grid'}}, 'sfunctions': {}}, 'CC::CallFunc': {'base_class': 'CC::ActionInstant', 'ifunctions': {'get_target_callback()': {'ret_type': 'CC::Ref', 'arguments': [], 'sublime': 'get_target_callback'}, 'set_target_callback(sel)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Ref', 'name': 'sel'}], 'sublime': 'set_target_callback(${1:sel})$0'}, 'execute()': {'ret_type': 'void', 'arguments': [], 'sublime': 'execute'}}, 'sfunctions': {'create(func)': {'ret_type': 'CC::CallFunc', 'arguments': [{'type': 'Proc', 'name': 'func'}], 'sublime': 'create(${1:func})$0'}}}, 'CC::Animate': {'base_class': 'CC::ActionInterval', 'ifunctions': {'get_animation()': {'ret_type': 'CC::Animation', 'arguments': [], 'sublime': 'get_animation'}, 'set_animation(animation)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Animation', 'name': 'animation'}], 'sublime': 'set_animation(${1:animation})$0'}}, 'sfunctions': {'create(animation)': {'ret_type': 'CC::Animate', 'arguments': [{'type': 'CC::Animation', 'name': 'animation'}], 'sublime': 'create(${1:animation})$0'}}}, 'CC::RepeatForever': {'base_class': 'CC::ActionInterval', 'ifunctions': {'get_inner_action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'get_inner_action'}, 'set_inner_action(action)': {'ret_type': 'void', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'set_inner_action(${1:action})$0'}}, 'sfunctions': {'create(action)': {'ret_type': 'CC::RepeatForever', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::StopGrid': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::StopGrid', 'arguments': [], 'sublime': 'create'}}}, 'CC::EventListenerKeyboard': {'base_class': 'CC::EventListener', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::EventListenerKeyboard', 'arguments': [], 'sublime': 'create'}}}, 'CC::Twirl': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_position'}, 'set_amplitude(amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude'}], 'sublime': 'set_amplitude(${1:amplitude})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}, 'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_position(position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'set_position(${1:position})$0'}, 'set_amplitude_rate(amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:amplitude_rate})$0'}}, 'sfunctions': {'create(duration, grid_size, position, twirls, amplitude)': {'ret_type': 'CC::Twirl', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Vec2', 'name': 'position'}, {'type': 'int', 'name': 'twirls'}, {'type': 'float', 'name': 'amplitude'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:position}, ${4:twirls}, ${5:amplitude})$0'}}}, 'CC::AtlasNode': {'base_class': 'CC::Node', 'ifunctions': {'get_quads_to_draw()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_quads_to_draw'}, 'update_atlas_values()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_atlas_values'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_texture_atlas(texture_atlas)': {'ret_type': 'void', 'arguments': [{'type': 'CC::TextureAtlas', 'name': 'texture_atlas'}], 'sublime': 'set_texture_atlas(${1:texture_atlas})$0'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'get_texture_atlas()': {'ret_type': 'CC::TextureAtlas', 'arguments': [], 'sublime': 'get_texture_atlas'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'set_quads_to_draw(quads_to_draw)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'quads_to_draw'}], 'sublime': 'set_quads_to_draw(${1:quads_to_draw})$0'}}, 'sfunctions': {'create(filename, tile_width, tile_height, items_to_render)': {'ret_type': 'CC::AtlasNode', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'int', 'name': 'tile_width'}, {'type': 'int', 'name': 'tile_height'}, {'type': 'int', 'name': 'items_to_render'}], 'sublime': 'create(${1:filename}, ${2:tile_width}, ${3:tile_height}, ${4:items_to_render})$0'}}}, 'CC::EaseBounceOut': {'base_class': 'CC::EaseBounce', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBounceOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ParticleSpiral': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleSpiral', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleSpiral', 'arguments': [], 'sublime': 'create'}}}, 'CC::Label': {'base_class': 'CC::SpriteBatchNode', 'ifunctions': {'enable_outline(outline_color, outline_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'outline_color'}, {'type': 'int', 'name': 'outline_size'}], 'sublime': 'enable_outline(${1:outline_color}, ${2:outline_size})$0'}, 'set_line_break_without_space(break_without_space)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'break_without_space'}], 'sublime': 'set_line_break_without_space(${1:break_without_space})$0'}, 'get_additional_kerning()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_additional_kerning'}, 'set_alignment(h_alignment, v_alignment)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'h_alignment'}, {'type': 'int', 'name': 'v_alignment'}], 'sublime': 'set_alignment(${1:h_alignment}, ${2:v_alignment})$0'}, 'set_horizontal_alignment(h_alignment)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'h_alignment'}], 'sublime': 'set_horizontal_alignment(${1:h_alignment})$0'}, 'enable_shadow(shadow_color, offset)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'shadow_color'}, {'type': 'CC::Size', 'name': 'offset'}], 'sublime': 'enable_shadow(${1:shadow_color}, ${2:offset})$0'}, 'enable_outline(outline_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'outline_color'}], 'sublime': 'enable_outline(${1:outline_color})$0'}, 'disable_effect()': {'ret_type': 'void', 'arguments': [], 'sublime': 'disable_effect'}, 'set_bmfont_file_path(bmfont_file_path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'bmfont_file_path'}], 'sublime': 'set_bmfont_file_path(${1:bmfont_file_path})$0'}, 'set_system_font_name(system_font)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'system_font'}], 'sublime': 'set_system_font_name(${1:system_font})$0'}, 'set_ttfconfig(ttf_config)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::_ttfConfig', 'name': 'ttf_config'}], 'sublime': 'set_ttfconfig(${1:ttf_config})$0'}, 'clip_margin_enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'clip_margin_enabled?'}, 'get_letter(lettet_index)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'int', 'name': 'lettet_index'}], 'sublime': 'get_letter(${1:lettet_index})$0'}, 'set_system_font_size(font_size)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'font_size'}], 'sublime': 'set_system_font_size(${1:font_size})$0'}, 'enable_shadow()': {'ret_type': 'void', 'arguments': [], 'sublime': 'enable_shadow'}, 'get_system_font_size()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_system_font_size'}, 'set_height(height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'height'}], 'sublime': 'set_height(${1:height})$0'}, 'set_alignment(h_alignment)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'h_alignment'}], 'sublime': 'set_alignment(${1:h_alignment})$0'}, 'update_content()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_content'}, 'get_string_length()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_string_length'}, 'set_width(width)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'width'}], 'sublime': 'set_width(${1:width})$0'}, 'set_vertical_alignment(v_alignment)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'v_alignment'}], 'sublime': 'set_vertical_alignment(${1:v_alignment})$0'}, 'get_bmfont_file_path()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_bmfont_file_path'}, 'enable_shadow(shadow_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'shadow_color'}], 'sublime': 'enable_shadow(${1:shadow_color})$0'}, 'get_line_height()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_line_height'}, 'get_vertical_alignment()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_vertical_alignment'}, 'get_height()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_height'}, 'request_system_font_refresh()': {'ret_type': 'void', 'arguments': [], 'sublime': 'request_system_font_refresh'}, 'get_text_alignment()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_text_alignment'}, 'set_line_height(height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'height'}], 'sublime': 'set_line_height(${1:height})$0'}, 'set_char_map(plist_file)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'plist_file'}], 'sublime': 'set_char_map(${1:plist_file})$0'}, 'set_char_map(char_map_file, item_width, item_height, start_char_map)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'char_map_file'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'set_char_map(${1:char_map_file}, ${2:item_width}, ${3:item_height}, ${4:start_char_map})$0'}, 'set_string(text)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'text'}], 'sublime': 'set_string(${1:text})$0'}, 'enable_shadow(shadow_color, offset, blur_radius)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'shadow_color'}, {'type': 'CC::Size', 'name': 'offset'}, {'type': 'int', 'name': 'blur_radius'}], 'sublime': 'enable_shadow(${1:shadow_color}, ${2:offset}, ${3:blur_radius})$0'}, 'get_system_font_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_system_font_name'}, 'set_dimensions(width, height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'set_dimensions(${1:width}, ${2:height})$0'}, 'set_clip_margin_enabled(clip_enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'clip_enabled'}], 'sublime': 'set_clip_margin_enabled(${1:clip_enabled})$0'}, 'get_width()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_width'}, 'enable_glow(glow_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'glow_color'}], 'sublime': 'enable_glow(${1:glow_color})$0'}, 'set_max_line_width(max_line_width)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'max_line_width'}], 'sublime': 'set_max_line_width(${1:max_line_width})$0'}, 'set_bmfont_file_path(bmfont_file_path, image_offset)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'bmfont_file_path'}, {'type': 'CC::Vec2', 'name': 'image_offset'}], 'sublime': 'set_bmfont_file_path(${1:bmfont_file_path}, ${2:image_offset})$0'}, 'get_font_atlas()': {'ret_type': 'CC::FontAtlas', 'arguments': [], 'sublime': 'get_font_atlas'}, 'get_text_color()': {'ret_type': 'CC::Color4B', 'arguments': [], 'sublime': 'get_text_color'}, 'set_additional_kerning(space)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'space'}], 'sublime': 'set_additional_kerning(${1:space})$0'}, 'get_string()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_string'}, 'get_horizontal_alignment()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_horizontal_alignment'}, 'get_ttfconfig()': {'ret_type': 'CC::_ttfConfig', 'arguments': [], 'sublime': 'get_ttfconfig'}, 'get_string_num_lines()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_string_num_lines'}, 'set_char_map(texture, item_width, item_height, start_char_map)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'set_char_map(${1:texture}, ${2:item_width}, ${3:item_height}, ${4:start_char_map})$0'}, 'get_max_line_width()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_max_line_width'}, 'get_dimensions()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_dimensions'}, 'set_text_color(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'color'}], 'sublime': 'set_text_color(${1:color})$0'}}, 'sfunctions': {'create_with_bmfont(bmfont_file_path, text, alignment, max_line_width, image_offset)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'bmfont_file_path'}, {'type': 'string', 'name': 'text'}, {'type': 'int', 'name': 'alignment'}, {'type': 'int', 'name': 'max_line_width'}, {'type': 'CC::Vec2', 'name': 'image_offset'}], 'sublime': 'create_with_bmfont(${1:bmfont_file_path}, ${2:text}, ${3:alignment}, ${4:max_line_width}, ${5:image_offset})$0'}, 'create_with_char_map(char_map_file, item_width, item_height, start_char_map)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'char_map_file'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'create_with_char_map(${1:char_map_file}, ${2:item_width}, ${3:item_height}, ${4:start_char_map})$0'}, 'create()': {'ret_type': 'CC::Label', 'arguments': [], 'sublime': 'create'}, 'create_with_bmfont(bmfont_file_path, text, alignment, max_line_width)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'bmfont_file_path'}, {'type': 'string', 'name': 'text'}, {'type': 'int', 'name': 'alignment'}, {'type': 'int', 'name': 'max_line_width'}], 'sublime': 'create_with_bmfont(${1:bmfont_file_path}, ${2:text}, ${3:alignment}, ${4:max_line_width})$0'}, 'create_with_bmfont(bmfont_file_path, text, alignment)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'bmfont_file_path'}, {'type': 'string', 'name': 'text'}, {'type': 'int', 'name': 'alignment'}], 'sublime': 'create_with_bmfont(${1:bmfont_file_path}, ${2:text}, ${3:alignment})$0'}, 'create_with_bmfont(bmfont_file_path, text)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'bmfont_file_path'}, {'type': 'string', 'name': 'text'}], 'sublime': 'create_with_bmfont(${1:bmfont_file_path}, ${2:text})$0'}, 'create_with_char_map(plist_file)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'plist_file'}], 'sublime': 'create_with_char_map(${1:plist_file})$0'}, 'create_with_system_font(text, font, font_size)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font'}, {'type': 'float', 'name': 'font_size'}], 'sublime': 'create_with_system_font(${1:text}, ${2:font}, ${3:font_size})$0'}, 'create_with_system_font(text, font, font_size, dimensions)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font'}, {'type': 'float', 'name': 'font_size'}, {'type': 'CC::Size', 'name': 'dimensions'}], 'sublime': 'create_with_system_font(${1:text}, ${2:font}, ${3:font_size}, ${4:dimensions})$0'}, 'create_with_char_map(texture, item_width, item_height, start_char_map)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'create_with_char_map(${1:texture}, ${2:item_width}, ${3:item_height}, ${4:start_char_map})$0'}, 'create_with_system_font(text, font, font_size, dimensions, h_alignment, v_alignment)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font'}, {'type': 'float', 'name': 'font_size'}, {'type': 'CC::Size', 'name': 'dimensions'}, {'type': 'int', 'name': 'h_alignment'}, {'type': 'int', 'name': 'v_alignment'}], 'sublime': 'create_with_system_font(${1:text}, ${2:font}, ${3:font_size}, ${4:dimensions}, ${5:h_alignment}, ${6:v_alignment})$0'}, 'create_with_system_font(text, font, font_size, dimensions, h_alignment)': {'ret_type': 'CC::Label', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font'}, {'type': 'float', 'name': 'font_size'}, {'type': 'CC::Size', 'name': 'dimensions'}, {'type': 'int', 'name': 'h_alignment'}], 'sublime': 'create_with_system_font(${1:text}, ${2:font}, ${3:font_size}, ${4:dimensions}, ${5:h_alignment})$0'}}}, 'CC::RenderTexture': {'base_class': 'CC::Node', 'ifunctions': {'begin_with_clear(r, g, b, a, depth_value)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'r'}, {'type': 'float', 'name': 'g'}, {'type': 'float', 'name': 'b'}, {'type': 'float', 'name': 'a'}, {'type': 'float', 'name': 'depth_value'}], 'sublime': 'begin_with_clear(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:depth_value})$0'}, 'save_to_file(filename, rgba?, callback)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'bool', 'name': 'rgba?'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'save_to_file(${1:filename}, ${2:rgba?}, ${3:callback})$0'}, 'set_clear_stencil(clear_stencil)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'clear_stencil'}], 'sublime': 'set_clear_stencil(${1:clear_stencil})$0'}, 'clear_stencil(stencil_value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'stencil_value'}], 'sublime': 'clear_stencil(${1:stencil_value})$0'}, 'save_to_file(filename, format, rgba?)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'int', 'name': 'format'}, {'type': 'bool', 'name': 'rgba?'}], 'sublime': 'save_to_file(${1:filename}, ${2:format}, ${3:rgba?})$0'}, 'set_clear_color(clear_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'clear_color'}], 'sublime': 'set_clear_color(${1:clear_color})$0'}, 'begin_with_clear(r, g, b, a)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'r'}, {'type': 'float', 'name': 'g'}, {'type': 'float', 'name': 'b'}, {'type': 'float', 'name': 'a'}], 'sublime': 'begin_with_clear(${1:r}, ${2:g}, ${3:b}, ${4:a})$0'}, 'get_clear_depth()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_clear_depth'}, 'get_clear_flags()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_clear_flags'}, 'set_clear_flags(clear_flags)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'clear_flags'}], 'sublime': 'set_clear_flags(${1:clear_flags})$0'}, 'get_clear_color()': {'ret_type': 'CC::Color4F', 'arguments': [], 'sublime': 'get_clear_color'}, 'init_with_width_and_height(w, h, format)': {'ret_type': 'bool', 'arguments': [{'type': 'int', 'name': 'w'}, {'type': 'int', 'name': 'h'}, {'type': 'int', 'name': 'format'}], 'sublime': 'init_with_width_and_height(${1:w}, ${2:h}, ${3:format})$0'}, 'end_to_lua()': {'ret_type': 'void', 'arguments': [], 'sublime': 'end_to_lua'}, 'set_keep_matrix(keep_matrix)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'keep_matrix'}], 'sublime': 'set_keep_matrix(${1:keep_matrix})$0'}, 'get_sprite()': {'ret_type': 'CC::Sprite', 'arguments': [], 'sublime': 'get_sprite'}, 'auto_draw?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'auto_draw?'}, 'clear(r, g, b, a)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'r'}, {'type': 'float', 'name': 'g'}, {'type': 'float', 'name': 'b'}, {'type': 'float', 'name': 'a'}], 'sublime': 'clear(${1:r}, ${2:g}, ${3:b}, ${4:a})$0'}, 'set_clear_depth(clear_depth)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'clear_depth'}], 'sublime': 'set_clear_depth(${1:clear_depth})$0'}, 'end()': {'ret_type': 'void', 'arguments': [], 'sublime': 'end'}, 'set_auto_draw(auto_draw?)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'auto_draw?'}], 'sublime': 'set_auto_draw(${1:auto_draw?})$0'}, 'clear_depth(depth_value)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'depth_value'}], 'sublime': 'clear_depth(${1:depth_value})$0'}, 'set_sprite(sprite)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}], 'sublime': 'set_sprite(${1:sprite})$0'}, 'init_with_width_and_height(w, h, format, depth_stencil_format)': {'ret_type': 'bool', 'arguments': [{'type': 'int', 'name': 'w'}, {'type': 'int', 'name': 'h'}, {'type': 'int', 'name': 'format'}, {'type': 'int', 'name': 'depth_stencil_format'}], 'sublime': 'init_with_width_and_height(${1:w}, ${2:h}, ${3:format}, ${4:depth_stencil_format})$0'}, 'new_image()': {'ret_type': 'CC::Image', 'arguments': [], 'sublime': 'new_image'}, 'begin()': {'ret_type': 'void', 'arguments': [], 'sublime': 'begin'}, 'save_to_file(filename, format, rgba?, callback)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'int', 'name': 'format'}, {'type': 'bool', 'name': 'rgba?'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'save_to_file(${1:filename}, ${2:format}, ${3:rgba?}, ${4:callback})$0'}, 'set_virtual_viewport(rt_begin, full_rect, full_viewport)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'rt_begin'}, {'type': 'CC::Rect', 'name': 'full_rect'}, {'type': 'CC::Rect', 'name': 'full_viewport'}], 'sublime': 'set_virtual_viewport(${1:rt_begin}, ${2:full_rect}, ${3:full_viewport})$0'}, 'new_image(flip_image)': {'ret_type': 'CC::Image', 'arguments': [{'type': 'bool', 'name': 'flip_image'}], 'sublime': 'new_image(${1:flip_image})$0'}, 'save_to_file(filename, format)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'int', 'name': 'format'}], 'sublime': 'save_to_file(${1:filename}, ${2:format})$0'}, 'begin_with_clear(r, g, b, a, depth_value, stencil_value)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'r'}, {'type': 'float', 'name': 'g'}, {'type': 'float', 'name': 'b'}, {'type': 'float', 'name': 'a'}, {'type': 'float', 'name': 'depth_value'}, {'type': 'int', 'name': 'stencil_value'}], 'sublime': 'begin_with_clear(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:depth_value}, ${6:stencil_value})$0'}, 'get_clear_stencil()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_clear_stencil'}, 'save_to_file(filename, rgba?)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'bool', 'name': 'rgba?'}], 'sublime': 'save_to_file(${1:filename}, ${2:rgba?})$0'}, 'save_to_file(filename)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'save_to_file(${1:filename})$0'}}, 'sfunctions': {'create(w, h, format)': {'ret_type': 'CC::RenderTexture', 'arguments': [{'type': 'int', 'name': 'w'}, {'type': 'int', 'name': 'h'}, {'type': 'int', 'name': 'format'}], 'sublime': 'create(${1:w}, ${2:h}, ${3:format})$0'}, 'create(w, h)': {'ret_type': 'CC::RenderTexture', 'arguments': [{'type': 'int', 'name': 'w'}, {'type': 'int', 'name': 'h'}], 'sublime': 'create(${1:w}, ${2:h})$0'}, 'create(w, h, format, depth_stencil_format)': {'ret_type': 'CC::RenderTexture', 'arguments': [{'type': 'int', 'name': 'w'}, {'type': 'int', 'name': 'h'}, {'type': 'int', 'name': 'format'}, {'type': 'int', 'name': 'depth_stencil_format'}], 'sublime': 'create(${1:w}, ${2:h}, ${3:format}, ${4:depth_stencil_format})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::FadeOutBLTiles': {'base_class': 'CC::FadeOutTRTiles', 'ifunctions': {}, 'sfunctions': {'create(duration, grid_size)': {'ret_type': 'CC::FadeOutBLTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:duration}, ${2:grid_size})$0'}}}, 'CC::EventListenerCustom': {'base_class': 'CC::EventListener', 'ifunctions': {}, 'sfunctions': {'create(event_name, callback)': {'ret_type': 'CC::EventListenerCustom', 'arguments': [{'type': 'string', 'name': 'event_name'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:event_name}, ${2:callback})$0'}}}, 'CC::Place': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create(pos)': {'ret_type': 'CC::Place', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'create(${1:pos})$0'}}}, 'CC::EaseExponentialIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseExponentialIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ParticleFireworks': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleFireworks', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleFireworks', 'arguments': [], 'sublime': 'create'}}}, 'CC::NodeDatas': {'ifunctions': {'reset_data()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset_data'}}, 'sfunctions': {}}, 'CC::Follow': {'base_class': 'CC::Action', 'ifunctions': {'boundary_set?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'boundary_set?'}, 'set_boundary_set(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_boundary_set(${1:value})$0'}}, 'sfunctions': {'create(followed_node)': {'ret_type': 'CC::Follow', 'arguments': [{'type': 'CC::Node', 'name': 'followed_node'}], 'sublime': 'create(${1:followed_node})$0'}, 'create(followed_node, rect)': {'ret_type': 'CC::Follow', 'arguments': [{'type': 'CC::Node', 'name': 'followed_node'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create(${1:followed_node}, ${2:rect})$0'}}}, 'CC::BezierBy': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {}}, 'CC::TileMapAtlas': {'base_class': 'CC::AtlasNode', 'ifunctions': {'set_tile(tile, position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'tile'}, {'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'set_tile(${1:tile}, ${2:position})$0'}, 'init_with_tile_file(tile, map_file, tile_width, tile_height)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'tile'}, {'type': 'string', 'name': 'map_file'}, {'type': 'int', 'name': 'tile_width'}, {'type': 'int', 'name': 'tile_height'}], 'sublime': 'init_with_tile_file(${1:tile}, ${2:map_file}, ${3:tile_width}, ${4:tile_height})$0'}, 'release_map()': {'ret_type': 'void', 'arguments': [], 'sublime': 'release_map'}, 'get_tile_at(position)': {'ret_type': 'CC::Color3B', 'arguments': [{'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'get_tile_at(${1:position})$0'}}, 'sfunctions': {'create(tile, map_file, tile_width, tile_height)': {'ret_type': 'CC::TileMapAtlas', 'arguments': [{'type': 'string', 'name': 'tile'}, {'type': 'string', 'name': 'map_file'}, {'type': 'int', 'name': 'tile_width'}, {'type': 'int', 'name': 'tile_height'}], 'sublime': 'create(${1:tile}, ${2:map_file}, ${3:tile_width}, ${4:tile_height})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::TransitionMoveInT': {'base_class': 'CC::TransitionMoveInL', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionMoveInT', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::ProgressFromTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, from_percentage, to_percentage)': {'ret_type': 'CC::ProgressFromTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'from_percentage'}, {'type': 'float', 'name': 'to_percentage'}], 'sublime': 'create(${1:duration}, ${2:from_percentage}, ${3:to_percentage})$0'}}}, 'CC::TMXTilesetInfo': {'base_class': 'CC::Ref', 'ifunctions': {'get_rect_for_gid(gid)': {'ret_type': 'CC::Rect', 'arguments': [{'type': 'int', 'name': 'gid'}], 'sublime': 'get_rect_for_gid(${1:gid})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::TransitionFlipY': {'base_class': 'CC::TransitionSceneOriented', 'ifunctions': {}, 'sfunctions': {'create(t, s)': {'ret_type': 'CC::TransitionFlipY', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}], 'sublime': 'create(${1:t}, ${2:s})$0'}, 'create(t, s, o)': {'ret_type': 'CC::TransitionFlipY', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}, {'type': 'int', 'name': 'o'}], 'sublime': 'create(${1:t}, ${2:s}, ${3:o})$0'}}}, 'CC::TransitionFlipX': {'base_class': 'CC::TransitionSceneOriented', 'ifunctions': {}, 'sfunctions': {'create(t, s)': {'ret_type': 'CC::TransitionFlipX', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}], 'sublime': 'create(${1:t}, ${2:s})$0'}, 'create(t, s, o)': {'ret_type': 'CC::TransitionFlipX', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}, {'type': 'int', 'name': 'o'}], 'sublime': 'create(${1:t}, ${2:s}, ${3:o})$0'}}}, 'CC::EaseRateAction': {'base_class': 'CC::ActionEase', 'ifunctions': {'set_rate(rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'rate'}], 'sublime': 'set_rate(${1:rate})$0'}, 'get_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_rate'}}, 'sfunctions': {}}, 'CC::Application': {'ifunctions': {'get_current_language()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_current_language'}, 'get_current_language_code()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_current_language_code'}, 'set_animation_interval(interval)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'interval'}], 'sublime': 'set_animation_interval(${1:interval})$0'}, 'get_target_platform()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_target_platform'}, 'open_url(url)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'url'}], 'sublime': 'open_url(${1:url})$0'}}, 'sfunctions': {'get_instance()': {'ret_type': 'CC::Application', 'arguments': [], 'sublime': 'get_instance'}}}, 'CC::EaseBounce': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {}}, 'CC::FadeTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, opacity)': {'ret_type': 'CC::FadeTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'int', 'name': 'opacity'}], 'sublime': 'create(${1:duration}, ${2:opacity})$0'}}}, 'CC::CatmullRomBy': {'base_class': 'CC::CardinalSplineBy', 'ifunctions': {'init_with_duration(dt, points)': {'ret_type': 'bool', 'arguments': [{'type': 'float', 'name': 'dt'}, {'type': 'CC::PointArray', 'name': 'points'}], 'sublime': 'init_with_duration(${1:dt}, ${2:points})$0'}}, 'sfunctions': {}}, 'CC::JumpTiles3D': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_amplitude_rate(amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:amplitude_rate})$0'}, 'set_amplitude(amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude'}], 'sublime': 'set_amplitude(${1:amplitude})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}}, 'sfunctions': {'create(duration, grid_size, number_of_jumps, amplitude)': {'ret_type': 'CC::JumpTiles3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'number_of_jumps'}, {'type': 'float', 'name': 'amplitude'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:number_of_jumps}, ${4:amplitude})$0'}}}, 'CC::ParticleBatchNode': {'base_class': 'CC::Node', 'ifunctions': {'disable_particle(particle_index)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'particle_index'}], 'sublime': 'disable_particle(${1:particle_index})$0'}, 'remove_child_at_index(index, do_cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'index'}, {'type': 'bool', 'name': 'do_cleanup'}], 'sublime': 'remove_child_at_index(${1:index}, ${2:do_cleanup})$0'}, 'insert_child(system, index)': {'ret_type': 'void', 'arguments': [{'type': 'CC::ParticleSystem', 'name': 'system'}, {'type': 'int', 'name': 'index'}], 'sublime': 'insert_child(${1:system}, ${2:index})$0'}, 'set_texture_atlas(atlas)': {'ret_type': 'void', 'arguments': [{'type': 'CC::TextureAtlas', 'name': 'atlas'}], 'sublime': 'set_texture_atlas(${1:atlas})$0'}, 'remove_all_children_with_cleanup(do_cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'do_cleanup'}], 'sublime': 'remove_all_children_with_cleanup(${1:do_cleanup})$0'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'get_texture_atlas()': {'ret_type': 'CC::TextureAtlas', 'arguments': [], 'sublime': 'get_texture_atlas'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}}, 'sfunctions': {'create(file_image, capacity)': {'ret_type': 'CC::ParticleBatchNode', 'arguments': [{'type': 'string', 'name': 'file_image'}, {'type': 'int', 'name': 'capacity'}], 'sublime': 'create(${1:file_image}, ${2:capacity})$0'}, 'create_with_texture(tex, capacity)': {'ret_type': 'CC::ParticleBatchNode', 'arguments': [{'type': 'CC::Texture2D', 'name': 'tex'}, {'type': 'int', 'name': 'capacity'}], 'sublime': 'create_with_texture(${1:tex}, ${2:capacity})$0'}, 'create_with_texture(tex)': {'ret_type': 'CC::ParticleBatchNode', 'arguments': [{'type': 'CC::Texture2D', 'name': 'tex'}], 'sublime': 'create_with_texture(${1:tex})$0'}, 'create(file_image)': {'ret_type': 'CC::ParticleBatchNode', 'arguments': [{'type': 'string', 'name': 'file_image'}], 'sublime': 'create(${1:file_image})$0'}}}, 'CC::ScaleBy': {'base_class': 'CC::ScaleTo', 'ifunctions': {}, 'sfunctions': {'create(duration, s)': {'ret_type': 'CC::ScaleBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 's'}], 'sublime': 'create(${1:duration}, ${2:s})$0'}, 'create(duration, sx, sy, sz)': {'ret_type': 'CC::ScaleBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'sx'}, {'type': 'float', 'name': 'sy'}, {'type': 'float', 'name': 'sz'}], 'sublime': 'create(${1:duration}, ${2:sx}, ${3:sy}, ${4:sz})$0'}, 'create(duration, sx, sy)': {'ret_type': 'CC::ScaleBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'sx'}, {'type': 'float', 'name': 'sy'}], 'sublime': 'create(${1:duration}, ${2:sx}, ${3:sy})$0'}}}, 'CC::GLProgramState': {'base_class': 'CC::Ref', 'ifunctions': {'set_uniform_vec4(uniform_location, value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'CC::Vec4', 'name': 'value'}], 'sublime': 'set_uniform_vec4(${1:uniform_location}, ${2:value})$0'}, 'set_uniform_int(uniform_location, value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'int', 'name': 'value'}], 'sublime': 'set_uniform_int(${1:uniform_location}, ${2:value})$0'}, 'set_uniform_vec3(uniform_name, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'CC::Vec3', 'name': 'value'}], 'sublime': 'set_uniform_vec3(${1:uniform_name}, ${2:value})$0'}, 'set_uniform_mat4(uniform_name, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'CC::Mat4', 'name': 'value'}], 'sublime': 'set_uniform_mat4(${1:uniform_name}, ${2:value})$0'}, 'set_uniform_texture(uniform_name, texture_id)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'int', 'name': 'texture_id'}], 'sublime': 'set_uniform_texture(${1:uniform_name}, ${2:texture_id})$0'}, 'get_uniform_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_uniform_count'}, 'get_glprogram()': {'ret_type': 'CC::GLProgram', 'arguments': [], 'sublime': 'get_glprogram'}, 'set_uniform_vec3(uniform_location, value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'CC::Vec3', 'name': 'value'}], 'sublime': 'set_uniform_vec3(${1:uniform_location}, ${2:value})$0'}, 'get_vertex_attribs_flags()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_vertex_attribs_flags'}, 'set_uniform_vec2(uniform_name, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'CC::Vec2', 'name': 'value'}], 'sublime': 'set_uniform_vec2(${1:uniform_name}, ${2:value})$0'}, 'set_uniform_texture(uniform_name, texture)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_uniform_texture(${1:uniform_name}, ${2:texture})$0'}, 'set_uniform_float(uniform_name, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'float', 'name': 'value'}], 'sublime': 'set_uniform_float(${1:uniform_name}, ${2:value})$0'}, 'apply_attributes(apply_attrib_flags)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'apply_attrib_flags'}], 'sublime': 'apply_attributes(${1:apply_attrib_flags})$0'}, 'set_uniform_vec2(uniform_location, value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'CC::Vec2', 'name': 'value'}], 'sublime': 'set_uniform_vec2(${1:uniform_location}, ${2:value})$0'}, 'set_uniform_float(uniform_location, value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'float', 'name': 'value'}], 'sublime': 'set_uniform_float(${1:uniform_location}, ${2:value})$0'}, 'apply(model_view)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'model_view'}], 'sublime': 'apply(${1:model_view})$0'}, 'get_vertex_attrib_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_vertex_attrib_count'}, 'set_uniform_texture(uniform_location, texture)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_uniform_texture(${1:uniform_location}, ${2:texture})$0'}, 'set_uniform_mat4(uniform_location, value)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'CC::Mat4', 'name': 'value'}], 'sublime': 'set_uniform_mat4(${1:uniform_location}, ${2:value})$0'}, 'set_uniform_vec4(uniform_name, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'CC::Vec4', 'name': 'value'}], 'sublime': 'set_uniform_vec4(${1:uniform_name}, ${2:value})$0'}, 'apply_uniforms()': {'ret_type': 'void', 'arguments': [], 'sublime': 'apply_uniforms'}, 'apply_glprogram(model_view)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'model_view'}], 'sublime': 'apply_glprogram(${1:model_view})$0'}, 'set_uniform_texture(uniform_location, texture_id)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'uniform_location'}, {'type': 'int', 'name': 'texture_id'}], 'sublime': 'set_uniform_texture(${1:uniform_location}, ${2:texture_id})$0'}, 'set_glprogram(glprogram)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GLProgram', 'name': 'glprogram'}], 'sublime': 'set_glprogram(${1:glprogram})$0'}, 'set_uniform_int(uniform_name, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'uniform_name'}, {'type': 'int', 'name': 'value'}], 'sublime': 'set_uniform_int(${1:uniform_name}, ${2:value})$0'}, 'apply_attributes()': {'ret_type': 'void', 'arguments': [], 'sublime': 'apply_attributes'}}, 'sfunctions': {'create(glprogram)': {'ret_type': 'CC::GLProgramState', 'arguments': [{'type': 'CC::GLProgram', 'name': 'glprogram'}], 'sublime': 'create(${1:glprogram})$0'}, 'get_or_create_with_glprogram(glprogram)': {'ret_type': 'CC::GLProgramState', 'arguments': [{'type': 'CC::GLProgram', 'name': 'glprogram'}], 'sublime': 'get_or_create_with_glprogram(${1:glprogram})$0'}, 'get_or_create_with_glprogram_name(gl_program_name)': {'ret_type': 'CC::GLProgramState', 'arguments': [{'type': 'string', 'name': 'gl_program_name'}], 'sublime': 'get_or_create_with_glprogram_name(${1:gl_program_name})$0'}}}, 'CC::Event': {'base_class': 'CC::Ref', 'ifunctions': {'get_type()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_type'}, 'stop_propagation()': {'ret_type': 'void', 'arguments': [], 'sublime': 'stop_propagation'}, 'stopped?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'stopped?'}, 'get_current_target()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_current_target'}}, 'sfunctions': {}}, 'CC::LayerColor': {'base_class': 'CC::Layer', 'ifunctions': {'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'change_height(h)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'h'}], 'sublime': 'change_height(${1:h})$0'}, 'change_width_and_height(w, h)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'w'}, {'type': 'float', 'name': 'h'}], 'sublime': 'change_width_and_height(${1:w}, ${2:h})$0'}, 'change_width(w)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'w'}], 'sublime': 'change_width(${1:w})$0'}}, 'sfunctions': {'create(color)': {'ret_type': 'CC::LayerColor', 'arguments': [{'type': 'CC::Color4B', 'name': 'color'}], 'sublime': 'create(${1:color})$0'}, 'create()': {'ret_type': 'CC::LayerColor', 'arguments': [], 'sublime': 'create'}, 'create(color, width, height)': {'ret_type': 'CC::LayerColor', 'arguments': [{'type': 'CC::Color4B', 'name': 'color'}, {'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'create(${1:color}, ${2:width}, ${3:height})$0'}}}, 'CC::ParticleSmoke': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleSmoke', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleSmoke', 'arguments': [], 'sublime': 'create'}}}, 'CC::TransitionProgressRadialCCW': {'base_class': 'CC::TransitionProgress', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgressRadialCCW', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::Scheduler': {'base_class': 'CC::Ref', 'ifunctions': {'set_time_scale(time_scale)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'time_scale'}], 'sublime': 'set_time_scale(${1:time_scale})$0'}, 'get_time_scale()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_time_scale'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::MenuItemFont': {'base_class': 'CC::MenuItemLabel', 'ifunctions': {'get_font_size_obj()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_font_size_obj'}, 'set_font_size_obj(size)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'size'}], 'sublime': 'set_font_size_obj(${1:size})$0'}, 'get_font_name_obj()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_font_name_obj'}, 'set_font_name_obj(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'set_font_name_obj(${1:name})$0'}}, 'sfunctions': {'create()': {'ret_type': 'CC::MenuItemFont', 'arguments': [], 'sublime': 'create'}, 'create(value)': {'ret_type': 'CC::MenuItemFont', 'arguments': [{'type': 'string', 'name': 'value'}], 'sublime': 'create(${1:value})$0'}, 'get_font_size()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_font_size'}, 'get_font_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_font_name'}, 'create(value, callback)': {'ret_type': 'CC::MenuItemFont', 'arguments': [{'type': 'string', 'name': 'value'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:value}, ${2:callback})$0'}, 'set_font_name(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'set_font_name(${1:name})$0'}, 'set_font_size(size)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'size'}], 'sublime': 'set_font_size(${1:size})$0'}}}, 'CC::MenuItem': {'base_class': 'CC::Node', 'ifunctions': {'selected()': {'ret_type': 'void', 'arguments': [], 'sublime': 'selected'}, 'set_enabled(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_enabled(${1:value})$0'}, 'enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'enabled?'}, 'activate()': {'ret_type': 'void', 'arguments': [], 'sublime': 'activate'}, 'set_callback(callback)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'set_callback(${1:callback})$0'}, 'unselected()': {'ret_type': 'void', 'arguments': [], 'sublime': 'unselected'}, 'selected?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'selected?'}, 'rect()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'rect'}}, 'sfunctions': {'create()': {'ret_type': 'CC::MenuItem', 'arguments': [], 'sublime': 'create'}, 'create(callback)': {'ret_type': 'CC::MenuItem', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:callback})$0'}}}, 'CC::EaseBounceIn': {'base_class': 'CC::EaseBounce', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBounceIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::Node': {'base_class': 'CC::Ref', 'ifunctions': {'get_user_object()': {'ret_type': 'CC::Ref', 'arguments': [], 'sublime': 'get_user_object'}, 'schedule_update_with_priority_lua(handler, priority)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'handler'}, {'type': 'int', 'name': 'priority'}], 'sublime': 'schedule_update_with_priority_lua(${1:handler}, ${2:priority})$0'}, 'get_parent()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_parent'}, 'get_action_manager()': {'ret_type': 'CC::ActionManager', 'arguments': [], 'sublime': 'get_action_manager'}, 'seton_enter_transition_did_finish_callback(callback)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'seton_enter_transition_did_finish_callback(${1:callback})$0'}, 'set_order_of_arrival(order_of_arrival)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'order_of_arrival'}], 'sublime': 'set_order_of_arrival(${1:order_of_arrival})$0'}, 'get_displayed_opacity()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_displayed_opacity'}, 'get_global_zorder()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_global_zorder'}, 'remove_child_by_tag(tag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'remove_child_by_tag(${1:tag})$0'}, 'unschedule_update()': {'ret_type': 'void', 'arguments': [], 'sublime': 'unschedule_update'}, 'set_event_dispatcher(dispatcher)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventDispatcher', 'name': 'dispatcher'}], 'sublime': 'set_event_dispatcher(${1:dispatcher})$0'}, 'convert_touch_to_node_space_ar(touch)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Touch', 'name': 'touch'}], 'sublime': 'convert_touch_to_node_space_ar(${1:touch})$0'}, 'get_position_z()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_position_z'}, 'set_scale(scale)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scale'}], 'sublime': 'set_scale(${1:scale})$0'}, 'schedule_update_with_priority(priority)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'priority'}], 'sublime': 'schedule_update_with_priority(${1:priority})$0'}, 'set_rotation_skew_y(rotation_y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'rotation_y'}], 'sublime': 'set_rotation_skew_y(${1:rotation_y})$0'}, 'get_description()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_description'}, 'set_opacity_modify_rgb(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_opacity_modify_rgb(${1:value})$0'}, 'set_content_size(content_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'content_size'}], 'sublime': 'set_content_size(${1:content_size})$0'}, 'set_rotation_skew_x(rotation_x)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'rotation_x'}], 'sublime': 'set_rotation_skew_x(${1:rotation_x})$0'}, 'get_number_of_running_actions()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_number_of_running_actions'}, 'convert_to_world_space(node_point)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'node_point'}], 'sublime': 'convert_to_world_space(${1:node_point})$0'}, 'set_skew_y(skew_y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'skew_y'}], 'sublime': 'set_skew_y(${1:skew_y})$0'}, 'add_child(child)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}], 'sublime': 'add_child(${1:child})$0'}, 'get_anchor_point_in_points()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_anchor_point_in_points'}, 'get_opacity()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_opacity'}, 'schedule(callback, key)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}, {'type': 'string', 'name': 'key'}], 'sublime': 'schedule(${1:callback}, ${2:key})$0'}, 'visible?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'visible?'}, 'get_anchor_point()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_anchor_point'}, 'run_action(action)': {'ret_type': 'CC::Action', 'arguments': [{'type': 'CC::Action', 'name': 'action'}], 'sublime': 'run_action(${1:action})$0'}, 'schedule(callback, interval, key)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}, {'type': 'float', 'name': 'interval'}, {'type': 'string', 'name': 'key'}], 'sublime': 'schedule(${1:callback}, ${2:interval}, ${3:key})$0'}, 'get_scale_z()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scale_z'}, 'get_rotation3_d()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_rotation3_d'}, 'get_node_to_world_affine_transform()': {'ret_type': 'CC::AffineTransform', 'arguments': [], 'sublime': 'get_node_to_world_affine_transform'}, 'set_camera_mask(mask, apply_children)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'mask'}, {'type': 'bool', 'name': 'apply_children'}], 'sublime': 'set_camera_mask(${1:mask}, ${2:apply_children})$0'}, 'set_local_zorder(local_zorder)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'local_zorder'}], 'sublime': 'set_local_zorder(${1:local_zorder})$0'}, 'set_position_y(y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'y'}], 'sublime': 'set_position_y(${1:y})$0'}, 'set_rotation3_d(rotation)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'rotation'}], 'sublime': 'set_rotation3_d(${1:rotation})$0'}, 'add_child(child, local_zorder, name)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}, {'type': 'string', 'name': 'name'}], 'sublime': 'add_child(${1:child}, ${2:local_zorder}, ${3:name})$0'}, 'sort_all_children()': {'ret_type': 'void', 'arguments': [], 'sublime': 'sort_all_children'}, 'set_visible(visible)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'visible'}], 'sublime': 'set_visible(${1:visible})$0'}, 'get_scale_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scale_y'}, 'stop_action_by_tag(tag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'stop_action_by_tag(${1:tag})$0'}, 'get_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_name'}, 'set_camera_mask(mask)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'mask'}], 'sublime': 'set_camera_mask(${1:mask})$0'}, 'schedule_update()': {'ret_type': 'void', 'arguments': [], 'sublime': 'schedule_update'}, 'get_position3_d()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_position3_d'}, 'scheduled?(key)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'key'}], 'sublime': 'scheduled?(${1:key})$0'}, 'remove_from_parent()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_from_parent'}, 'get_on_exit_callback()': {'ret_type': 'Proc', 'arguments': [], 'sublime': 'get_on_exit_callback'}, 'remove_component(name)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'remove_component(${1:name})$0'}, 'get_rotation_skew_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_rotation_skew_y'}, 'add_child(child, local_zorder, tag)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}, {'type': 'int', 'name': 'tag'}], 'sublime': 'add_child(${1:child}, ${2:local_zorder}, ${3:tag})$0'}, 'remove_all_children()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_children'}, 'get_scheduler()': {'ret_type': 'CC::Scheduler', 'arguments': [], 'sublime': 'get_scheduler'}, 'ignore_anchor_point_for_position?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'ignore_anchor_point_for_position?'}, 'set_anchor_point(anchor_point)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'anchor_point'}], 'sublime': 'set_anchor_point(${1:anchor_point})$0'}, 'set_opacity(opacity)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'opacity'}], 'sublime': 'set_opacity(${1:opacity})$0'}, 'schedule(callback, interval, repeat, delay, key)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}, {'type': 'float', 'name': 'interval'}, {'type': 'int', 'name': 'repeat'}, {'type': 'float', 'name': 'delay'}, {'type': 'string', 'name': 'key'}], 'sublime': 'schedule(${1:callback}, ${2:interval}, ${3:repeat}, ${4:delay}, ${5:key})$0'}, 'enumerate_children(name, callback)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'enumerate_children(${1:name}, ${2:callback})$0'}, 'remove_from_parent_and_cleanup(cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_from_parent_and_cleanup(${1:cleanup})$0'}, 'set_normalized_position(position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'set_normalized_position(${1:position})$0'}, 'get_position(x, y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}], 'sublime': 'get_position(${1:x}, ${2:y})$0'}, 'remove_component(component)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Component', 'name': 'component'}], 'sublime': 'remove_component(${1:component})$0'}, 'remove_child_by_tag(tag, cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}, {'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_child_by_tag(${1:tag}, ${2:cleanup})$0'}, 'pause()': {'ret_type': 'void', 'arguments': [], 'sublime': 'pause'}, 'add_child(child, local_zorder)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}], 'sublime': 'add_child(${1:child}, ${2:local_zorder})$0'}, 'convert_to_node_space(world_point)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'world_point'}], 'sublime': 'convert_to_node_space(${1:world_point})$0'}, 'get_world_to_node_transform()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_world_to_node_transform'}, 'stop_action(action)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Action', 'name': 'action'}], 'sublime': 'stop_action(${1:action})$0'}, 'get_bounding_box()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_bounding_box'}, 'get_node_to_world_transform()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_node_to_world_transform'}, 'get_children_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_children_count'}, 'set_parent(parent)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'parent'}], 'sublime': 'set_parent(${1:parent})$0'}, 'resume()': {'ret_type': 'void', 'arguments': [], 'sublime': 'resume'}, 'update_displayed_opacity(parent_opacity)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'parent_opacity'}], 'sublime': 'update_displayed_opacity(${1:parent_opacity})$0'}, 'get_node_to_parent_transform()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_node_to_parent_transform'}, 'remove_child(child, cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_child(${1:child}, ${2:cleanup})$0'}, 'get_parent_to_node_affine_transform()': {'ret_type': 'CC::AffineTransform', 'arguments': [], 'sublime': 'get_parent_to_node_affine_transform'}, 'get_position_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_position_x'}, 'set_color(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'color'}], 'sublime': 'set_color(${1:color})$0'}, 'get_action_by_tag(tag)': {'ret_type': 'CC::Action', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'get_action_by_tag(${1:tag})$0'}, 'visit(renderer, parent_transform, parent_flags)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Renderer', 'name': 'renderer'}, {'type': 'CC::Mat4', 'name': 'parent_transform'}, {'type': 'int', 'name': 'parent_flags'}], 'sublime': 'visit(${1:renderer}, ${2:parent_transform}, ${3:parent_flags})$0'}, 'remove_child_by_name(name, cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}, {'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_child_by_name(${1:name}, ${2:cleanup})$0'}, 'set_position_x(x)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}], 'sublime': 'set_position_x(${1:x})$0'}, 'get_on_enter_callback()': {'ret_type': 'Proc', 'arguments': [], 'sublime': 'get_on_enter_callback'}, 'get_component(name)': {'ret_type': 'CC::Component', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'get_component(${1:name})$0'}, 'get_camera_mask()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_camera_mask'}, 'cascade_color_enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'cascade_color_enabled?'}, 'update_displayed_color(parent_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'parent_color'}], 'sublime': 'update_displayed_color(${1:parent_color})$0'}, 'opacity_modify_rgb?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'opacity_modify_rgb?'}, 'set_cascade_color_enabled(cascade_color_enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cascade_color_enabled'}], 'sublime': 'set_cascade_color_enabled(${1:cascade_color_enabled})$0'}, 'set_user_object(user_object)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Ref', 'name': 'user_object'}], 'sublime': 'set_user_object(${1:user_object})$0'}, 'running?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'running?'}, 'set_position_z(position_z)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'position_z'}], 'sublime': 'set_position_z(${1:position_z})$0'}, 'cascade_opacity_enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'cascade_opacity_enabled?'}, 'remove_child_by_name(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'remove_child_by_name(${1:name})$0'}, 'get_position_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_position_y'}, 'get_rotation()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_rotation'}, 'set_glprogram(glprogram)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GLProgram', 'name': 'glprogram'}], 'sublime': 'set_glprogram(${1:glprogram})$0'}, 'set_cascade_opacity_enabled(cascade_opacity_enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cascade_opacity_enabled'}], 'sublime': 'set_cascade_opacity_enabled(${1:cascade_opacity_enabled})$0'}, 'get_order_of_arrival()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_order_of_arrival'}, 'remove_child(child)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}], 'sublime': 'remove_child(${1:child})$0'}, 'set_scale_x(scale_x)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scale_x'}], 'sublime': 'set_scale_x(${1:scale_x})$0'}, 'get_node_to_parent_affine_transform()': {'ret_type': 'CC::AffineTransform', 'arguments': [], 'sublime': 'get_node_to_parent_affine_transform'}, 'remove_all_components()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_components'}, 'get_tag()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_tag'}, 'set_scale_z(scale_z)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scale_z'}], 'sublime': 'set_scale_z(${1:scale_z})$0'}, 'get_local_zorder()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_local_zorder'}, 'set_glprogram_state(gl_program_state)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GLProgramState', 'name': 'gl_program_state'}], 'sublime': 'set_glprogram_state(${1:gl_program_state})$0'}, 'get_skew_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_skew_y'}, 'visit()': {'ret_type': 'void', 'arguments': [], 'sublime': 'visit'}, 'unschedule_all_callbacks()': {'ret_type': 'void', 'arguments': [], 'sublime': 'unschedule_all_callbacks'}, 'get_scale_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scale_x'}, 'update_transform()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_transform'}, 'reorder_child(child, local_zorder)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}], 'sublime': 'reorder_child(${1:child}, ${2:local_zorder})$0'}, 'set_tag(tag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'set_tag(${1:tag})$0'}, 'set_skew_x(skew_x)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'skew_x'}], 'sublime': 'set_skew_x(${1:skew_x})$0'}, 'geton_exit_transition_did_start_callback()': {'ret_type': 'Proc', 'arguments': [], 'sublime': 'geton_exit_transition_did_start_callback'}, 'set_global_zorder(global_zorder)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'global_zorder'}], 'sublime': 'set_global_zorder(${1:global_zorder})$0'}, 'draw()': {'ret_type': 'void', 'arguments': [], 'sublime': 'draw'}, 'set_on_enter_callback(callback)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'set_on_enter_callback(${1:callback})$0'}, 'unschedule(key)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'key'}], 'sublime': 'unschedule(${1:key})$0'}, 'convert_to_world_space_ar(node_point)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'node_point'}], 'sublime': 'convert_to_world_space_ar(${1:node_point})$0'}, 'convert_to_node_space_ar(world_point)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'world_point'}], 'sublime': 'convert_to_node_space_ar(${1:world_point})$0'}, 'get_world_to_node_affine_transform()': {'ret_type': 'CC::AffineTransform', 'arguments': [], 'sublime': 'get_world_to_node_affine_transform'}, 'set_position(position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'set_position(${1:position})$0'}, 'get_glprogram()': {'ret_type': 'CC::GLProgram', 'arguments': [], 'sublime': 'get_glprogram'}, 'add_component(component)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Component', 'name': 'component'}], 'sublime': 'add_component(${1:component})$0'}, 'set_position(x, y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}], 'sublime': 'set_position(${1:x}, ${2:y})$0'}, 'get_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_position'}, 'stop_all_actions()': {'ret_type': 'void', 'arguments': [], 'sublime': 'stop_all_actions'}, 'stop_all_actions_by_tag(tag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'stop_all_actions_by_tag(${1:tag})$0'}, 'seton_exit_transition_did_start_callback(callback)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'seton_exit_transition_did_start_callback(${1:callback})$0'}, 'get_glprogram_state()': {'ret_type': 'CC::GLProgramState', 'arguments': [], 'sublime': 'get_glprogram_state'}, 'get_scene()': {'ret_type': 'CC::Scene', 'arguments': [], 'sublime': 'get_scene'}, 'get_child_by_name(name)': {'ret_type': 'CC::Node', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'get_child_by_name(${1:name})$0'}, 'get_normalized_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_normalized_position'}, 'remove_all_children_with_cleanup(cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_all_children_with_cleanup(${1:cleanup})$0'}, 'get_content_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_content_size'}, 'set_scale(scale_x, scale_y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scale_x'}, {'type': 'float', 'name': 'scale_y'}], 'sublime': 'set_scale(${1:scale_x}, ${2:scale_y})$0'}, 'update(delta)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'delta'}], 'sublime': 'update(${1:delta})$0'}, 'cleanup()': {'ret_type': 'void', 'arguments': [], 'sublime': 'cleanup'}, 'get_color()': {'ret_type': 'CC::Color3B', 'arguments': [], 'sublime': 'get_color'}, 'get_rotation_skew_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_rotation_skew_x'}, 'set_scheduler(scheduler)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Scheduler', 'name': 'scheduler'}], 'sublime': 'set_scheduler(${1:scheduler})$0'}, 'schedule_once(callback, delay, key)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}, {'type': 'float', 'name': 'delay'}, {'type': 'string', 'name': 'key'}], 'sublime': 'schedule_once(${1:callback}, ${2:delay}, ${3:key})$0'}, 'get_skew_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_skew_x'}, 'get_parent_to_node_transform()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_parent_to_node_transform'}, 'get_children()': {'ret_type': 'CC::Vector<cocos2d::Node *>', 'arguments': [], 'sublime': 'get_children'}, 'get_scale()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scale'}, 'get_child_by_tag(tag)': {'ret_type': 'CC::Node', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'get_child_by_tag(${1:tag})$0'}, 'draw(renderer, transform, flags)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Renderer', 'name': 'renderer'}, {'type': 'CC::Mat4', 'name': 'transform'}, {'type': 'int', 'name': 'flags'}], 'sublime': 'draw(${1:renderer}, ${2:transform}, ${3:flags})$0'}, 'set_name(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'set_name(${1:name})$0'}, 'ignore_anchor_point_for_position(ignore)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'ignore'}], 'sublime': 'ignore_anchor_point_for_position(${1:ignore})$0'}, 'convert_touch_to_node_space(touch)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Touch', 'name': 'touch'}], 'sublime': 'convert_touch_to_node_space(${1:touch})$0'}, 'geton_enter_transition_did_finish_callback()': {'ret_type': 'Proc', 'arguments': [], 'sublime': 'geton_enter_transition_did_finish_callback'}, 'set_on_exit_callback(callback)': {'ret_type': 'void', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'set_on_exit_callback(${1:callback})$0'}, 'set_node_to_parent_transform(transform)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'transform'}], 'sublime': 'set_node_to_parent_transform(${1:transform})$0'}, 'set_rotation(rotation)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'rotation'}], 'sublime': 'set_rotation(${1:rotation})$0'}, 'set_action_manager(action_manager)': {'ret_type': 'void', 'arguments': [{'type': 'CC::ActionManager', 'name': 'action_manager'}], 'sublime': 'set_action_manager(${1:action_manager})$0'}, 'set_position3_d(position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'position'}], 'sublime': 'set_position3_d(${1:position})$0'}, 'get_event_dispatcher()': {'ret_type': 'CC::EventDispatcher', 'arguments': [], 'sublime': 'get_event_dispatcher'}, 'set_scale_y(scale_y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scale_y'}], 'sublime': 'set_scale_y(${1:scale_y})$0'}, 'get_displayed_color()': {'ret_type': 'CC::Color3B', 'arguments': [], 'sublime': 'get_displayed_color'}}, 'sfunctions': {'create()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'create'}}}, 'CC::FadeIn': {'base_class': 'CC::FadeTo', 'ifunctions': {'set_reverse_action(ac)': {'ret_type': 'void', 'arguments': [{'type': 'CC::FadeTo', 'name': 'ac'}], 'sublime': 'set_reverse_action(${1:ac})$0'}}, 'sfunctions': {'create(d)': {'ret_type': 'CC::FadeIn', 'arguments': [{'type': 'float', 'name': 'd'}], 'sublime': 'create(${1:d})$0'}}}, 'CC::MenuItemAtlasFont': {'base_class': 'CC::MenuItemLabel', 'ifunctions': {}, 'sfunctions': {'create(value, char_map_file, item_width, item_height, start_char_map)': {'ret_type': 'CC::MenuItemAtlasFont', 'arguments': [{'type': 'string', 'name': 'value'}, {'type': 'string', 'name': 'char_map_file'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}], 'sublime': 'create(${1:value}, ${2:char_map_file}, ${3:item_width}, ${4:item_height}, ${5:start_char_map})$0'}, 'create(value, char_map_file, item_width, item_height, start_char_map, callback)': {'ret_type': 'CC::MenuItemAtlasFont', 'arguments': [{'type': 'string', 'name': 'value'}, {'type': 'string', 'name': 'char_map_file'}, {'type': 'int', 'name': 'item_width'}, {'type': 'int', 'name': 'item_height'}, {'type': 'int', 'name': 'start_char_map'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:value}, ${2:char_map_file}, ${3:item_width}, ${4:item_height}, ${5:start_char_map}, ${6:callback})$0'}}}, 'CC::EaseCircleActionOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseCircleActionOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::Ripple3D': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_position'}, 'set_amplitude_rate(f_amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'f_amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:f_amplitude_rate})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}, 'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_position(position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'set_position(${1:position})$0'}, 'set_amplitude(f_amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'f_amplitude'}], 'sublime': 'set_amplitude(${1:f_amplitude})$0'}}, 'sfunctions': {'create(duration, grid_size, position, radius, waves, amplitude)': {'ret_type': 'CC::Ripple3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Vec2', 'name': 'position'}, {'type': 'float', 'name': 'radius'}, {'type': 'int', 'name': 'waves'}, {'type': 'float', 'name': 'amplitude'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:position}, ${4:radius}, ${5:waves}, ${6:amplitude})$0'}}}, 'CC::TransitionFadeBL': {'base_class': 'CC::TransitionFadeTR', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionFadeBL', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::EaseCubicActionIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseCubicActionIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ParticleGalaxy': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleGalaxy', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleGalaxy', 'arguments': [], 'sublime': 'create'}}}, 'CC::ClippingNode': {'base_class': 'CC::Node', 'ifunctions': {'inverted?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'inverted?'}, 'get_stencil()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_stencil'}, 'has_content()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'has_content'}, 'set_inverted(inverted)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'inverted'}], 'sublime': 'set_inverted(${1:inverted})$0'}, 'get_alpha_threshold()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_alpha_threshold'}, 'set_stencil(stencil)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'stencil'}], 'sublime': 'set_stencil(${1:stencil})$0'}, 'set_alpha_threshold(alpha_threshold)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'alpha_threshold'}], 'sublime': 'set_alpha_threshold(${1:alpha_threshold})$0'}}, 'sfunctions': {'create()': {'ret_type': 'CC::ClippingNode', 'arguments': [], 'sublime': 'create'}, 'create(stencil)': {'ret_type': 'CC::ClippingNode', 'arguments': [{'type': 'CC::Node', 'name': 'stencil'}], 'sublime': 'create(${1:stencil})$0'}}}, 'CC::MenuItemImage': {'base_class': 'CC::MenuItemSprite', 'ifunctions': {'set_normal_sprite_frame(frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}], 'sublime': 'set_normal_sprite_frame(${1:frame})$0'}, 'set_selected_sprite_frame(frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}], 'sublime': 'set_selected_sprite_frame(${1:frame})$0'}, 'set_disabled_sprite_frame(frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}], 'sublime': 'set_disabled_sprite_frame(${1:frame})$0'}}, 'sfunctions': {'create(normal_image, selected_image, disabled_image, callback)': {'ret_type': 'CC::MenuItemImage', 'arguments': [{'type': 'string', 'name': 'normal_image'}, {'type': 'string', 'name': 'selected_image'}, {'type': 'string', 'name': 'disabled_image'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:normal_image}, ${2:selected_image}, ${3:disabled_image}, ${4:callback})$0'}, 'create(normal_image, selected_image, disabled_image)': {'ret_type': 'CC::MenuItemImage', 'arguments': [{'type': 'string', 'name': 'normal_image'}, {'type': 'string', 'name': 'selected_image'}, {'type': 'string', 'name': 'disabled_image'}], 'sublime': 'create(${1:normal_image}, ${2:selected_image}, ${3:disabled_image})$0'}, 'create()': {'ret_type': 'CC::MenuItemImage', 'arguments': [], 'sublime': 'create'}, 'create(normal_image, selected_image, callback)': {'ret_type': 'CC::MenuItemImage', 'arguments': [{'type': 'string', 'name': 'normal_image'}, {'type': 'string', 'name': 'selected_image'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:normal_image}, ${2:selected_image}, ${3:callback})$0'}, 'create(normal_image, selected_image)': {'ret_type': 'CC::MenuItemImage', 'arguments': [{'type': 'string', 'name': 'normal_image'}, {'type': 'string', 'name': 'selected_image'}], 'sublime': 'create(${1:normal_image}, ${2:selected_image})$0'}}}, 'CC::EaseIn': {'base_class': 'CC::EaseRateAction', 'ifunctions': {}, 'sfunctions': {'create(action, rate)': {'ret_type': 'CC::EaseIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'rate'}], 'sublime': 'create(${1:action}, ${2:rate})$0'}}}, 'CC::TMXMapInfo': {'ifunctions': {'set_object_groups(groups)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::TMXObjectGroup *>', 'name': 'groups'}], 'sublime': 'set_object_groups(${1:groups})$0'}, 'set_properties(properties)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'properties'}], 'sublime': 'set_properties(${1:properties})$0'}, 'init_with_xml(tmx_string, resource_path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'tmx_string'}, {'type': 'string', 'name': 'resource_path'}], 'sublime': 'init_with_xml(${1:tmx_string}, ${2:resource_path})$0'}, 'set_storing_characters(storing_characters)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'storing_characters'}], 'sublime': 'set_storing_characters(${1:storing_characters})$0'}, 'get_layers()': {'ret_type': 'CC::Vector<cocos2d::TMXLayerInfo *>', 'arguments': [], 'sublime': 'get_layers'}, 'set_tile_properties(tile_properties)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tile_properties'}], 'sublime': 'set_tile_properties(${1:tile_properties})$0'}, 'parse_xmlstring(xml_string)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'xml_string'}], 'sublime': 'parse_xmlstring(${1:xml_string})$0'}, 'init_with_tmxfile(tmx_file)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'tmx_file'}], 'sublime': 'init_with_tmxfile(${1:tmx_file})$0'}, 'set_tmxfile_name(file_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'file_name'}], 'sublime': 'set_tmxfile_name(${1:file_name})$0'}, 'set_map_size(map_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'map_size'}], 'sublime': 'set_map_size(${1:map_size})$0'}, 'get_map_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_map_size'}, 'get_parent_element()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_parent_element'}, 'get_tile_properties()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_tile_properties'}, 'get_layer_attribs()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_layer_attribs'}, 'set_layers(layers)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::TMXLayerInfo *>', 'name': 'layers'}], 'sublime': 'set_layers(${1:layers})$0'}, 'get_orientation()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_orientation'}, 'get_current_string()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_current_string'}, 'set_parent_gid(gid)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'gid'}], 'sublime': 'set_parent_gid(${1:gid})$0'}, 'set_orientation(orientation)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'orientation'}], 'sublime': 'set_orientation(${1:orientation})$0'}, 'parse_xmlfile(xml_filename)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'xml_filename'}], 'sublime': 'parse_xmlfile(${1:xml_filename})$0'}, 'get_tmxfile_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_tmxfile_name'}, 'get_tilesets()': {'ret_type': 'CC::Vector<cocos2d::TMXTilesetInfo *>', 'arguments': [], 'sublime': 'get_tilesets'}, 'get_object_groups()': {'ret_type': 'CC::Vector<cocos2d::TMXObjectGroup *>', 'arguments': [], 'sublime': 'get_object_groups'}, 'set_tilesets(tilesets)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::TMXTilesetInfo *>', 'name': 'tilesets'}], 'sublime': 'set_tilesets(${1:tilesets})$0'}, 'get_properties()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_properties'}, 'set_tile_size(tile_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'tile_size'}], 'sublime': 'set_tile_size(${1:tile_size})$0'}, 'get_parent_gid()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_parent_gid'}, 'storing_characters?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'storing_characters?'}, 'set_parent_element(element)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'element'}], 'sublime': 'set_parent_element(${1:element})$0'}, 'get_tile_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_tile_size'}, 'set_current_string(current_string)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'current_string'}], 'sublime': 'set_current_string(${1:current_string})$0'}, 'set_layer_attribs(layer_attribs)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'layer_attribs'}], 'sublime': 'set_layer_attribs(${1:layer_attribs})$0'}}, 'sfunctions': {'create(tmx_file)': {'ret_type': 'CC::TMXMapInfo', 'arguments': [{'type': 'string', 'name': 'tmx_file'}], 'sublime': 'create(${1:tmx_file})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}, 'create_with_xml(tmx_string, resource_path)': {'ret_type': 'CC::TMXMapInfo', 'arguments': [{'type': 'string', 'name': 'tmx_string'}, {'type': 'string', 'name': 'resource_path'}], 'sublime': 'create_with_xml(${1:tmx_string}, ${2:resource_path})$0'}}}, 'CC::PointArray': {'base_class': 'CC::Ref', 'ifunctions': {'clone()': {'ret_type': 'CC::PointArray', 'arguments': [], 'sublime': 'clone'}, 'replace_control_point(control_point, index)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'control_point'}, {'type': 'int', 'name': 'index'}], 'sublime': 'replace_control_point(${1:control_point}, ${2:index})$0'}, 'init_with_capacity(capacity)': {'ret_type': 'bool', 'arguments': [{'type': 'int', 'name': 'capacity'}], 'sublime': 'init_with_capacity(${1:capacity})$0'}, 'reverse_inline()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reverse_inline'}, 'reverse()': {'ret_type': 'CC::PointArray', 'arguments': [], 'sublime': 'reverse'}, 'add_control_point(control_point)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'control_point'}], 'sublime': 'add_control_point(${1:control_point})$0'}, 'insert_control_point(control_point, index)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'control_point'}, {'type': 'int', 'name': 'index'}], 'sublime': 'insert_control_point(${1:control_point}, ${2:index})$0'}, 'remove_control_point_at_index(index)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'remove_control_point_at_index(${1:index})$0'}, 'get_control_points()': {'ret_type': 'array', 'arguments': [], 'sublime': 'get_control_points'}, 'set_control_points(control_points)': {'ret_type': 'void', 'arguments': [{'type': 'array', 'name': 'control_points'}], 'sublime': 'set_control_points(${1:control_points})$0'}, 'count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'count'}, 'get_control_point_at_index(index)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'get_control_point_at_index(${1:index})$0'}}, 'sfunctions': {'create(capacity)': {'ret_type': 'CC::PointArray', 'arguments': [{'type': 'int', 'name': 'capacity'}], 'sublime': 'create(${1:capacity})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::RemoveSelf': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create(need_clean_up?)': {'ret_type': 'CC::RemoveSelf', 'arguments': [{'type': 'bool', 'name': 'need_clean_up?'}], 'sublime': 'create(${1:need_clean_up?})$0'}, 'create()': {'ret_type': 'CC::RemoveSelf', 'arguments': [], 'sublime': 'create'}}}, 'CC::DelayTime': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(d)': {'ret_type': 'CC::DelayTime', 'arguments': [{'type': 'float', 'name': 'd'}], 'sublime': 'create(${1:d})$0'}}}, 'CC::TransitionCrossFade': {'base_class': 'CC::TransitionScene', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionCrossFade', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::SkewBy': {'base_class': 'CC::SkewTo', 'ifunctions': {}, 'sfunctions': {'create(t, delta_skew_x, delta_skew_y)': {'ret_type': 'CC::SkewBy', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'float', 'name': 'delta_skew_x'}, {'type': 'float', 'name': 'delta_skew_y'}], 'sublime': 'create(${1:t}, ${2:delta_skew_x}, ${3:delta_skew_y})$0'}}}, 'CC::CardinalSplineBy': {'base_class': 'CC::CardinalSplineTo', 'ifunctions': {}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::EventMouse': {'base_class': 'CC::Event', 'ifunctions': {'get_previous_location()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_previous_location'}, 'get_previous_location_in_view()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_previous_location_in_view'}, 'get_scroll_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scroll_y'}, 'set_cursor_position(x, y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}], 'sublime': 'set_cursor_position(${1:x}, ${2:y})$0'}, 'get_mouse_button()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_mouse_button'}, 'get_location()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_location'}, 'get_start_location_in_view()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_start_location_in_view'}, 'get_delta()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_delta'}, 'set_scroll_data(scroll_x, scroll_y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scroll_x'}, {'type': 'float', 'name': 'scroll_y'}], 'sublime': 'set_scroll_data(${1:scroll_x}, ${2:scroll_y})$0'}, 'get_cursor_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_cursor_x'}, 'get_start_location()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_start_location'}, 'set_mouse_button(button)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'button'}], 'sublime': 'set_mouse_button(${1:button})$0'}, 'get_cursor_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_cursor_y'}, 'get_location_in_view()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_location_in_view'}, 'get_scroll_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scroll_x'}}, 'sfunctions': {'new(mouse_event_code)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'mouse_event_code'}], 'sublime': 'new(${1:mouse_event_code})$0'}}}, 'CC::ScaleTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, s)': {'ret_type': 'CC::ScaleTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 's'}], 'sublime': 'create(${1:duration}, ${2:s})$0'}, 'create(duration, sx, sy, sz)': {'ret_type': 'CC::ScaleTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'sx'}, {'type': 'float', 'name': 'sy'}, {'type': 'float', 'name': 'sz'}], 'sublime': 'create(${1:duration}, ${2:sx}, ${3:sy}, ${4:sz})$0'}, 'create(duration, sx, sy)': {'ret_type': 'CC::ScaleTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'sx'}, {'type': 'float', 'name': 'sy'}], 'sublime': 'create(${1:duration}, ${2:sx}, ${3:sy})$0'}}}, 'CC::TransitionFlipAngular': {'base_class': 'CC::TransitionSceneOriented', 'ifunctions': {}, 'sfunctions': {'create(t, s)': {'ret_type': 'CC::TransitionFlipAngular', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}], 'sublime': 'create(${1:t}, ${2:s})$0'}, 'create(t, s, o)': {'ret_type': 'CC::TransitionFlipAngular', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}, {'type': 'int', 'name': 'o'}], 'sublime': 'create(${1:t}, ${2:s}, ${3:o})$0'}}}, 'CC::ClippingRectangleNode': {'base_class': 'CC::Node', 'ifunctions': {'get_clipping_region()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_clipping_region'}, 'set_clipping_region(clipping_region)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'clipping_region'}], 'sublime': 'set_clipping_region(${1:clipping_region})$0'}, 'set_clipping_enabled(enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'enabled'}], 'sublime': 'set_clipping_enabled(${1:enabled})$0'}, 'clipping_enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'clipping_enabled?'}}, 'sfunctions': {'create(clipping_region)': {'ret_type': 'CC::ClippingRectangleNode', 'arguments': [{'type': 'CC::Rect', 'name': 'clipping_region'}], 'sublime': 'create(${1:clipping_region})$0'}, 'create()': {'ret_type': 'CC::ClippingRectangleNode', 'arguments': [], 'sublime': 'create'}}}, 'CC::Liquid': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_amplitude_rate(amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:amplitude_rate})$0'}, 'set_amplitude(amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude'}], 'sublime': 'set_amplitude(${1:amplitude})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}}, 'sfunctions': {'create(duration, grid_size, waves, amplitude)': {'ret_type': 'CC::Liquid', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'waves'}, {'type': 'float', 'name': 'amplitude'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:waves}, ${4:amplitude})$0'}}}, 'CC::Hide': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::Hide', 'arguments': [], 'sublime': 'create'}}}, 'CC::EaseElastic': {'base_class': 'CC::ActionEase', 'ifunctions': {'get_period()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_period'}, 'set_period(f_period)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'f_period'}], 'sublime': 'set_period(${1:f_period})$0'}}, 'sfunctions': {}}, 'CC::Timer': {'base_class': 'CC::Ref', 'ifunctions': {'get_interval()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_interval'}, 'cancel()': {'ret_type': 'void', 'arguments': [], 'sublime': 'cancel'}, 'update(dt)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'dt'}], 'sublime': 'update(${1:dt})$0'}, 'trigger()': {'ret_type': 'void', 'arguments': [], 'sublime': 'trigger'}, 'setup_timer_with_interval(seconds, repeat, delay)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'seconds'}, {'type': 'int', 'name': 'repeat'}, {'type': 'float', 'name': 'delay'}], 'sublime': 'setup_timer_with_interval(${1:seconds}, ${2:repeat}, ${3:delay})$0'}, 'set_interval(interval)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'interval'}], 'sublime': 'set_interval(${1:interval})$0'}}, 'sfunctions': {}}, 'CC::EaseQuinticActionInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuinticActionInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::BaseLight': {'base_class': 'CC::Node', 'ifunctions': {'get_light_type()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_light_type'}, 'set_enabled(enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'enabled'}], 'sublime': 'set_enabled(${1:enabled})$0'}, 'set_intensity(intensity)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'intensity'}], 'sublime': 'set_intensity(${1:intensity})$0'}, 'get_intensity()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_intensity'}, 'set_light_flag(flag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'flag'}], 'sublime': 'set_light_flag(${1:flag})$0'}, 'get_light_flag()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_light_flag'}, 'enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'enabled?'}}, 'sfunctions': {}}, 'CC::Menu': {'base_class': 'CC::Layer', 'ifunctions': {'align_items_vertically_with_padding(padding)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'padding'}], 'sublime': 'align_items_vertically_with_padding(${1:padding})$0'}, 'align_items_in_columns(columns)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'columns'}], 'sublime': 'align_items_in_columns(${1:columns})$0'}, 'align_items_in_rows(rows)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'rows'}], 'sublime': 'align_items_in_rows(${1:rows})$0'}, 'set_enabled(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_enabled(${1:value})$0'}, 'align_items_in_columns_with_array(rows)': {'ret_type': 'void', 'arguments': [{'type': 'array', 'name': 'rows'}], 'sublime': 'align_items_in_columns_with_array(${1:rows})$0'}, 'align_items_in_rows_with_array(columns)': {'ret_type': 'void', 'arguments': [{'type': 'array', 'name': 'columns'}], 'sublime': 'align_items_in_rows_with_array(${1:columns})$0'}, 'align_items_horizontally()': {'ret_type': 'void', 'arguments': [], 'sublime': 'align_items_horizontally'}, 'align_items_horizontally_with_padding(padding)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'padding'}], 'sublime': 'align_items_horizontally_with_padding(${1:padding})$0'}, 'align_items_vertically()': {'ret_type': 'void', 'arguments': [], 'sublime': 'align_items_vertically'}, 'enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'enabled?'}}, 'sfunctions': {'create_with_item(item)': {'ret_type': 'CC::Menu', 'arguments': [{'type': 'CC::MenuItem', 'name': 'item'}], 'sublime': 'create_with_item(${1:item})$0'}, 'create()': {'ret_type': 'CC::Menu', 'arguments': [], 'sublime': 'create'}, 'create(item)': {'ret_type': 'CC::Menu', 'arguments': [{'type': 'CC::MenuItem', 'name': 'item'}], 'sublime': 'create(${1:item})$0'}, 'create_with_array(array_of_items)': {'ret_type': 'CC::Menu', 'arguments': [{'type': 'CC::Vector<cocos2d::MenuItem *>', 'name': 'array_of_items'}], 'sublime': 'create_with_array(${1:array_of_items})$0'}}}, 'CC::GLProgram': {'base_class': 'CC::Ref', 'ifunctions': {'set_uniform_location_with1i(location, i1)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'location'}, {'type': 'int', 'name': 'i1'}], 'sublime': 'set_uniform_location_with1i(${1:location}, ${2:i1})$0'}, 'init_with_filenames(v_shader_filename, f_shader_filename)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'v_shader_filename'}, {'type': 'string', 'name': 'f_shader_filename'}], 'sublime': 'init_with_filenames(${1:v_shader_filename}, ${2:f_shader_filename})$0'}, 'get_attrib_location(attribute_name)': {'ret_type': 'int', 'arguments': [{'type': 'string', 'name': 'attribute_name'}], 'sublime': 'get_attrib_location(${1:attribute_name})$0'}, 'init_with_byte_arrays(v_shader_byte_array, f_shader_byte_array)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'v_shader_byte_array'}, {'type': 'string', 'name': 'f_shader_byte_array'}], 'sublime': 'init_with_byte_arrays(${1:v_shader_byte_array}, ${2:f_shader_byte_array})$0'}, 'use()': {'ret_type': 'void', 'arguments': [], 'sublime': 'use'}, 'bind_attrib_location(attribute_name, index)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'attribute_name'}, {'type': 'int', 'name': 'index'}], 'sublime': 'bind_attrib_location(${1:attribute_name}, ${2:index})$0'}, 'get_vertex_shader_log()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_vertex_shader_log'}, 'set_uniforms_for_builtins(model_view)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'model_view'}], 'sublime': 'set_uniforms_for_builtins(${1:model_view})$0'}, 'link()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'link'}, 'set_uniforms_for_builtins()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set_uniforms_for_builtins'}, 'get_fragment_shader_log()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_fragment_shader_log'}, 'reset()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset'}, 'update_uniforms()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_uniforms'}}, 'sfunctions': {'create_with_filenames(v_shader_filename, f_shader_filename)': {'ret_type': 'CC::GLProgram', 'arguments': [{'type': 'string', 'name': 'v_shader_filename'}, {'type': 'string', 'name': 'f_shader_filename'}], 'sublime': 'create_with_filenames(${1:v_shader_filename}, ${2:f_shader_filename})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}, 'create_with_byte_arrays(v_shader_byte_array, f_shader_byte_array)': {'ret_type': 'CC::GLProgram', 'arguments': [{'type': 'string', 'name': 'v_shader_byte_array'}, {'type': 'string', 'name': 'f_shader_byte_array'}], 'sublime': 'create_with_byte_arrays(${1:v_shader_byte_array}, ${2:f_shader_byte_array})$0'}}}, 'CC::FadeOut': {'base_class': 'CC::FadeTo', 'ifunctions': {'set_reverse_action(ac)': {'ret_type': 'void', 'arguments': [{'type': 'CC::FadeTo', 'name': 'ac'}], 'sublime': 'set_reverse_action(${1:ac})$0'}}, 'sfunctions': {'create(d)': {'ret_type': 'CC::FadeOut', 'arguments': [{'type': 'float', 'name': 'd'}], 'sublime': 'create(${1:d})$0'}}}, 'CC::MenuItemLabel': {'base_class': 'CC::MenuItem', 'ifunctions': {'set_label(node)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'node'}], 'sublime': 'set_label(${1:node})$0'}, 'get_disabled_color()': {'ret_type': 'CC::Color3B', 'arguments': [], 'sublime': 'get_disabled_color'}, 'set_disabled_color(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'color'}], 'sublime': 'set_disabled_color(${1:color})$0'}, 'set_string(label)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'label'}], 'sublime': 'set_string(${1:label})$0'}, 'get_label()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_label'}}, 'sfunctions': {'create(label)': {'ret_type': 'CC::MenuItemLabel', 'arguments': [{'type': 'CC::Node', 'name': 'label'}], 'sublime': 'create(${1:label})$0'}, 'create(label, callback)': {'ret_type': 'CC::MenuItemLabel', 'arguments': [{'type': 'CC::Node', 'name': 'label'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:label}, ${2:callback})$0'}}}, 'CC::EaseCubicActionInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseCubicActionInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::DirectionLight': {'base_class': 'CC::BaseLight', 'ifunctions': {'get_direction_in_world()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_direction_in_world'}, 'get_direction()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_direction'}, 'set_direction(dir)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'dir'}], 'sublime': 'set_direction(${1:dir})$0'}}, 'sfunctions': {'create(direction, color)': {'ret_type': 'CC::DirectionLight', 'arguments': [{'type': 'CC::Vec3', 'name': 'direction'}, {'type': 'CC::Color3B', 'name': 'color'}], 'sublime': 'create(${1:direction}, ${2:color})$0'}}}, 'CC::ProgressTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, percent)': {'ret_type': 'CC::ProgressTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'percent'}], 'sublime': 'create(${1:duration}, ${2:percent})$0'}}}, 'CC::TransitionZoomFlipY': {'base_class': 'CC::TransitionSceneOriented', 'ifunctions': {}, 'sfunctions': {'create(t, s)': {'ret_type': 'CC::TransitionZoomFlipY', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}], 'sublime': 'create(${1:t}, ${2:s})$0'}, 'create(t, s, o)': {'ret_type': 'CC::TransitionZoomFlipY', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}, {'type': 'int', 'name': 'o'}], 'sublime': 'create(${1:t}, ${2:s}, ${3:o})$0'}}}, 'CC::OrbitCamera': {'base_class': 'CC::ActionCamera', 'ifunctions': {}, 'sfunctions': {'create(t, radius, delta_radius, angle_z, delta_angle_z, angle_x, delta_angle_x)': {'ret_type': 'CC::OrbitCamera', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'float', 'name': 'radius'}, {'type': 'float', 'name': 'delta_radius'}, {'type': 'float', 'name': 'angle_z'}, {'type': 'float', 'name': 'delta_angle_z'}, {'type': 'float', 'name': 'angle_x'}, {'type': 'float', 'name': 'delta_angle_x'}], 'sublime': 'create(${1:t}, ${2:radius}, ${3:delta_radius}, ${4:angle_z}, ${5:delta_angle_z}, ${6:angle_x}, ${7:delta_angle_x})$0'}}}, 'CC::ShatteredTiles3D': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {}, 'sfunctions': {'create(duration, grid_size, range, shatter_z)': {'ret_type': 'CC::ShatteredTiles3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'range'}, {'type': 'bool', 'name': 'shatter_z'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:range}, ${4:shatter_z})$0'}}}, 'CC::EaseBackInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBackInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ActionCamera': {'base_class': 'CC::ActionInterval', 'ifunctions': {'get_center()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_center'}, 'get_eye()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_eye'}, 'set_eye(eye)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'eye'}], 'sublime': 'set_eye(${1:eye})$0'}, 'set_up(up)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'up'}], 'sublime': 'set_up(${1:up})$0'}, 'set_eye(x, y, z)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}, {'type': 'float', 'name': 'z'}], 'sublime': 'set_eye(${1:x}, ${2:y}, ${3:z})$0'}, 'get_up()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_up'}, 'set_center(center)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'center'}], 'sublime': 'set_center(${1:center})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::SpriteFrame': {'base_class': 'CC::Ref', 'ifunctions': {'set_rect(rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'set_rect(${1:rect})$0'}, 'clone()': {'ret_type': 'CC::SpriteFrame', 'arguments': [], 'sublime': 'clone'}, 'get_offset_in_pixels()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_offset_in_pixels'}, 'set_rect_in_pixels(rect_in_pixels)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect_in_pixels'}], 'sublime': 'set_rect_in_pixels(${1:rect_in_pixels})$0'}, 'rotated?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'rotated?'}, 'get_original_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_original_size'}, 'get_rect()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_rect'}, 'get_rect_in_pixels()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_rect_in_pixels'}, 'get_original_size_in_pixels()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_original_size_in_pixels'}, 'set_original_size_in_pixels(size_in_pixels)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'size_in_pixels'}], 'sublime': 'set_original_size_in_pixels(${1:size_in_pixels})$0'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'set_original_size(size_in_pixels)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'size_in_pixels'}], 'sublime': 'set_original_size(${1:size_in_pixels})$0'}, 'set_rotated(rotated)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'rotated'}], 'sublime': 'set_rotated(${1:rotated})$0'}, 'set_texture(pob_texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'pob_texture'}], 'sublime': 'set_texture(${1:pob_texture})$0'}, 'set_offset(offsets)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'offsets'}], 'sublime': 'set_offset(${1:offsets})$0'}, 'set_offset_in_pixels(offset_in_pixels)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'offset_in_pixels'}], 'sublime': 'set_offset_in_pixels(${1:offset_in_pixels})$0'}, 'get_offset()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_offset'}}, 'sfunctions': {'create(filename, rect)': {'ret_type': 'CC::SpriteFrame', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create(${1:filename}, ${2:rect})$0'}, 'create_with_texture(pob_texture, rect)': {'ret_type': 'CC::SpriteFrame', 'arguments': [{'type': 'CC::Texture2D', 'name': 'pob_texture'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create_with_texture(${1:pob_texture}, ${2:rect})$0'}, 'create_with_texture(pob_texture, rect, rotated, offset, original_size)': {'ret_type': 'CC::SpriteFrame', 'arguments': [{'type': 'CC::Texture2D', 'name': 'pob_texture'}, {'type': 'CC::Rect', 'name': 'rect'}, {'type': 'bool', 'name': 'rotated'}, {'type': 'CC::Vec2', 'name': 'offset'}, {'type': 'CC::Size', 'name': 'original_size'}], 'sublime': 'create_with_texture(${1:pob_texture}, ${2:rect}, ${3:rotated}, ${4:offset}, ${5:original_size})$0'}, 'create(filename, rect, rotated, offset, original_size)': {'ret_type': 'CC::SpriteFrame', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'CC::Rect', 'name': 'rect'}, {'type': 'bool', 'name': 'rotated'}, {'type': 'CC::Vec2', 'name': 'offset'}, {'type': 'CC::Size', 'name': 'original_size'}], 'sublime': 'create(${1:filename}, ${2:rect}, ${3:rotated}, ${4:offset}, ${5:original_size})$0'}}}, 'CC::EventFocus': {'base_class': 'CC::Event', 'ifunctions': {}, 'sfunctions': {'new(widget_lose_focus, widget_get_focus)': {'ret_type': 'void', 'arguments': [{'type': 'CCUI::Widget', 'name': 'widget_lose_focus'}, {'type': 'CCUI::Widget', 'name': 'widget_get_focus'}], 'sublime': 'new(${1:widget_lose_focus}, ${2:widget_get_focus})$0'}}}, 'CC::Director': {'ifunctions': {'draw_scene()': {'ret_type': 'void', 'arguments': [], 'sublime': 'draw_scene'}, 'get_console()': {'ret_type': 'CC::Console', 'arguments': [], 'sublime': 'get_console'}, 'display_stats?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'display_stats?'}, 'set_alpha_blending(on)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'on'}], 'sublime': 'set_alpha_blending(${1:on})$0'}, 'purge_cached_data()': {'ret_type': 'void', 'arguments': [], 'sublime': 'purge_cached_data'}, 'get_delta_time()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_delta_time'}, 'get_texture_cache()': {'ret_type': 'CC::TextureCache', 'arguments': [], 'sublime': 'get_texture_cache'}, 'get_frame_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_frame_rate'}, 'load_identity_matrix(type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'load_identity_matrix(${1:type})$0'}, 'get_scheduler()': {'ret_type': 'CC::Scheduler', 'arguments': [], 'sublime': 'get_scheduler'}, 'set_clear_color(clear_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'clear_color'}], 'sublime': 'set_clear_color(${1:clear_color})$0'}, 'get_matrix(type)': {'ret_type': 'CC::Mat4', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'get_matrix(${1:type})$0'}, 'get_win_size_in_pixels()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_win_size_in_pixels'}, 'push_scene(scene)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'push_scene(${1:scene})$0'}, 'set_scheduler(scheduler)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Scheduler', 'name': 'scheduler'}], 'sublime': 'set_scheduler(${1:scheduler})$0'}, 'get_visible_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_visible_size'}, 'pause()': {'ret_type': 'void', 'arguments': [], 'sublime': 'pause'}, 'get_notification_node()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_notification_node'}, 'init()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'init'}, 'load_matrix(type, mat)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}, {'type': 'CC::Mat4', 'name': 'mat'}], 'sublime': 'load_matrix(${1:type}, ${2:mat})$0'}, 'pop_scene()': {'ret_type': 'void', 'arguments': [], 'sublime': 'pop_scene'}, 'next_delta_time_zero?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'next_delta_time_zero?'}, 'set_event_dispatcher(dispatcher)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventDispatcher', 'name': 'dispatcher'}], 'sublime': 'set_event_dispatcher(${1:dispatcher})$0'}, 'set_gldefault_values()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set_gldefault_values'}, 'replace_scene(scene)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'replace_scene(${1:scene})$0'}, 'start_animation()': {'ret_type': 'void', 'arguments': [], 'sublime': 'start_animation'}, 'set_content_scale_factor(scale_factor)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scale_factor'}], 'sublime': 'set_content_scale_factor(${1:scale_factor})$0'}, 'convert_to_ui(point)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}], 'sublime': 'convert_to_ui(${1:point})$0'}, 'get_zeye()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_zeye'}, 'end()': {'ret_type': 'void', 'arguments': [], 'sublime': 'end'}, 'get_total_frames()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_total_frames'}, 'set_open_glview(open_glview)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GLView', 'name': 'open_glview'}], 'sublime': 'set_open_glview(${1:open_glview})$0'}, 'run_with_scene(scene)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'run_with_scene(${1:scene})$0'}, 'set_animation_interval(interval)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'interval'}], 'sublime': 'set_animation_interval(${1:interval})$0'}, 'set_next_delta_time_zero(next_delta_time_zero)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'next_delta_time_zero'}], 'sublime': 'set_next_delta_time_zero(${1:next_delta_time_zero})$0'}, 'stop_animation()': {'ret_type': 'void', 'arguments': [], 'sublime': 'stop_animation'}, 'restart()': {'ret_type': 'void', 'arguments': [], 'sublime': 'restart'}, 'set_notification_node(node)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'node'}], 'sublime': 'set_notification_node(${1:node})$0'}, 'main_loop()': {'ret_type': 'void', 'arguments': [], 'sublime': 'main_loop'}, 'get_visible_origin()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_visible_origin'}, 'push_matrix(type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'push_matrix(${1:type})$0'}, 'get_running_scene()': {'ret_type': 'CC::Scene', 'arguments': [], 'sublime': 'get_running_scene'}, 'set_display_stats(display_stats)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'display_stats'}], 'sublime': 'set_display_stats(${1:display_stats})$0'}, 'reset_matrix_stack()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset_matrix_stack'}, 'convert_to_gl(point)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}], 'sublime': 'convert_to_gl(${1:point})$0'}, 'set_depth_test(on)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'on'}], 'sublime': 'set_depth_test(${1:on})$0'}, 'get_seconds_per_frame()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_seconds_per_frame'}, 'multiply_matrix(type, mat)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}, {'type': 'CC::Mat4', 'name': 'mat'}], 'sublime': 'multiply_matrix(${1:type}, ${2:mat})$0'}, 'resume()': {'ret_type': 'void', 'arguments': [], 'sublime': 'resume'}, 'pop_to_scene_stack_level(level)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'level'}], 'sublime': 'pop_to_scene_stack_level(${1:level})$0'}, 'get_win_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_win_size'}, 'set_default_values()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set_default_values'}, 'get_open_glview()': {'ret_type': 'CC::GLView', 'arguments': [], 'sublime': 'get_open_glview'}, 'set_viewport()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set_viewport'}, 'paused?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'paused?'}, 'pop_to_root_scene()': {'ret_type': 'void', 'arguments': [], 'sublime': 'pop_to_root_scene'}, 'send_cleanup_to_scene?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'send_cleanup_to_scene?'}, 'get_event_dispatcher()': {'ret_type': 'CC::EventDispatcher', 'arguments': [], 'sublime': 'get_event_dispatcher'}, 'set_projection(projection)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'projection'}], 'sublime': 'set_projection(${1:projection})$0'}, 'get_animation_interval()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_animation_interval'}, 'pop_matrix(type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'pop_matrix(${1:type})$0'}, 'get_action_manager()': {'ret_type': 'CC::ActionManager', 'arguments': [], 'sublime': 'get_action_manager'}, 'set_action_manager(action_manager)': {'ret_type': 'void', 'arguments': [{'type': 'CC::ActionManager', 'name': 'action_manager'}], 'sublime': 'set_action_manager(${1:action_manager})$0'}, 'get_content_scale_factor()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_content_scale_factor'}}, 'sfunctions': {'get_instance()': {'ret_type': 'CC::Director', 'arguments': [], 'sublime': 'get_instance'}}}, 'CC::FlipY3D': {'base_class': 'CC::FlipX3D', 'ifunctions': {}, 'sfunctions': {'create(duration)': {'ret_type': 'CC::FlipY3D', 'arguments': [{'type': 'float', 'name': 'duration'}], 'sublime': 'create(${1:duration})$0'}}}, 'CC::EaseQuinticActionOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuinticActionOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ParticleFire': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleFire', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleFire', 'arguments': [], 'sublime': 'create'}}}, 'CC::Vec2': {'ifunctions': {'rotate(other)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'rotate(${1:other})$0'}, 'set(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'set(${1:v})$0'}, 'smooth(target, elapsed_time, response_time)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'target'}, {'type': 'float', 'name': 'elapsed_time'}, {'type': 'float', 'name': 'response_time'}], 'sublime': 'smooth(${1:target}, ${2:elapsed_time}, ${3:response_time})$0'}, 'set(xx, yy)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}], 'sublime': 'set(${1:xx}, ${2:yy})$0'}, 'distance(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'distance(${1:v})$0'}, 'comp_op(function)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'Proc', 'name': 'function'}], 'sublime': 'comp_op(${1:function})$0'}, 'get_distance_sq(other)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'get_distance_sq(${1:other})$0'}, 'get_angle(other)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'get_angle(${1:other})$0'}, 'scale(scalar)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scalar'}], 'sublime': 'scale(${1:scalar})$0'}, 'get_length_sq()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_length_sq'}, 'set_point(xx, yy)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}], 'sublime': 'set_point(${1:xx}, ${2:yy})$0'}, 'dot(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'dot(${1:v})$0'}, 'set(p1, p2)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'p1'}, {'type': 'CC::Vec2', 'name': 'p2'}], 'sublime': 'set(${1:p1}, ${2:p2})$0'}, 'zero?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'zero?'}, 'get_normalized()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_normalized'}, 'lerp(other, alpha)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}, {'type': 'float', 'name': 'alpha'}], 'sublime': 'lerp(${1:other}, ${2:alpha})$0'}, 'equals(target)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'target'}], 'sublime': 'equals(${1:target})$0'}, 'add(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'add(${1:v})$0'}, 'subtract(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'subtract(${1:v})$0'}, 'length_squared()': {'ret_type': 'float', 'arguments': [], 'sublime': 'length_squared'}, 'one?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'one?'}, 'fuzzy_equals(target, variance)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'target'}, {'type': 'float', 'name': 'variance'}], 'sublime': 'fuzzy_equals(${1:target}, ${2:variance})$0'}, 'get_distance(other)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'get_distance(${1:other})$0'}, 'clamp(min, max)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'min'}, {'type': 'CC::Vec2', 'name': 'max'}], 'sublime': 'clamp(${1:min}, ${2:max})$0'}, 'get_perp()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_perp'}, 'project(other)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'project(${1:other})$0'}, 'get_angle()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_angle'}, 'cross(other)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'cross(${1:other})$0'}, 'scale(scale)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'scale'}], 'sublime': 'scale(${1:scale})$0'}, 'normalize()': {'ret_type': 'void', 'arguments': [], 'sublime': 'normalize'}, 'unrotate(other)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'unrotate(${1:other})$0'}, 'get_rperp()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_rperp'}, 'distance_squared(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'distance_squared(${1:v})$0'}, 'rotate_by_angle(pivot, angle)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'pivot'}, {'type': 'float', 'name': 'angle'}], 'sublime': 'rotate_by_angle(${1:pivot}, ${2:angle})$0'}, 'get_midpoint(other)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'other'}], 'sublime': 'get_midpoint(${1:other})$0'}, 'rotate(point, angle)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}, {'type': 'float', 'name': 'angle'}], 'sublime': 'rotate(${1:point}, ${2:angle})$0'}, 'set(array)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'array'}], 'sublime': 'set(${1:array})$0'}, 'negate()': {'ret_type': 'void', 'arguments': [], 'sublime': 'negate'}, 'get_clamp_point(min_inclusive, max_inclusive)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'min_inclusive'}, {'type': 'CC::Vec2', 'name': 'max_inclusive'}], 'sublime': 'get_clamp_point(${1:min_inclusive}, ${2:max_inclusive})$0'}, 'length()': {'ret_type': 'float', 'arguments': [], 'sublime': 'length'}, 'get_length()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_length'}}, 'sfunctions': {'line_parallel?(a, b, c, d)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}], 'sublime': 'line_parallel?(${1:a}, ${2:b}, ${3:c}, ${4:d})$0'}, 'line_overlap?(a, b, c, d)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}], 'sublime': 'line_overlap?(${1:a}, ${2:b}, ${3:c}, ${4:d})$0'}, 'segment_intersect?(a, b, c, d)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}], 'sublime': 'segment_intersect?(${1:a}, ${2:b}, ${3:c}, ${4:d})$0'}, 'angle(v1, v2)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'v1'}, {'type': 'CC::Vec2', 'name': 'v2'}], 'sublime': 'angle(${1:v1}, ${2:v2})$0'}, 'line_intersect?(a, b, c, d)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}], 'sublime': 'line_intersect?(${1:a}, ${2:b}, ${3:c}, ${4:d})$0'}, 'dot(v1, v2)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec2', 'name': 'v1'}, {'type': 'CC::Vec2', 'name': 'v2'}], 'sublime': 'dot(${1:v1}, ${2:v2})$0'}, 'vec2()': {'ret_type': 'void', 'arguments': [], 'sublime': 'vec2'}, 'segment_overlap?(a, b, c, d)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}], 'sublime': 'segment_overlap?(${1:a}, ${2:b}, ${3:c}, ${4:d})$0'}, 'vec2(xx, yy)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}], 'sublime': 'vec2(${1:xx}, ${2:yy})$0'}, 'clamp(v, min, max, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'v'}, {'type': 'CC::Vec2', 'name': 'min'}, {'type': 'CC::Vec2', 'name': 'max'}, {'type': 'CC::Vec2', 'name': 'dst'}], 'sublime': 'clamp(${1:v}, ${2:min}, ${3:max}, ${4:dst})$0'}, 'segment_overlap?(a, b, c, d, s)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}, {'type': 'CC::Vec2', 'name': 's'}], 'sublime': 'segment_overlap?(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:s})$0'}, 'line_intersect?(a, b, c, d, s, t)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}, {'type': 'float', 'name': 's'}, {'type': 'float', 'name': 't'}], 'sublime': 'line_intersect?(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:s}, ${6:t})$0'}, 'vec2(copy)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'copy'}], 'sublime': 'vec2(${1:copy})$0'}, 'for_angle(a)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'float', 'name': 'a'}], 'sublime': 'for_angle(${1:a})$0'}, 'add(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'v1'}, {'type': 'CC::Vec2', 'name': 'v2'}, {'type': 'CC::Vec2', 'name': 'dst'}], 'sublime': 'add(${1:v1}, ${2:v2}, ${3:dst})$0'}, 'line_intersect?(a, b, c, d, s)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}, {'type': 'float', 'name': 's'}], 'sublime': 'line_intersect?(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:s})$0'}, 'vec2(p1, p2)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'p1'}, {'type': 'CC::Vec2', 'name': 'p2'}], 'sublime': 'vec2(${1:p1}, ${2:p2})$0'}, 'segment_overlap?(a, b, c, d, s, e)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}, {'type': 'CC::Vec2', 'name': 's'}, {'type': 'CC::Vec2', 'name': 'e'}], 'sublime': 'segment_overlap?(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:s}, ${6:e})$0'}, 'vec2(array)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'array'}], 'sublime': 'vec2(${1:array})$0'}, 'subtract(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'v1'}, {'type': 'CC::Vec2', 'name': 'v2'}, {'type': 'CC::Vec2', 'name': 'dst'}], 'sublime': 'subtract(${1:v1}, ${2:v2}, ${3:dst})$0'}, 'get_intersect_point(a, b, c, d)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'a'}, {'type': 'CC::Vec2', 'name': 'b'}, {'type': 'CC::Vec2', 'name': 'c'}, {'type': 'CC::Vec2', 'name': 'd'}], 'sublime': 'get_intersect_point(${1:a}, ${2:b}, ${3:c}, ${4:d})$0'}}}, 'CC::Vec3': {'ifunctions': {'distance(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'distance(${1:v})$0'}, 'distance_squared(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'distance_squared(${1:v})$0'}, 'scale(scalar)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scalar'}], 'sublime': 'scale(${1:scalar})$0'}, 'one?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'one?'}, 'set(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'set(${1:v})$0'}, 'smooth(target, elapsed_time, response_time)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'target'}, {'type': 'float', 'name': 'elapsed_time'}, {'type': 'float', 'name': 'response_time'}], 'sublime': 'smooth(${1:target}, ${2:elapsed_time}, ${3:response_time})$0'}, 'subtract(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'subtract(${1:v})$0'}, 'clamp(min, max)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'min'}, {'type': 'CC::Vec3', 'name': 'max'}], 'sublime': 'clamp(${1:min}, ${2:max})$0'}, 'dot(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'dot(${1:v})$0'}, 'set(p1, p2)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'p1'}, {'type': 'CC::Vec3', 'name': 'p2'}], 'sublime': 'set(${1:p1}, ${2:p2})$0'}, 'cross(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'cross(${1:v})$0'}, 'get_normalized()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_normalized'}, 'set(array)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'array'}], 'sublime': 'set(${1:array})$0'}, 'negate()': {'ret_type': 'void', 'arguments': [], 'sublime': 'negate'}, 'add(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}], 'sublime': 'add(${1:v})$0'}, 'normalize()': {'ret_type': 'void', 'arguments': [], 'sublime': 'normalize'}, 'set(xx, yy, zz)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}, {'type': 'float', 'name': 'zz'}], 'sublime': 'set(${1:xx}, ${2:yy}, ${3:zz})$0'}, 'length()': {'ret_type': 'float', 'arguments': [], 'sublime': 'length'}, 'zero?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'zero?'}, 'length_squared()': {'ret_type': 'float', 'arguments': [], 'sublime': 'length_squared'}}, 'sfunctions': {'subtract(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v1'}, {'type': 'CC::Vec3', 'name': 'v2'}, {'type': 'CC::Vec3', 'name': 'dst'}], 'sublime': 'subtract(${1:v1}, ${2:v2}, ${3:dst})$0'}, 'dot(v1, v2)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec3', 'name': 'v1'}, {'type': 'CC::Vec3', 'name': 'v2'}], 'sublime': 'dot(${1:v1}, ${2:v2})$0'}, 'vec3(array)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'array'}], 'sublime': 'vec3(${1:array})$0'}, 'clamp(v, min, max, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v'}, {'type': 'CC::Vec3', 'name': 'min'}, {'type': 'CC::Vec3', 'name': 'max'}, {'type': 'CC::Vec3', 'name': 'dst'}], 'sublime': 'clamp(${1:v}, ${2:min}, ${3:max}, ${4:dst})$0'}, 'vec3(p1, p2)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'p1'}, {'type': 'CC::Vec3', 'name': 'p2'}], 'sublime': 'vec3(${1:p1}, ${2:p2})$0'}, 'vec3(xx, yy, zz)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}, {'type': 'float', 'name': 'zz'}], 'sublime': 'vec3(${1:xx}, ${2:yy}, ${3:zz})$0'}, 'add(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v1'}, {'type': 'CC::Vec3', 'name': 'v2'}, {'type': 'CC::Vec3', 'name': 'dst'}], 'sublime': 'add(${1:v1}, ${2:v2}, ${3:dst})$0'}, 'from_color(color)': {'ret_type': 'CC::Vec3', 'arguments': [{'type': 'int', 'name': 'color'}], 'sublime': 'from_color(${1:color})$0'}, 'angle(v1, v2)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec3', 'name': 'v1'}, {'type': 'CC::Vec3', 'name': 'v2'}], 'sublime': 'angle(${1:v1}, ${2:v2})$0'}, 'vec3(copy)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'copy'}], 'sublime': 'vec3(${1:copy})$0'}, 'vec3()': {'ret_type': 'void', 'arguments': [], 'sublime': 'vec3'}, 'cross(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'v1'}, {'type': 'CC::Vec3', 'name': 'v2'}, {'type': 'CC::Vec3', 'name': 'dst'}], 'sublime': 'cross(${1:v1}, ${2:v2}, ${3:dst})$0'}}}, 'CC::Vec4': {'ifunctions': {'distance(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}], 'sublime': 'distance(${1:v})$0'}, 'distance_squared(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}], 'sublime': 'distance_squared(${1:v})$0'}, 'scale(scalar)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'scalar'}], 'sublime': 'scale(${1:scalar})$0'}, 'length()': {'ret_type': 'float', 'arguments': [], 'sublime': 'length'}, 'one?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'one?'}, 'set(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}], 'sublime': 'set(${1:v})$0'}, 'clamp(min, max)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'min'}, {'type': 'CC::Vec4', 'name': 'max'}], 'sublime': 'clamp(${1:min}, ${2:max})$0'}, 'dot(v)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}], 'sublime': 'dot(${1:v})$0'}, 'set(p1, p2)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'p1'}, {'type': 'CC::Vec4', 'name': 'p2'}], 'sublime': 'set(${1:p1}, ${2:p2})$0'}, 'zero?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'zero?'}, 'get_normalized()': {'ret_type': 'CC::Vec4', 'arguments': [], 'sublime': 'get_normalized'}, 'set(array)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'array'}], 'sublime': 'set(${1:array})$0'}, 'negate()': {'ret_type': 'void', 'arguments': [], 'sublime': 'negate'}, 'add(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}], 'sublime': 'add(${1:v})$0'}, 'normalize()': {'ret_type': 'void', 'arguments': [], 'sublime': 'normalize'}, 'subtract(v)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}], 'sublime': 'subtract(${1:v})$0'}, 'set(xx, yy, zz, ww)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}, {'type': 'float', 'name': 'zz'}, {'type': 'float', 'name': 'ww'}], 'sublime': 'set(${1:xx}, ${2:yy}, ${3:zz}, ${4:ww})$0'}, 'length_squared()': {'ret_type': 'float', 'arguments': [], 'sublime': 'length_squared'}}, 'sfunctions': {'vec4(copy)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'copy'}], 'sublime': 'vec4(${1:copy})$0'}, 'vec4(p1, p2)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'p1'}, {'type': 'CC::Vec4', 'name': 'p2'}], 'sublime': 'vec4(${1:p1}, ${2:p2})$0'}, 'subtract(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'v1'}, {'type': 'CC::Vec4', 'name': 'v2'}, {'type': 'CC::Vec4', 'name': 'dst'}], 'sublime': 'subtract(${1:v1}, ${2:v2}, ${3:dst})$0'}, 'vec4(array)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'array'}], 'sublime': 'vec4(${1:array})$0'}, 'dot(v1, v2)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec4', 'name': 'v1'}, {'type': 'CC::Vec4', 'name': 'v2'}], 'sublime': 'dot(${1:v1}, ${2:v2})$0'}, 'clamp(v, min, max, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'v'}, {'type': 'CC::Vec4', 'name': 'min'}, {'type': 'CC::Vec4', 'name': 'max'}, {'type': 'CC::Vec4', 'name': 'dst'}], 'sublime': 'clamp(${1:v}, ${2:min}, ${3:max}, ${4:dst})$0'}, 'vec4()': {'ret_type': 'void', 'arguments': [], 'sublime': 'vec4'}, 'add(v1, v2, dst)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec4', 'name': 'v1'}, {'type': 'CC::Vec4', 'name': 'v2'}, {'type': 'CC::Vec4', 'name': 'dst'}], 'sublime': 'add(${1:v1}, ${2:v2}, ${3:dst})$0'}, 'from_color(color)': {'ret_type': 'CC::Vec4', 'arguments': [{'type': 'int', 'name': 'color'}], 'sublime': 'from_color(${1:color})$0'}, 'angle(v1, v2)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Vec4', 'name': 'v1'}, {'type': 'CC::Vec4', 'name': 'v2'}], 'sublime': 'angle(${1:v1}, ${2:v2})$0'}, 'vec4(xx, yy, zz, ww)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'xx'}, {'type': 'float', 'name': 'yy'}, {'type': 'float', 'name': 'zz'}, {'type': 'float', 'name': 'ww'}], 'sublime': 'vec4(${1:xx}, ${2:yy}, ${3:zz}, ${4:ww})$0'}}}, 'CC::AmbientLight': {'base_class': 'CC::BaseLight', 'ifunctions': {}, 'sfunctions': {'create(color)': {'ret_type': 'CC::AmbientLight', 'arguments': [{'type': 'CC::Color3B', 'name': 'color'}], 'sublime': 'create(${1:color})$0'}}}, 'CC::FadeOutUpTiles': {'base_class': 'CC::FadeOutTRTiles', 'ifunctions': {'transform_tile(pos, distance)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}, {'type': 'float', 'name': 'distance'}], 'sublime': 'transform_tile(${1:pos}, ${2:distance})$0'}}, 'sfunctions': {'create(duration, grid_size)': {'ret_type': 'CC::FadeOutUpTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:duration}, ${2:grid_size})$0'}}}, 'CC::AnimationFrameData': {'ifunctions': {}, 'sfunctions': {}}, 'CC::EaseQuadraticActionIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuadraticActionIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::EaseCubicActionOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseCubicActionOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::EaseCircleActionInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseCircleActionInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::FlipY': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create(y)': {'ret_type': 'CC::FlipY', 'arguments': [{'type': 'bool', 'name': 'y'}], 'sublime': 'create(${1:y})$0'}}}, 'CC::Animation3DData': {'ifunctions': {'reset_data()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset_data'}}, 'sfunctions': {'animation3_ddata(other)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Animation3DData', 'name': 'other'}], 'sublime': 'animation3_ddata(${1:other})$0'}, 'animation3_ddata()': {'ret_type': 'void', 'arguments': [], 'sublime': 'animation3_ddata'}}}, 'CC::UserDefault': {'ifunctions': {'get_integer_for_key(p_key, default_value)': {'ret_type': 'int', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'int', 'name': 'default_value'}], 'sublime': 'get_integer_for_key(${1:p_key}, ${2:default_value})$0'}, 'get_integer_for_key(p_key)': {'ret_type': 'int', 'arguments': [{'type': 'string', 'name': 'p_key'}], 'sublime': 'get_integer_for_key(${1:p_key})$0'}, 'set_string_for_key(p_key, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'string', 'name': 'value'}], 'sublime': 'set_string_for_key(${1:p_key}, ${2:value})$0'}, 'get_double_for_key(p_key)': {'ret_type': 'float', 'arguments': [{'type': 'string', 'name': 'p_key'}], 'sublime': 'get_double_for_key(${1:p_key})$0'}, 'get_float_for_key(p_key)': {'ret_type': 'float', 'arguments': [{'type': 'string', 'name': 'p_key'}], 'sublime': 'get_float_for_key(${1:p_key})$0'}, 'get_string_for_key(p_key, default_value)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'string', 'name': 'default_value'}], 'sublime': 'get_string_for_key(${1:p_key}, ${2:default_value})$0'}, 'set_float_for_key(p_key, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'float', 'name': 'value'}], 'sublime': 'set_float_for_key(${1:p_key}, ${2:value})$0'}, 'set_double_for_key(p_key, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'float', 'name': 'value'}], 'sublime': 'set_double_for_key(${1:p_key}, ${2:value})$0'}, 'get_double_for_key(p_key, default_value)': {'ret_type': 'float', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'float', 'name': 'default_value'}], 'sublime': 'get_double_for_key(${1:p_key}, ${2:default_value})$0'}, 'get_float_for_key(p_key, default_value)': {'ret_type': 'float', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'float', 'name': 'default_value'}], 'sublime': 'get_float_for_key(${1:p_key}, ${2:default_value})$0'}, 'set_bool_for_key(p_key, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'bool', 'name': 'value'}], 'sublime': 'set_bool_for_key(${1:p_key}, ${2:value})$0'}, 'get_string_for_key(p_key)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'p_key'}], 'sublime': 'get_string_for_key(${1:p_key})$0'}, 'get_bool_for_key(p_key, default_value)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'bool', 'name': 'default_value'}], 'sublime': 'get_bool_for_key(${1:p_key}, ${2:default_value})$0'}, 'flush()': {'ret_type': 'void', 'arguments': [], 'sublime': 'flush'}, 'set_integer_for_key(p_key, value)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'p_key'}, {'type': 'int', 'name': 'value'}], 'sublime': 'set_integer_for_key(${1:p_key}, ${2:value})$0'}, 'get_bool_for_key(p_key)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'p_key'}], 'sublime': 'get_bool_for_key(${1:p_key})$0'}}, 'sfunctions': {'xmlfile_exist?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'xmlfile_exist?'}, 'get_xmlfile_path()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_xmlfile_path'}, 'destroy_instance()': {'ret_type': 'void', 'arguments': [], 'sublime': 'destroy_instance'}}}, 'CC::EventDispatcher': {'base_class': 'CC::Ref', 'ifunctions': {'set_priority(listener, fixed_priority)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventListener', 'name': 'listener'}, {'type': 'int', 'name': 'fixed_priority'}], 'sublime': 'set_priority(${1:listener}, ${2:fixed_priority})$0'}, 'set_enabled(enabled?)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'enabled?'}], 'sublime': 'set_enabled(${1:enabled?})$0'}, 'pause_event_listeners_for_target(target, recursive)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}, {'type': 'bool', 'name': 'recursive'}], 'sublime': 'pause_event_listeners_for_target(${1:target}, ${2:recursive})$0'}, 'remove_event_listeners_for_type(listener_type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'listener_type'}], 'sublime': 'remove_event_listeners_for_type(${1:listener_type})$0'}, 'remove_all_event_listeners()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_event_listeners'}, 'pause_event_listeners_for_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'pause_event_listeners_for_target(${1:target})$0'}, 'remove_custom_event_listeners(custom_event_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'custom_event_name'}], 'sublime': 'remove_custom_event_listeners(${1:custom_event_name})$0'}, 'resume_event_listeners_for_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'resume_event_listeners_for_target(${1:target})$0'}, 'resume_event_listeners_for_target(target, recursive)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}, {'type': 'bool', 'name': 'recursive'}], 'sublime': 'resume_event_listeners_for_target(${1:target}, ${2:recursive})$0'}, 'remove_event_listeners_for_target(target, recursive)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}, {'type': 'bool', 'name': 'recursive'}], 'sublime': 'remove_event_listeners_for_target(${1:target}, ${2:recursive})$0'}, 'add_event_listener_with_fixed_priority(listener, fixed_priority)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventListener', 'name': 'listener'}, {'type': 'int', 'name': 'fixed_priority'}], 'sublime': 'add_event_listener_with_fixed_priority(${1:listener}, ${2:fixed_priority})$0'}, 'dispatch_event(event)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Event', 'name': 'event'}], 'sublime': 'dispatch_event(${1:event})$0'}, 'add_custom_event_listener(event_name, callback)': {'ret_type': 'CC::EventListenerCustom', 'arguments': [{'type': 'string', 'name': 'event_name'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'add_custom_event_listener(${1:event_name}, ${2:callback})$0'}, 'remove_event_listeners_for_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'remove_event_listeners_for_target(${1:target})$0'}, 'add_event_listener_with_scene_graph_priority(listener, node)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventListener', 'name': 'listener'}, {'type': 'CC::Node', 'name': 'node'}], 'sublime': 'add_event_listener_with_scene_graph_priority(${1:listener}, ${2:node})$0'}, 'remove_event_listener(listener)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventListener', 'name': 'listener'}], 'sublime': 'remove_event_listener(${1:listener})$0'}, 'enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'enabled?'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::Blink': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, blinks)': {'ret_type': 'CC::Blink', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'int', 'name': 'blinks'}], 'sublime': 'create(${1:duration}, ${2:blinks})$0'}}}, 'CC::Sprite': {'base_class': 'CC::Node', 'ifunctions': {'get_atlas_index()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_atlas_index'}, 'set_flipped_x(flipped_x)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'flipped_x'}], 'sublime': 'set_flipped_x(${1:flipped_x})$0'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'set_vertex_rect(rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'set_vertex_rect(${1:rect})$0'}, 'set_texture(filename)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'set_texture(${1:filename})$0'}, 'dirty?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'dirty?'}, 'set_display_frame_with_animation_name(animation_name, frame_index)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'animation_name'}, {'type': 'int', 'name': 'frame_index'}], 'sublime': 'set_display_frame_with_animation_name(${1:animation_name}, ${2:frame_index})$0'}, 'flipped_x?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'flipped_x?'}, 'frame_displayed?(frame)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}], 'sublime': 'frame_displayed?(${1:frame})$0'}, 'set_texture_atlas(texture_atlas)': {'ret_type': 'void', 'arguments': [{'type': 'CC::TextureAtlas', 'name': 'texture_atlas'}], 'sublime': 'set_texture_atlas(${1:texture_atlas})$0'}, 'remove_all_children_with_cleanup(cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_all_children_with_cleanup(${1:cleanup})$0'}, 'get_texture_rect()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_texture_rect'}, 'texture_rect_rotated?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'texture_rect_rotated?'}, 'get_offset_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_offset_position'}, 'set_atlas_index(atlas_index)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'atlas_index'}], 'sublime': 'set_atlas_index(${1:atlas_index})$0'}, 'get_batch_node()': {'ret_type': 'CC::SpriteBatchNode', 'arguments': [], 'sublime': 'get_batch_node'}, 'get_sprite_frame()': {'ret_type': 'CC::SpriteFrame', 'arguments': [], 'sublime': 'get_sprite_frame'}, 'flipped_y?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'flipped_y?'}, 'set_sprite_frame(sprite_frame_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'sprite_frame_name'}], 'sublime': 'set_sprite_frame(${1:sprite_frame_name})$0'}, 'set_batch_node(sprite_batch_node)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteBatchNode', 'name': 'sprite_batch_node'}], 'sublime': 'set_batch_node(${1:sprite_batch_node})$0'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'get_texture_atlas()': {'ret_type': 'CC::TextureAtlas', 'arguments': [], 'sublime': 'get_texture_atlas'}, 'set_sprite_frame(new_frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'new_frame'}], 'sublime': 'set_sprite_frame(${1:new_frame})$0'}, 'update_transform()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_transform'}, 'set_flipped_y(flipped_y)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'flipped_y'}], 'sublime': 'set_flipped_y(${1:flipped_y})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_texture_rect(rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'set_texture_rect(${1:rect})$0'}, 'set_dirty(dirty)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'dirty'}], 'sublime': 'set_dirty(${1:dirty})$0'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'set_texture_rect(rect, rotated, untrimmed_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}, {'type': 'bool', 'name': 'rotated'}, {'type': 'CC::Size', 'name': 'untrimmed_size'}], 'sublime': 'set_texture_rect(${1:rect}, ${2:rotated}, ${3:untrimmed_size})$0'}}, 'sfunctions': {'create(filename)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'create(${1:filename})$0'}, 'create()': {'ret_type': 'CC::Sprite', 'arguments': [], 'sublime': 'create'}, 'create_with_texture(texture, rect, rotated)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'CC::Rect', 'name': 'rect'}, {'type': 'bool', 'name': 'rotated'}], 'sublime': 'create_with_texture(${1:texture}, ${2:rect}, ${3:rotated})$0'}, 'create_with_texture(texture)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'create_with_texture(${1:texture})$0'}, 'create(filename, rect)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create(${1:filename}, ${2:rect})$0'}, 'create_with_sprite_frame_name(sprite_frame_name)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'string', 'name': 'sprite_frame_name'}], 'sublime': 'create_with_sprite_frame_name(${1:sprite_frame_name})$0'}, 'create_with_texture(texture, rect)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create_with_texture(${1:texture}, ${2:rect})$0'}, 'create_with_sprite_frame(sprite_frame)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'sprite_frame'}], 'sublime': 'create_with_sprite_frame(${1:sprite_frame})$0'}}}, 'CC::EventListenerMouse': {'base_class': 'CC::EventListener', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::EventListenerMouse', 'arguments': [], 'sublime': 'create'}}}, 'CC::TransitionRotoZoom': {'base_class': 'CC::TransitionScene', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionRotoZoom', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::Scene': {'base_class': 'CC::Node', 'ifunctions': {'get_default_camera()': {'ret_type': 'CC::Camera', 'arguments': [], 'sublime': 'get_default_camera'}, 'render(renderer)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Renderer', 'name': 'renderer'}], 'sublime': 'render(${1:renderer})$0'}}, 'sfunctions': {'create_with_size(size)': {'ret_type': 'CC::Scene', 'arguments': [{'type': 'CC::Size', 'name': 'size'}], 'sublime': 'create_with_size(${1:size})$0'}, 'create()': {'ret_type': 'CC::Scene', 'arguments': [], 'sublime': 'create'}}}, 'CC::BezierTo': {'base_class': 'CC::BezierBy', 'ifunctions': {}, 'sfunctions': {}}, 'CC::FlipX': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create(x)': {'ret_type': 'CC::FlipX', 'arguments': [{'type': 'bool', 'name': 'x'}], 'sublime': 'create(${1:x})$0'}}}, 'CC::ActionInstant': {'base_class': 'CC::FiniteTimeAction', 'ifunctions': {}, 'sfunctions': {}}, 'CC::MoveBy': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, delta_position)': {'ret_type': 'CC::MoveBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Vec2', 'name': 'delta_position'}], 'sublime': 'create(${1:duration}, ${2:delta_position})$0'}}}, 'CC::ReuseGrid': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create(times)': {'ret_type': 'CC::ReuseGrid', 'arguments': [{'type': 'int', 'name': 'times'}], 'sublime': 'create(${1:times})$0'}}}, 'CC::Rect': {'ifunctions': {'get_mid_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_mid_x'}, 'get_max_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_max_x'}, 'contains_point(point)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}], 'sublime': 'contains_point(${1:point})$0'}, 'intersects_rect(rect)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'intersects_rect(${1:rect})$0'}, 'merge(rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'merge(${1:rect})$0'}, 'union_with_rect(rect)': {'ret_type': 'CC::Rect', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'union_with_rect(${1:rect})$0'}, 'get_max_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_max_y'}, 'set_rect(x, y, width, height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}, {'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'set_rect(${1:x}, ${2:y}, ${3:width}, ${4:height})$0'}, 'get_mid_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_mid_y'}, 'get_min_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_min_x'}, 'equals(rect)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'equals(${1:rect})$0'}, 'get_min_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_min_y'}}, 'sfunctions': {'rect(other)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'other'}], 'sublime': 'rect(${1:other})$0'}, 'rect(x, y, width, height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}, {'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'rect(${1:x}, ${2:y}, ${3:width}, ${4:height})$0'}, 'rect()': {'ret_type': 'void', 'arguments': [], 'sublime': 'rect'}}}, 'CC::EaseQuarticActionOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuarticActionOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::TransitionPageTurn': {'base_class': 'CC::TransitionScene', 'ifunctions': {'action_with_size(vector)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::Size', 'name': 'vector'}], 'sublime': 'action_with_size(${1:vector})$0'}, 'init_with_duration(t, scene, backwards)': {'ret_type': 'bool', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}, {'type': 'bool', 'name': 'backwards'}], 'sublime': 'init_with_duration(${1:t}, ${2:scene}, ${3:backwards})$0'}}, 'sfunctions': {'create(t, scene, backwards)': {'ret_type': 'CC::TransitionPageTurn', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}, {'type': 'bool', 'name': 'backwards'}], 'sublime': 'create(${1:t}, ${2:scene}, ${3:backwards})$0'}}}, 'CC::TransitionZoomFlipAngular': {'base_class': 'CC::TransitionSceneOriented', 'ifunctions': {}, 'sfunctions': {'create(t, s)': {'ret_type': 'CC::TransitionZoomFlipAngular', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}], 'sublime': 'create(${1:t}, ${2:s})$0'}, 'create(t, s, o)': {'ret_type': 'CC::TransitionZoomFlipAngular', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}, {'type': 'int', 'name': 'o'}], 'sublime': 'create(${1:t}, ${2:s}, ${3:o})$0'}}}, 'CC::ProgressTimer': {'base_class': 'CC::Node', 'ifunctions': {'set_midpoint(point)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}], 'sublime': 'set_midpoint(${1:point})$0'}, 'get_bar_change_rate()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_bar_change_rate'}, 'set_reverse_direction(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_reverse_direction(${1:value})$0'}, 'set_bar_change_rate(bar_change_rate)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'bar_change_rate'}], 'sublime': 'set_bar_change_rate(${1:bar_change_rate})$0'}, 'set_sprite(sprite)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}], 'sublime': 'set_sprite(${1:sprite})$0'}, 'get_type()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_type'}, 'get_percentage()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_percentage'}, 'reverse_direction?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'reverse_direction?'}, 'get_midpoint()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_midpoint'}, 'set_reverse_progress(reverse)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'reverse'}], 'sublime': 'set_reverse_progress(${1:reverse})$0'}, 'set_percentage(percentage)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'percentage'}], 'sublime': 'set_percentage(${1:percentage})$0'}, 'set_type(type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'set_type(${1:type})$0'}, 'get_sprite()': {'ret_type': 'CC::Sprite', 'arguments': [], 'sublime': 'get_sprite'}}, 'sfunctions': {'create(sp)': {'ret_type': 'CC::ProgressTimer', 'arguments': [{'type': 'CC::Sprite', 'name': 'sp'}], 'sublime': 'create(${1:sp})$0'}}}, 'CC::LayerMultiplex': {'base_class': 'CC::Layer', 'ifunctions': {'switch_to_and_release_me(n)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'n'}], 'sublime': 'switch_to_and_release_me(${1:n})$0'}, 'add_layer(layer)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Layer', 'name': 'layer'}], 'sublime': 'add_layer(${1:layer})$0'}, 'switch_to(n)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'n'}], 'sublime': 'switch_to(${1:n})$0'}}, 'sfunctions': {}}, 'CC::Console': {'base_class': 'CC::Ref', 'ifunctions': {'set_bind_address(address)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'address'}], 'sublime': 'set_bind_address(${1:address})$0'}, 'listen_on_tcp(port)': {'ret_type': 'bool', 'arguments': [{'type': 'int', 'name': 'port'}], 'sublime': 'listen_on_tcp(${1:port})$0'}, 'listen_on_file_descriptor(fd)': {'ret_type': 'bool', 'arguments': [{'type': 'int', 'name': 'fd'}], 'sublime': 'listen_on_file_descriptor(${1:fd})$0'}, 'log(buf)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'buf'}], 'sublime': 'log(${1:buf})$0'}, 'stop()': {'ret_type': 'void', 'arguments': [], 'sublime': 'stop'}}, 'sfunctions': {}}, 'CC::ActionManager': {'base_class': 'CC::Ref', 'ifunctions': {'resume_targets(targets_to_resume)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::Node *>', 'name': 'targets_to_resume'}], 'sublime': 'resume_targets(${1:targets_to_resume})$0'}, 'remove_all_actions()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_actions'}, 'get_action_by_tag(tag, target)': {'ret_type': 'CC::Action', 'arguments': [{'type': 'int', 'name': 'tag'}, {'type': 'CC::Node', 'name': 'target'}], 'sublime': 'get_action_by_tag(${1:tag}, ${2:target})$0'}, 'pause_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'pause_target(${1:target})$0'}, 'remove_all_actions_from_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'remove_all_actions_from_target(${1:target})$0'}, 'pause_all_running_actions()': {'ret_type': 'CC::Vector<cocos2d::Node *>', 'arguments': [], 'sublime': 'pause_all_running_actions'}, 'get_number_of_running_actions_in_target(target)': {'ret_type': 'int', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'get_number_of_running_actions_in_target(${1:target})$0'}, 'remove_action(action)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Action', 'name': 'action'}], 'sublime': 'remove_action(${1:action})$0'}, 'remove_all_actions_by_tag(tag, target)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}, {'type': 'CC::Node', 'name': 'target'}], 'sublime': 'remove_all_actions_by_tag(${1:tag}, ${2:target})$0'}, 'remove_action_by_tag(tag, target)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}, {'type': 'CC::Node', 'name': 'target'}], 'sublime': 'remove_action_by_tag(${1:tag}, ${2:target})$0'}, 'update(dt)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'dt'}], 'sublime': 'update(${1:dt})$0'}, 'add_action(action, target, paused)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Action', 'name': 'action'}, {'type': 'CC::Node', 'name': 'target'}, {'type': 'bool', 'name': 'paused'}], 'sublime': 'add_action(${1:action}, ${2:target}, ${3:paused})$0'}, 'resume_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'resume_target(${1:target})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::ShakyTiles3D': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {}, 'sfunctions': {'create(duration, grid_size, range, shake_z)': {'ret_type': 'CC::ShakyTiles3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'range'}, {'type': 'bool', 'name': 'shake_z'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:range}, ${4:shake_z})$0'}}}, 'CC::EventListener': {'base_class': 'CC::Ref', 'ifunctions': {'check_available()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'check_available'}, 'clone()': {'ret_type': 'CC::EventListener', 'arguments': [], 'sublime': 'clone'}, 'set_enabled(enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'enabled'}], 'sublime': 'set_enabled(${1:enabled})$0'}, 'enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'enabled?'}}, 'sfunctions': {}}, 'CC::ParticleSun': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleSun', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleSun', 'arguments': [], 'sublime': 'create'}}}, 'CC::TMXTiledMap': {'base_class': 'CC::Node', 'ifunctions': {'get_properties()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_properties'}, 'get_map_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_map_size'}, 'get_map_orientation()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_map_orientation'}, 'set_object_groups(groups)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::TMXObjectGroup *>', 'name': 'groups'}], 'sublime': 'set_object_groups(${1:groups})$0'}, 'set_tile_size(tile_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'tile_size'}], 'sublime': 'set_tile_size(${1:tile_size})$0'}, 'set_properties(properties)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'properties'}], 'sublime': 'set_properties(${1:properties})$0'}, 'get_layer(layer_name)': {'ret_type': 'CC::TMXLayer', 'arguments': [{'type': 'string', 'name': 'layer_name'}], 'sublime': 'get_layer(${1:layer_name})$0'}, 'set_map_size(map_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'map_size'}], 'sublime': 'set_map_size(${1:map_size})$0'}, 'get_tile_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_tile_size'}, 'get_object_group(group_name)': {'ret_type': 'CC::TMXObjectGroup', 'arguments': [{'type': 'string', 'name': 'group_name'}], 'sublime': 'get_object_group(${1:group_name})$0'}, 'set_map_orientation(map_orientation)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'map_orientation'}], 'sublime': 'set_map_orientation(${1:map_orientation})$0'}, 'get_object_groups()': {'ret_type': 'CC::Vector<cocos2d::TMXObjectGroup *>', 'arguments': [], 'sublime': 'get_object_groups'}, 'get_property(property_name)': {'ret_type': 'CC::Value', 'arguments': [{'type': 'string', 'name': 'property_name'}], 'sublime': 'get_property(${1:property_name})$0'}}, 'sfunctions': {'create(tmx_file)': {'ret_type': 'CC::TMXTiledMap', 'arguments': [{'type': 'string', 'name': 'tmx_file'}], 'sublime': 'create(${1:tmx_file})$0'}, 'create_with_xml(tmx_string, resource_path)': {'ret_type': 'CC::TMXTiledMap', 'arguments': [{'type': 'string', 'name': 'tmx_string'}, {'type': 'string', 'name': 'resource_path'}], 'sublime': 'create_with_xml(${1:tmx_string}, ${2:resource_path})$0'}}}, 'CC::ActionTween': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, key, from, to)': {'ret_type': 'CC::ActionTween', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'string', 'name': 'key'}, {'type': 'float', 'name': 'from'}, {'type': 'float', 'name': 'to'}], 'sublime': 'create(${1:duration}, ${2:key}, ${3:from}, ${4:to})$0'}}}, 'CC::TransitionSplitRows': {'base_class': 'CC::TransitionSplitCols', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionSplitRows', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::TransitionProgressRadialCW': {'base_class': 'CC::TransitionProgress', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgressRadialCW', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::ToggleVisibility': {'base_class': 'CC::ActionInstant', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::ToggleVisibility', 'arguments': [], 'sublime': 'create'}}}, 'CC::ParticleExplosion': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleExplosion', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleExplosion', 'arguments': [], 'sublime': 'create'}}}, 'CC::ParticleSystem': {'base_class': 'CC::Node', 'ifunctions': {'get_end_radius_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_end_radius_var'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'set_start_spin(spin)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'spin'}], 'sublime': 'set_start_spin(${1:spin})$0'}, 'blend_additive?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'blend_additive?'}, 'get_end_size_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_end_size_var'}, 'set_speed_var(speed)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'speed'}], 'sublime': 'set_speed_var(${1:speed})$0'}, 'set_end_radius(end_radius)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'end_radius'}], 'sublime': 'set_end_radius(${1:end_radius})$0'}, 'set_gravity(g)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'g'}], 'sublime': 'set_gravity(${1:g})$0'}, 'get_angle_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_angle_var'}, 'get_start_spin_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_start_spin_var'}, 'get_gravity()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_gravity'}, 'get_end_spin()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_end_spin'}, 'get_rotate_per_second()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_rotate_per_second'}, 'set_emitter_mode(mode)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'mode'}], 'sublime': 'set_emitter_mode(${1:mode})$0'}, 'get_start_radius()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_start_radius'}, 'get_speed()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_speed'}, 'get_end_size()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_end_size'}, 'set_rotate_per_second_var(degrees)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'degrees'}], 'sublime': 'set_rotate_per_second_var(${1:degrees})$0'}, 'set_tangential_accel(t)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 't'}], 'sublime': 'set_tangential_accel(${1:t})$0'}, 'set_end_color(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'set_end_color(${1:color})$0'}, 'active?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'active?'}, 'get_life_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_life_var'}, 'auto_remove_on_finish?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'auto_remove_on_finish?'}, 'set_end_color_var(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'set_end_color_var(${1:color})$0'}, 'get_atlas_index()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_atlas_index'}, 'get_end_color_var()': {'ret_type': 'CC::Color4F', 'arguments': [], 'sublime': 'get_end_color_var'}, 'get_start_radius_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_start_radius_var'}, 'set_blend_additive(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_blend_additive(${1:value})$0'}, 'set_scale_x(new_scale_x)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'new_scale_x'}], 'sublime': 'set_scale_x(${1:new_scale_x})$0'}, 'set_duration(duration)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'duration'}], 'sublime': 'set_duration(${1:duration})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'get_start_color()': {'ret_type': 'CC::Color4F', 'arguments': [], 'sublime': 'get_start_color'}, 'get_end_spin_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_end_spin_var'}, 'set_angle(angle)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'angle'}], 'sublime': 'set_angle(${1:angle})$0'}, 'set_auto_remove_on_finish(var)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'var'}], 'sublime': 'set_auto_remove_on_finish(${1:var})$0'}, 'set_start_radius_var(start_radius_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'start_radius_var'}], 'sublime': 'set_start_radius_var(${1:start_radius_var})$0'}, 'set_scale_y(new_scale_y)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'new_scale_y'}], 'sublime': 'set_scale_y(${1:new_scale_y})$0'}, 'get_tangential_accel_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_tangential_accel_var'}, 'get_total_particles()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_total_particles'}, 'set_start_color(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'set_start_color(${1:color})$0'}, 'get_rotate_per_second_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_rotate_per_second_var'}, 'set_rotation_is_dir(t)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 't'}], 'sublime': 'set_rotation_is_dir(${1:t})$0'}, 'set_start_size(start_size)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'start_size'}], 'sublime': 'set_start_size(${1:start_size})$0'}, 'set_batch_node(batch_node)': {'ret_type': 'void', 'arguments': [{'type': 'CC::ParticleBatchNode', 'name': 'batch_node'}], 'sublime': 'set_batch_node(${1:batch_node})$0'}, 'set_start_size_var(size_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'size_var'}], 'sublime': 'set_start_size_var(${1:size_var})$0'}, 'set_pos_var(pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'set_pos_var(${1:pos})$0'}, 'update_with_no_time()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_with_no_time'}, 'set_speed(speed)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'speed'}], 'sublime': 'set_speed(${1:speed})$0'}, 'set_source_position(pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'set_source_position(${1:pos})$0'}, 'set_start_radius(start_radius)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'start_radius'}], 'sublime': 'set_start_radius(${1:start_radius})$0'}, 'set_end_radius_var(end_radius_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'end_radius_var'}], 'sublime': 'set_end_radius_var(${1:end_radius_var})$0'}, 'get_start_size()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_start_size'}, 'set_opacity_modify_rgb(opacity_modify_rgb)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'opacity_modify_rgb'}], 'sublime': 'set_opacity_modify_rgb(${1:opacity_modify_rgb})$0'}, 'get_rotation_is_dir()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'get_rotation_is_dir'}, 'set_atlas_index(index)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'set_atlas_index(${1:index})$0'}, 'set_total_particles(total_particles)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'total_particles'}], 'sublime': 'set_total_particles(${1:total_particles})$0'}, 'stop_system()': {'ret_type': 'void', 'arguments': [], 'sublime': 'stop_system'}, 'full?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'full?'}, 'get_radial_accel_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_radial_accel_var'}, 'opacity_modify_rgb?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'opacity_modify_rgb?'}, 'set_position_type(type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'set_position_type(${1:type})$0'}, 'get_duration()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_duration'}, 'set_start_spin_var(pin_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'pin_var'}], 'sublime': 'set_start_spin_var(${1:pin_var})$0'}, 'set_emission_rate(rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'rate'}], 'sublime': 'set_emission_rate(${1:rate})$0'}, 'get_speed_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_speed_var'}, 'get_source_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_source_position'}, 'set_start_color_var(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'set_start_color_var(${1:color})$0'}, 'set_rotation(new_rotation)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'new_rotation'}], 'sublime': 'set_rotation(${1:new_rotation})$0'}, 'get_emission_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_emission_rate'}, 'get_radial_accel()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_radial_accel'}, 'get_start_size_var()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_start_size_var'}, 'get_angle()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_angle'}, 'set_rotate_per_second(degrees)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'degrees'}], 'sublime': 'set_rotate_per_second(${1:degrees})$0'}, 'set_end_size(end_size)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'end_size'}], 'sublime': 'set_end_size(${1:end_size})$0'}, 'get_start_spin()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_start_spin'}, 'set_tangential_accel_var(t)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 't'}], 'sublime': 'set_tangential_accel_var(${1:t})$0'}, 'set_end_size_var(size_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'size_var'}], 'sublime': 'set_end_size_var(${1:size_var})$0'}, 'get_pos_var()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_pos_var'}, 'get_end_radius()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_end_radius'}, 'set_life_var(life_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'life_var'}], 'sublime': 'set_life_var(${1:life_var})$0'}, 'set_radial_accel_var(t)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 't'}], 'sublime': 'set_radial_accel_var(${1:t})$0'}, 'set_scale(s)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 's'}], 'sublime': 'set_scale(${1:s})$0'}, 'get_position_type()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_position_type'}, 'add_particle()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'add_particle'}, 'set_radial_accel(t)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 't'}], 'sublime': 'set_radial_accel(${1:t})$0'}, 'get_life()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_life'}, 'get_start_color_var()': {'ret_type': 'CC::Color4F', 'arguments': [], 'sublime': 'get_start_color_var'}, 'set_angle_var(angle_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'angle_var'}], 'sublime': 'set_angle_var(${1:angle_var})$0'}, 'get_batch_node()': {'ret_type': 'CC::ParticleBatchNode', 'arguments': [], 'sublime': 'get_batch_node'}, 'reset_system()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset_system'}, 'set_life(life)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'life'}], 'sublime': 'set_life(${1:life})$0'}, 'get_emitter_mode()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_emitter_mode'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'get_tangential_accel()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_tangential_accel'}, 'set_end_spin_var(end_spin_var)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'end_spin_var'}], 'sublime': 'set_end_spin_var(${1:end_spin_var})$0'}, 'get_particle_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_particle_count'}, 'set_end_spin(end_spin)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'end_spin'}], 'sublime': 'set_end_spin(${1:end_spin})$0'}, 'get_end_color()': {'ret_type': 'CC::Color4F', 'arguments': [], 'sublime': 'get_end_color'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'post_step()': {'ret_type': 'void', 'arguments': [], 'sublime': 'post_step'}}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleSystem', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create(plist_file)': {'ret_type': 'CC::ParticleSystem', 'arguments': [{'type': 'string', 'name': 'plist_file'}], 'sublime': 'create(${1:plist_file})$0'}}}, 'CC::SpriteBatchNode': {'base_class': 'CC::Node', 'ifunctions': {'insert_quad_from_sprite(sprite, index)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}, {'type': 'int', 'name': 'index'}], 'sublime': 'insert_quad_from_sprite(${1:sprite}, ${2:index})$0'}, 'remove_child_at_index(index, do_cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'index'}, {'type': 'bool', 'name': 'do_cleanup'}], 'sublime': 'remove_child_at_index(${1:index}, ${2:do_cleanup})$0'}, 'add_sprite_without_quad(child, z, a_tag)': {'ret_type': 'CC::SpriteBatchNode', 'arguments': [{'type': 'CC::Sprite', 'name': 'child'}, {'type': 'int', 'name': 'z'}, {'type': 'int', 'name': 'a_tag'}], 'sublime': 'add_sprite_without_quad(${1:child}, ${2:z}, ${3:a_tag})$0'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'rebuild_index_in_order(parent, index)': {'ret_type': 'int', 'arguments': [{'type': 'CC::Sprite', 'name': 'parent'}, {'type': 'int', 'name': 'index'}], 'sublime': 'rebuild_index_in_order(${1:parent}, ${2:index})$0'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'remove_sprite_from_atlas(sprite)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}], 'sublime': 'remove_sprite_from_atlas(${1:sprite})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_texture_atlas(texture_atlas)': {'ret_type': 'void', 'arguments': [{'type': 'CC::TextureAtlas', 'name': 'texture_atlas'}], 'sublime': 'set_texture_atlas(${1:texture_atlas})$0'}, 'remove_all_children_with_cleanup(cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_all_children_with_cleanup(${1:cleanup})$0'}, 'atlas_index_for_child(sprite, z)': {'ret_type': 'int', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}, {'type': 'int', 'name': 'z'}], 'sublime': 'atlas_index_for_child(${1:sprite}, ${2:z})$0'}, 'get_texture_atlas()': {'ret_type': 'CC::TextureAtlas', 'arguments': [], 'sublime': 'get_texture_atlas'}, 'increase_atlas_capacity()': {'ret_type': 'void', 'arguments': [], 'sublime': 'increase_atlas_capacity'}, 'reorder_batch(reorder)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'reorder'}], 'sublime': 'reorder_batch(${1:reorder})$0'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'highest_atlas_index_in_child(sprite)': {'ret_type': 'int', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}], 'sublime': 'highest_atlas_index_in_child(${1:sprite})$0'}, 'append_child(sprite)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}], 'sublime': 'append_child(${1:sprite})$0'}, 'lowest_atlas_index_in_child(sprite)': {'ret_type': 'int', 'arguments': [{'type': 'CC::Sprite', 'name': 'sprite'}], 'sublime': 'lowest_atlas_index_in_child(${1:sprite})$0'}}, 'sfunctions': {'create(file_image, capacity)': {'ret_type': 'CC::SpriteBatchNode', 'arguments': [{'type': 'string', 'name': 'file_image'}, {'type': 'int', 'name': 'capacity'}], 'sublime': 'create(${1:file_image}, ${2:capacity})$0'}, 'create_with_texture(tex, capacity)': {'ret_type': 'CC::SpriteBatchNode', 'arguments': [{'type': 'CC::Texture2D', 'name': 'tex'}, {'type': 'int', 'name': 'capacity'}], 'sublime': 'create_with_texture(${1:tex}, ${2:capacity})$0'}, 'create_with_texture(tex)': {'ret_type': 'CC::SpriteBatchNode', 'arguments': [{'type': 'CC::Texture2D', 'name': 'tex'}], 'sublime': 'create_with_texture(${1:tex})$0'}, 'create(file_image)': {'ret_type': 'CC::SpriteBatchNode', 'arguments': [{'type': 'string', 'name': 'file_image'}], 'sublime': 'create(${1:file_image})$0'}}}, 'CC::EaseElasticOut': {'base_class': 'CC::EaseElastic', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseElasticOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}, 'create(action, period)': {'ret_type': 'CC::EaseElasticOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'period'}], 'sublime': 'create(${1:action}, ${2:period})$0'}}}, 'CC::EaseOut': {'base_class': 'CC::EaseRateAction', 'ifunctions': {}, 'sfunctions': {'create(action, rate)': {'ret_type': 'CC::EaseOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'rate'}], 'sublime': 'create(${1:action}, ${2:rate})$0'}}}, 'CC::ActionEase': {'base_class': 'CC::ActionInterval', 'ifunctions': {'get_inner_action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'get_inner_action'}}, 'sfunctions': {}}, 'CC::Repeat': {'base_class': 'CC::ActionInterval', 'ifunctions': {'get_inner_action()': {'ret_type': 'CC::FiniteTimeAction', 'arguments': [], 'sublime': 'get_inner_action'}, 'set_inner_action(action)': {'ret_type': 'void', 'arguments': [{'type': 'CC::FiniteTimeAction', 'name': 'action'}], 'sublime': 'set_inner_action(${1:action})$0'}}, 'sfunctions': {'create(action, times)': {'ret_type': 'CC::Repeat', 'arguments': [{'type': 'CC::FiniteTimeAction', 'name': 'action'}, {'type': 'int', 'name': 'times'}], 'sublime': 'create(${1:action}, ${2:times})$0'}}}, 'CC::Texture2D': {'base_class': 'CC::Ref', 'ifunctions': {'draw_in_rect(rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'draw_in_rect(${1:rect})$0'}, 'set_max_t(max_t)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'max_t'}], 'sublime': 'set_max_t(${1:max_t})$0'}, 'draw_at_point(point)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}], 'sublime': 'draw_at_point(${1:point})$0'}, 'get_glprogram()': {'ret_type': 'CC::GLProgram', 'arguments': [], 'sublime': 'get_glprogram'}, 'has_premultiplied_alpha()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'has_premultiplied_alpha'}, 'get_max_s()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_max_s'}, 'init_with_string(text, font_name, font_size, dimensions, h_alignment, v_alignment)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font_name'}, {'type': 'float', 'name': 'font_size'}, {'type': 'CC::Size', 'name': 'dimensions'}, {'type': 'int', 'name': 'h_alignment'}, {'type': 'int', 'name': 'v_alignment'}], 'sublime': 'init_with_string(${1:text}, ${2:font_name}, ${3:font_size}, ${4:dimensions}, ${5:h_alignment}, ${6:v_alignment})$0'}, 'has_mipmaps()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'has_mipmaps'}, 'init_with_image(image)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Image', 'name': 'image'}], 'sublime': 'init_with_image(${1:image})$0'}, 'get_string_for_format()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_string_for_format'}, 'get_content_size_in_pixels()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_content_size_in_pixels'}, 'get_pixels_high()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_pixels_high'}, 'get_description()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_description'}, 'get_content_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_content_size'}, 'set_alias_tex_parameters()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set_alias_tex_parameters'}, 'get_pixel_format()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_pixel_format'}, 'init_with_string(text, font_name, font_size)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font_name'}, {'type': 'float', 'name': 'font_size'}], 'sublime': 'init_with_string(${1:text}, ${2:font_name}, ${3:font_size})$0'}, 'generate_mipmap()': {'ret_type': 'void', 'arguments': [], 'sublime': 'generate_mipmap'}, 'set_max_s(max_s)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'max_s'}], 'sublime': 'set_max_s(${1:max_s})$0'}, 'set_glprogram(program)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GLProgram', 'name': 'program'}], 'sublime': 'set_glprogram(${1:program})$0'}, 'get_bits_per_pixel_for_format(format)': {'ret_type': 'int', 'arguments': [{'type': 'int', 'name': 'format'}], 'sublime': 'get_bits_per_pixel_for_format(${1:format})$0'}, 'init_with_string(text, font_name, font_size, dimensions)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font_name'}, {'type': 'float', 'name': 'font_size'}, {'type': 'CC::Size', 'name': 'dimensions'}], 'sublime': 'init_with_string(${1:text}, ${2:font_name}, ${3:font_size}, ${4:dimensions})$0'}, 'init_with_string(text, font_name, font_size, dimensions, h_alignment)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'string', 'name': 'font_name'}, {'type': 'float', 'name': 'font_size'}, {'type': 'CC::Size', 'name': 'dimensions'}, {'type': 'int', 'name': 'h_alignment'}], 'sublime': 'init_with_string(${1:text}, ${2:font_name}, ${3:font_size}, ${4:dimensions}, ${5:h_alignment})$0'}, 'init_with_image(image, format)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Image', 'name': 'image'}, {'type': 'int', 'name': 'format'}], 'sublime': 'init_with_image(${1:image}, ${2:format})$0'}, 'get_pixels_wide()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_pixels_wide'}, 'get_max_t()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_max_t'}, 'get_name()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_name'}, 'get_bits_per_pixel_for_format()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_bits_per_pixel_for_format'}, 'init_with_string(text, text_definition)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'text'}, {'type': 'CC::FontDefinition', 'name': 'text_definition'}], 'sublime': 'init_with_string(${1:text}, ${2:text_definition})$0'}, 'release_gltexture()': {'ret_type': 'void', 'arguments': [], 'sublime': 'release_gltexture'}, 'set_anti_alias_tex_parameters()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set_anti_alias_tex_parameters'}}, 'sfunctions': {'set_default_alpha_pixel_format(format)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'format'}], 'sublime': 'set_default_alpha_pixel_format(${1:format})$0'}, 'get_default_alpha_pixel_format()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_default_alpha_pixel_format'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::EaseCircleActionIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseCircleActionIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::PageTurn3D': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_grid()': {'ret_type': 'CC::GridBase', 'arguments': [], 'sublime': 'get_grid'}}, 'sfunctions': {'create(duration, grid_size)': {'ret_type': 'CC::PageTurn3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:duration}, ${2:grid_size})$0'}}}, 'CC::EaseExponentialInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseExponentialInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::SplitRows': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {}, 'sfunctions': {'create(duration, rows)': {'ret_type': 'CC::SplitRows', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'int', 'name': 'rows'}], 'sublime': 'create(${1:duration}, ${2:rows})$0'}}}, 'CC::TransitionFadeUp': {'base_class': 'CC::TransitionFadeTR', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionFadeUp', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::SkewTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(t, sx, sy)': {'ret_type': 'CC::SkewTo', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'float', 'name': 'sx'}, {'type': 'float', 'name': 'sy'}], 'sublime': 'create(${1:t}, ${2:sx}, ${3:sy})$0'}}}, 'CC::EaseSineOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseSineOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::Sprite3DData': {'ifunctions': {}, 'sfunctions': {}}, 'CC::AnimationFrame': {'base_class': 'CC::Ref', 'ifunctions': {'set_sprite_frame(frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}], 'sublime': 'set_sprite_frame(${1:frame})$0'}, 'clone()': {'ret_type': 'CC::AnimationFrame', 'arguments': [], 'sublime': 'clone'}, 'get_sprite_frame()': {'ret_type': 'CC::SpriteFrame', 'arguments': [], 'sublime': 'get_sprite_frame'}, 'set_delay_units(delay_units)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'delay_units'}], 'sublime': 'set_delay_units(${1:delay_units})$0'}, 'get_delay_units()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_delay_units'}, 'get_user_info()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_user_info'}, 'set_user_info(user_info)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'user_info'}], 'sublime': 'set_user_info(${1:user_info})$0'}}, 'sfunctions': {'create(sprite_frame, delay_units, user_info)': {'ret_type': 'CC::AnimationFrame', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'sprite_frame'}, {'type': 'float', 'name': 'delay_units'}, {'type': 'string', 'name': 'user_info'}], 'sublime': 'create(${1:sprite_frame}, ${2:delay_units}, ${3:user_info})$0'}}}, 'CC::ProtectedNode': {'base_class': 'CC::Node', 'ifunctions': {'add_protected_child(child, local_zorder, tag)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}, {'type': 'int', 'name': 'tag'}], 'sublime': 'add_protected_child(${1:child}, ${2:local_zorder}, ${3:tag})$0'}, 'remove_protected_child(child)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}], 'sublime': 'remove_protected_child(${1:child})$0'}, 'reorder_protected_child(child, local_zorder)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}], 'sublime': 'reorder_protected_child(${1:child}, ${2:local_zorder})$0'}, 'sort_all_protected_children()': {'ret_type': 'void', 'arguments': [], 'sublime': 'sort_all_protected_children'}, 'disable_cascade_opacity()': {'ret_type': 'void', 'arguments': [], 'sublime': 'disable_cascade_opacity'}, 'remove_protected_child(child, cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_protected_child(${1:child}, ${2:cleanup})$0'}, 'get_protected_child_by_tag(tag)': {'ret_type': 'CC::Node', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'get_protected_child_by_tag(${1:tag})$0'}, 'add_protected_child(child)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}], 'sublime': 'add_protected_child(${1:child})$0'}, 'disable_cascade_color()': {'ret_type': 'void', 'arguments': [], 'sublime': 'disable_cascade_color'}, 'remove_protected_child_by_tag(tag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'remove_protected_child_by_tag(${1:tag})$0'}, 'remove_all_protected_children()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_protected_children'}, 'add_protected_child(child, local_zorder)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'local_zorder'}], 'sublime': 'add_protected_child(${1:child}, ${2:local_zorder})$0'}, 'remove_all_protected_children_with_cleanup(cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_all_protected_children_with_cleanup(${1:cleanup})$0'}, 'remove_protected_child_by_tag(tag, cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}, {'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_protected_child_by_tag(${1:tag}, ${2:cleanup})$0'}}, 'sfunctions': {'create()': {'ret_type': 'CC::ProtectedNode', 'arguments': [], 'sublime': 'create'}}}, 'CC::TransitionJumpZoom': {'base_class': 'CC::TransitionScene', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionJumpZoom', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::EaseBackOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBackOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::GLProgramCache': {'base_class': 'CC::Ref', 'ifunctions': {'reload_default_glprograms()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reload_default_glprograms'}, 'add_glprogram(program, key)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GLProgram', 'name': 'program'}, {'type': 'string', 'name': 'key'}], 'sublime': 'add_glprogram(${1:program}, ${2:key})$0'}, 'load_default_glprograms()': {'ret_type': 'void', 'arguments': [], 'sublime': 'load_default_glprograms'}, 'get_glprogram(key)': {'ret_type': 'CC::GLProgram', 'arguments': [{'type': 'string', 'name': 'key'}], 'sublime': 'get_glprogram(${1:key})$0'}}, 'sfunctions': {'get_instance()': {'ret_type': 'CC::GLProgramCache', 'arguments': [], 'sublime': 'get_instance'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}, 'destroy_instance()': {'ret_type': 'void', 'arguments': [], 'sublime': 'destroy_instance'}}}, 'CC::MotionStreak': {'base_class': 'CC::Node', 'ifunctions': {'set_starting_position_initialized(b_starting_position_initialized)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'b_starting_position_initialized'}], 'sublime': 'set_starting_position_initialized(${1:b_starting_position_initialized})$0'}, 'starting_position_initialized?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'starting_position_initialized?'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'tint_with_color(colors)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'colors'}], 'sublime': 'tint_with_color(${1:colors})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'fast_mode?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'fast_mode?'}, 'set_fast_mode(b_fast_mode)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'b_fast_mode'}], 'sublime': 'set_fast_mode(${1:b_fast_mode})$0'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'reset()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset'}}, 'sfunctions': {'create(fade, min_seg, stroke, color, texture)': {'ret_type': 'CC::MotionStreak', 'arguments': [{'type': 'float', 'name': 'fade'}, {'type': 'float', 'name': 'min_seg'}, {'type': 'float', 'name': 'stroke'}, {'type': 'CC::Color3B', 'name': 'color'}, {'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'create(${1:fade}, ${2:min_seg}, ${3:stroke}, ${4:color}, ${5:texture})$0'}, 'create(fade, min_seg, stroke, color, path)': {'ret_type': 'CC::MotionStreak', 'arguments': [{'type': 'float', 'name': 'fade'}, {'type': 'float', 'name': 'min_seg'}, {'type': 'float', 'name': 'stroke'}, {'type': 'CC::Color3B', 'name': 'color'}, {'type': 'string', 'name': 'path'}], 'sublime': 'create(${1:fade}, ${2:min_seg}, ${3:stroke}, ${4:color}, ${5:path})$0'}}}, 'CC::FileUtils': {'ifunctions': {'create_directory(dir_path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'dir_path'}], 'sublime': 'create_directory(${1:dir_path})$0'}, 'get_search_paths()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_search_paths'}, 'set_filename_lookup_dictionary(filename_lookup_dict)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'filename_lookup_dict'}], 'sublime': 'set_filename_lookup_dictionary(${1:filename_lookup_dict})$0'}, 'get_writable_path()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_writable_path'}, 'get_value_vector_from_file(filename)': {'ret_type': 'array', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'get_value_vector_from_file(${1:filename})$0'}, 'purge_cached_entries()': {'ret_type': 'void', 'arguments': [], 'sublime': 'purge_cached_entries'}, 'get_value_map_from_data(filedata, filesize)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'filedata'}, {'type': 'int', 'name': 'filesize'}], 'sublime': 'get_value_map_from_data(${1:filedata}, ${2:filesize})$0'}, 'add_search_resolutions_order(order)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'order'}], 'sublime': 'add_search_resolutions_order(${1:order})$0'}, 'remove_file(filepath)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filepath'}], 'sublime': 'remove_file(${1:filepath})$0'}, 'add_search_resolutions_order(order, front)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'order'}, {'type': 'bool', 'name': 'front'}], 'sublime': 'add_search_resolutions_order(${1:order}, ${2:front})$0'}, 'add_search_path(path)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'path'}], 'sublime': 'add_search_path(${1:path})$0'}, 'get_search_resolutions_order()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_search_resolutions_order'}, 'set_default_resource_root_path(path)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'path'}], 'sublime': 'set_default_resource_root_path(${1:path})$0'}, 'directory_exist?(dir_path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'dir_path'}], 'sublime': 'directory_exist?(${1:dir_path})$0'}, 'full_path_for_filename(filename)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'full_path_for_filename(${1:filename})$0'}, 'get_string_from_file(filename)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'get_string_from_file(${1:filename})$0'}, 'set_writable_path(writable_path)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'writable_path'}], 'sublime': 'set_writable_path(${1:writable_path})$0'}, 'file_exist?(filename)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'file_exist?(${1:filename})$0'}, 'set_search_paths(search_paths)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'search_paths'}], 'sublime': 'set_search_paths(${1:search_paths})$0'}, 'get_file_size(filepath)': {'ret_type': 'int', 'arguments': [{'type': 'string', 'name': 'filepath'}], 'sublime': 'get_file_size(${1:filepath})$0'}, 'set_search_resolutions_order(search_resolutions_order)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'search_resolutions_order'}], 'sublime': 'set_search_resolutions_order(${1:search_resolutions_order})$0'}, 'load_filename_lookup_dictionary_from_file(filename)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'load_filename_lookup_dictionary_from_file(${1:filename})$0'}, 'add_search_path(path, front)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'path'}, {'type': 'bool', 'name': 'front'}], 'sublime': 'add_search_path(${1:path}, ${2:front})$0'}, 'full_path_from_relative_file(filename, relative_file)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'string', 'name': 'relative_file'}], 'sublime': 'full_path_from_relative_file(${1:filename}, ${2:relative_file})$0'}, 'get_value_map_from_file(filename)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'get_value_map_from_file(${1:filename})$0'}, 'write_to_file(dict, full_path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'dict'}, {'type': 'string', 'name': 'full_path'}], 'sublime': 'write_to_file(${1:dict}, ${2:full_path})$0'}, 'popup_notify?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'popup_notify?'}, 'absolute_path?(path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'path'}], 'sublime': 'absolute_path?(${1:path})$0'}, 'rename_file(path, oldname, name)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'path'}, {'type': 'string', 'name': 'oldname'}, {'type': 'string', 'name': 'name'}], 'sublime': 'rename_file(${1:path}, ${2:oldname}, ${3:name})$0'}, 'set_popup_notify(notify)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'notify'}], 'sublime': 'set_popup_notify(${1:notify})$0'}, 'remove_directory(dir_path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'dir_path'}], 'sublime': 'remove_directory(${1:dir_path})$0'}}, 'sfunctions': {'get_instance()': {'ret_type': 'CC::FileUtils', 'arguments': [], 'sublime': 'get_instance'}, 'destroy_instance()': {'ret_type': 'void', 'arguments': [], 'sublime': 'destroy_instance'}}}, 'CC::EventListenerTouchAllAtOnce': {'base_class': 'CC::EventListener', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::EventListenerTouchAllAtOnce', 'arguments': [], 'sublime': 'create'}}}, 'CC::EaseElasticIn': {'base_class': 'CC::EaseElastic', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseElasticIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}, 'create(action, period)': {'ret_type': 'CC::EaseElasticIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'period'}], 'sublime': 'create(${1:action}, ${2:period})$0'}}}, 'CC::Action': {'base_class': 'CC::Ref', 'ifunctions': {'start_with_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'start_with_target(${1:target})$0'}, 'clone()': {'ret_type': 'CC::Action', 'arguments': [], 'sublime': 'clone'}, 'set_original_target(original_target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'original_target'}], 'sublime': 'set_original_target(${1:original_target})$0'}, 'get_tag()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_tag'}, 'done?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'done?'}, 'get_target()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_target'}, 'reverse()': {'ret_type': 'CC::Action', 'arguments': [], 'sublime': 'reverse'}, 'get_original_target()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_original_target'}, 'step(dt)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'dt'}], 'sublime': 'step(${1:dt})$0'}, 'update(time)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'time'}], 'sublime': 'update(${1:time})$0'}, 'set_tag(tag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'tag'}], 'sublime': 'set_tag(${1:tag})$0'}, 'set_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'set_target(${1:target})$0'}, 'stop()': {'ret_type': 'void', 'arguments': [], 'sublime': 'stop'}}, 'sfunctions': {}}, 'CC::CardinalSplineTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {'update_position(new_pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'new_pos'}], 'sublime': 'update_position(${1:new_pos})$0'}, 'get_points()': {'ret_type': 'CC::PointArray', 'arguments': [], 'sublime': 'get_points'}, 'init_with_duration(duration, points, tension)': {'ret_type': 'bool', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::PointArray', 'name': 'points'}, {'type': 'float', 'name': 'tension'}], 'sublime': 'init_with_duration(${1:duration}, ${2:points}, ${3:tension})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::EaseExponentialOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseExponentialOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::MenuItemSprite': {'base_class': 'CC::MenuItem', 'ifunctions': {'selected()': {'ret_type': 'void', 'arguments': [], 'sublime': 'selected'}, 'unselected()': {'ret_type': 'void', 'arguments': [], 'sublime': 'unselected'}, 'set_disabled_image(image)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'image'}], 'sublime': 'set_disabled_image(${1:image})$0'}, 'get_disabled_image()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_disabled_image'}, 'set_enabled(b_enabled)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'b_enabled'}], 'sublime': 'set_enabled(${1:b_enabled})$0'}, 'get_normal_image()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_normal_image'}, 'set_selected_image(image)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'image'}], 'sublime': 'set_selected_image(${1:image})$0'}, 'get_selected_image()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_selected_image'}, 'set_normal_image(image)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'image'}], 'sublime': 'set_normal_image(${1:image})$0'}}, 'sfunctions': {'create(normal_sprite, selected_sprite, disabled_sprite, callback)': {'ret_type': 'CC::MenuItemSprite', 'arguments': [{'type': 'CC::Node', 'name': 'normal_sprite'}, {'type': 'CC::Node', 'name': 'selected_sprite'}, {'type': 'CC::Node', 'name': 'disabled_sprite'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:normal_sprite}, ${2:selected_sprite}, ${3:disabled_sprite}, ${4:callback})$0'}, 'create(normal_sprite, selected_sprite, disabled_sprite)': {'ret_type': 'CC::MenuItemSprite', 'arguments': [{'type': 'CC::Node', 'name': 'normal_sprite'}, {'type': 'CC::Node', 'name': 'selected_sprite'}, {'type': 'CC::Node', 'name': 'disabled_sprite'}], 'sublime': 'create(${1:normal_sprite}, ${2:selected_sprite}, ${3:disabled_sprite})$0'}, 'create(normal_sprite, selected_sprite, callback)': {'ret_type': 'CC::MenuItemSprite', 'arguments': [{'type': 'CC::Node', 'name': 'normal_sprite'}, {'type': 'CC::Node', 'name': 'selected_sprite'}, {'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:normal_sprite}, ${2:selected_sprite}, ${3:callback})$0'}, 'create(normal_sprite, selected_sprite)': {'ret_type': 'CC::MenuItemSprite', 'arguments': [{'type': 'CC::Node', 'name': 'normal_sprite'}, {'type': 'CC::Node', 'name': 'selected_sprite'}], 'sublime': 'create(${1:normal_sprite}, ${2:selected_sprite})$0'}}}, 'CC::ActionInterval': {'base_class': 'CC::FiniteTimeAction', 'ifunctions': {'set_amplitude_rate(amp)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amp'}], 'sublime': 'set_amplitude_rate(${1:amp})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}, 'get_elapsed()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_elapsed'}}, 'sfunctions': {}}, 'CC::TargetedAction': {'base_class': 'CC::ActionInterval', 'ifunctions': {'set_forced_target(forced_target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'forced_target'}], 'sublime': 'set_forced_target(${1:forced_target})$0'}, 'get_forced_target()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_forced_target'}}, 'sfunctions': {'create(target, action)': {'ret_type': 'CC::TargetedAction', 'arguments': [{'type': 'CC::Node', 'name': 'target'}, {'type': 'CC::FiniteTimeAction', 'name': 'action'}], 'sublime': 'create(${1:target}, ${2:action})$0'}}}, 'CC::EaseBezierAction': {'base_class': 'CC::ActionEase', 'ifunctions': {'set_bezier_paramer(p0, p1, p2, p3)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'p0'}, {'type': 'float', 'name': 'p1'}, {'type': 'float', 'name': 'p2'}, {'type': 'float', 'name': 'p3'}], 'sublime': 'set_bezier_paramer(${1:p0}, ${2:p1}, ${3:p2}, ${4:p3})$0'}}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBezierAction', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::Camera': {'base_class': 'CC::Node', 'ifunctions': {'visible_in_frustum?(aabb)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::AABB', 'name': 'aabb'}], 'sublime': 'visible_in_frustum?(${1:aabb})$0'}, 'look_at(target, up)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'target'}, {'type': 'CC::Vec3', 'name': 'up'}], 'sublime': 'look_at(${1:target}, ${2:up})$0'}, 'get_depth_in_view(transform)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Mat4', 'name': 'transform'}], 'sublime': 'get_depth_in_view(${1:transform})$0'}, 'get_view_matrix()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_view_matrix'}, 'get_camera_flag()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_camera_flag'}, 'get_type()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_type'}, 'get_view_projection_matrix()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_view_projection_matrix'}, 'get_projection_matrix()': {'ret_type': 'CC::Mat4', 'arguments': [], 'sublime': 'get_projection_matrix'}, 'look_at(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'target'}], 'sublime': 'look_at(${1:target})$0'}, 'set_camera_flag(flag)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'flag'}], 'sublime': 'set_camera_flag(${1:flag})$0'}}, 'sfunctions': {'create_orthographic(zoom_x, zoom_y, near_plane, far_plane)': {'ret_type': 'CC::Camera', 'arguments': [{'type': 'float', 'name': 'zoom_x'}, {'type': 'float', 'name': 'zoom_y'}, {'type': 'float', 'name': 'near_plane'}, {'type': 'float', 'name': 'far_plane'}], 'sublime': 'create_orthographic(${1:zoom_x}, ${2:zoom_y}, ${3:near_plane}, ${4:far_plane})$0'}, 'create_perspective(field_of_view, aspect_ratio, near_plane, far_plane)': {'ret_type': 'CC::Camera', 'arguments': [{'type': 'float', 'name': 'field_of_view'}, {'type': 'float', 'name': 'aspect_ratio'}, {'type': 'float', 'name': 'near_plane'}, {'type': 'float', 'name': 'far_plane'}], 'sublime': 'create_perspective(${1:field_of_view}, ${2:aspect_ratio}, ${3:near_plane}, ${4:far_plane})$0'}, 'create()': {'ret_type': 'CC::Camera', 'arguments': [], 'sublime': 'create'}, 'get_visiting_camera()': {'ret_type': 'CC::Camera', 'arguments': [], 'sublime': 'get_visiting_camera'}, 'get_default_camera()': {'ret_type': 'CC::Camera', 'arguments': [], 'sublime': 'get_default_camera'}}}, 'CC::WavesTiles3D': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_amplitude_rate(amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:amplitude_rate})$0'}, 'set_amplitude(amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude'}], 'sublime': 'set_amplitude(${1:amplitude})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}}, 'sfunctions': {'create(duration, grid_size, waves, amplitude)': {'ret_type': 'CC::WavesTiles3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'waves'}, {'type': 'float', 'name': 'amplitude'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:waves}, ${4:amplitude})$0'}}}, 'CC::FadeOutTRTiles': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {'turn_on_tile(pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'turn_on_tile(${1:pos})$0'}, 'transform_tile(pos, distance)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}, {'type': 'float', 'name': 'distance'}], 'sublime': 'transform_tile(${1:pos}, ${2:distance})$0'}, 'test_func(pos, time)': {'ret_type': 'float', 'arguments': [{'type': 'CC::Size', 'name': 'pos'}, {'type': 'float', 'name': 'time'}], 'sublime': 'test_func(${1:pos}, ${2:time})$0'}, 'turn_off_tile(pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'turn_off_tile(${1:pos})$0'}}, 'sfunctions': {'create(duration, grid_size)': {'ret_type': 'CC::FadeOutTRTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:duration}, ${2:grid_size})$0'}}}, 'CC::TintBy': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, delta_red, delta_green, delta_blue)': {'ret_type': 'CC::TintBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'int', 'name': 'delta_red'}, {'type': 'int', 'name': 'delta_green'}, {'type': 'int', 'name': 'delta_blue'}], 'sublime': 'create(${1:duration}, ${2:delta_red}, ${3:delta_green}, ${4:delta_blue})$0'}}}, 'CC::TransitionSlideInB': {'base_class': 'CC::TransitionSlideInL', 'ifunctions': {'action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'action'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionSlideInB', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::Color3B': {'ifunctions': {'equals(other)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Color3B', 'name': 'other'}], 'sublime': 'equals(${1:other})$0'}}, 'sfunctions': {'color3_b()': {'ret_type': 'void', 'arguments': [], 'sublime': 'color3_b'}, 'color3_b(r, g, b)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'r'}, {'type': 'int', 'name': 'g'}, {'type': 'int', 'name': 'b'}], 'sublime': 'color3_b(${1:r}, ${2:g}, ${3:b})$0'}, 'color3_b(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'color3_b(${1:color})$0'}}}, 'CC::TransitionSceneOriented': {'base_class': 'CC::TransitionScene', 'ifunctions': {}, 'sfunctions': {'create(t, scene, orientation)': {'ret_type': 'CC::TransitionSceneOriented', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}, {'type': 'int', 'name': 'orientation'}], 'sublime': 'create(${1:t}, ${2:scene}, ${3:orientation})$0'}}}, 'CC::EaseElasticInOut': {'base_class': 'CC::EaseElastic', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseElasticInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}, 'create(action, period)': {'ret_type': 'CC::EaseElasticInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'period'}], 'sublime': 'create(${1:action}, ${2:period})$0'}}}, 'CC::ParticleSnow': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleSnow', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleSnow', 'arguments': [], 'sublime': 'create'}}}, 'CC::EaseSineIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseSineIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::Shaky3D': {'base_class': 'CC::Grid3DAction', 'ifunctions': {}, 'sfunctions': {'create(duration, grid_size, range, shake_z)': {'ret_type': 'CC::Shaky3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'range'}, {'type': 'bool', 'name': 'shake_z'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:range}, ${4:shake_z})$0'}}}, 'CC::TransitionMoveInL': {'base_class': 'CC::TransitionScene', 'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}, 'action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'action'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionMoveInL', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::TransitionMoveInB': {'base_class': 'CC::TransitionMoveInL', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionMoveInB', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::TransitionSlideInR': {'base_class': 'CC::TransitionSlideInL', 'ifunctions': {'action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'action'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionSlideInR', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::TransitionSplitCols': {'base_class': 'CC::TransitionScene', 'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}, 'action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'action'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionSplitCols', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::RotateBy': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, delta_angle3_d)': {'ret_type': 'CC::RotateBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Vec3', 'name': 'delta_angle3_d'}], 'sublime': 'create(${1:duration}, ${2:delta_angle3_d})$0'}, 'create(duration, delta_angle_z__x, delta_angle_z__y)': {'ret_type': 'CC::RotateBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'delta_angle_z__x'}, {'type': 'float', 'name': 'delta_angle_z__y'}], 'sublime': 'create(${1:duration}, ${2:delta_angle_z__x}, ${3:delta_angle_z__y})$0'}, 'create(duration, delta_angle)': {'ret_type': 'CC::RotateBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'delta_angle'}], 'sublime': 'create(${1:duration}, ${2:delta_angle})$0'}}}, 'CC::EaseQuadraticActionOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuadraticActionOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ParticleMeteor': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleMeteor', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleMeteor', 'arguments': [], 'sublime': 'create'}}}, 'CC::TransitionSlideInT': {'base_class': 'CC::TransitionSlideInL', 'ifunctions': {'action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'action'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionSlideInT', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::TransitionProgressVertical': {'base_class': 'CC::TransitionProgress', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgressVertical', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::TransitionTurnOffTiles': {'base_class': 'CC::TransitionScene', 'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionTurnOffTiles', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::GridBase': {'base_class': 'CC::Ref', 'ifunctions': {'init_with_size(grid_size)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'init_with_size(${1:grid_size})$0'}, 'get_step()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_step'}, 'set_texture_flipped(flipped)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'flipped'}], 'sublime': 'set_texture_flipped(${1:flipped})$0'}, 'before_blit()': {'ret_type': 'void', 'arguments': [], 'sublime': 'before_blit'}, 'texture_flipped?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'texture_flipped?'}, 'calculate_vertex_points()': {'ret_type': 'void', 'arguments': [], 'sublime': 'calculate_vertex_points'}, 'set_active(active)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'active'}], 'sublime': 'set_active(${1:active})$0'}, 'set_reuse_grid(reuse_grid)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'reuse_grid'}], 'sublime': 'set_reuse_grid(${1:reuse_grid})$0'}, 'reuse()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reuse'}, 'set_step(step)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'step'}], 'sublime': 'set_step(${1:step})$0'}, 'after_blit()': {'ret_type': 'void', 'arguments': [], 'sublime': 'after_blit'}, 'init_with_size(grid_size, texture, flipped)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'bool', 'name': 'flipped'}], 'sublime': 'init_with_size(${1:grid_size}, ${2:texture}, ${3:flipped})$0'}, 'get_grid_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_grid_size'}, 'blit()': {'ret_type': 'void', 'arguments': [], 'sublime': 'blit'}, 'before_draw()': {'ret_type': 'void', 'arguments': [], 'sublime': 'before_draw'}, 'after_draw(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'after_draw(${1:target})$0'}, 'get_reuse_grid()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_reuse_grid'}, 'set2_dprojection()': {'ret_type': 'void', 'arguments': [], 'sublime': 'set2_dprojection'}, 'set_grid_size(grid_size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'set_grid_size(${1:grid_size})$0'}, 'active?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'active?'}}, 'sfunctions': {'create(grid_size)': {'ret_type': 'CC::GridBase', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:grid_size})$0'}, 'create(grid_size, texture, flipped)': {'ret_type': 'CC::GridBase', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'bool', 'name': 'flipped'}], 'sublime': 'create(${1:grid_size}, ${2:texture}, ${3:flipped})$0'}}}, 'CC::EventListenerTouchOneByOne': {'base_class': 'CC::EventListener', 'ifunctions': {'set_swallow_touches(need_swallow)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'need_swallow'}], 'sublime': 'set_swallow_touches(${1:need_swallow})$0'}, 'swallow_touches?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'swallow_touches?'}}, 'sfunctions': {'create()': {'ret_type': 'CC::EventListenerTouchOneByOne', 'arguments': [], 'sublime': 'create'}}}, 'CC::TMXObjectGroup': {'base_class': 'CC::Ref', 'ifunctions': {'get_objects()': {'ret_type': 'array', 'arguments': [], 'sublime': 'get_objects'}, 'get_position_offset()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_position_offset'}, 'set_position_offset(offset)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'offset'}], 'sublime': 'set_position_offset(${1:offset})$0'}, 'get_properties()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_properties'}, 'set_properties(properties)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'properties'}], 'sublime': 'set_properties(${1:properties})$0'}, 'get_object(object_name)': {'ret_type': 'string', 'arguments': [{'type': 'string', 'name': 'object_name'}], 'sublime': 'get_object(${1:object_name})$0'}, 'set_group_name(group_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'group_name'}], 'sublime': 'set_group_name(${1:group_name})$0'}, 'get_group_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_group_name'}, 'set_objects(objects)': {'ret_type': 'void', 'arguments': [{'type': 'array', 'name': 'objects'}], 'sublime': 'set_objects(${1:objects})$0'}, 'get_property(property_name)': {'ret_type': 'CC::Value', 'arguments': [{'type': 'string', 'name': 'property_name'}], 'sublime': 'get_property(${1:property_name})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::SpriteFrameCache': {'base_class': 'CC::Ref', 'ifunctions': {'remove_unused_sprite_frames()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_unused_sprite_frames'}, 'remove_sprite_frames_from_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'remove_sprite_frames_from_texture(${1:texture})$0'}, 'add_sprite_frames_with_file(plist, texture_file_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist'}, {'type': 'string', 'name': 'texture_file_name'}], 'sublime': 'add_sprite_frames_with_file(${1:plist}, ${2:texture_file_name})$0'}, 'add_sprite_frame(frame, frame_name)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}, {'type': 'string', 'name': 'frame_name'}], 'sublime': 'add_sprite_frame(${1:frame}, ${2:frame_name})$0'}, 'remove_sprite_frames()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_sprite_frames'}, 'init()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'init'}, 'remove_sprite_frame_by_name(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'remove_sprite_frame_by_name(${1:name})$0'}, 'add_sprite_frames_with_file_content(plist_content, texture)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist_content'}, {'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'add_sprite_frames_with_file_content(${1:plist_content}, ${2:texture})$0'}, 'remove_sprite_frames_from_file(plist)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist'}], 'sublime': 'remove_sprite_frames_from_file(${1:plist})$0'}, 'get_sprite_frame_by_name(name)': {'ret_type': 'CC::SpriteFrame', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'get_sprite_frame_by_name(${1:name})$0'}, 'add_sprite_frames_with_file(plist, texture)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist'}, {'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'add_sprite_frames_with_file(${1:plist}, ${2:texture})$0'}, 'remove_sprite_frames_from_file_content(plist_content)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist_content'}], 'sublime': 'remove_sprite_frames_from_file_content(${1:plist_content})$0'}, 'add_sprite_frames_with_file(plist)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist'}], 'sublime': 'add_sprite_frames_with_file(${1:plist})$0'}}, 'sfunctions': {'get_instance()': {'ret_type': 'CC::SpriteFrameCache', 'arguments': [], 'sublime': 'get_instance'}, 'destroy_instance()': {'ret_type': 'void', 'arguments': [], 'sublime': 'destroy_instance'}}}, 'CC::EaseInOut': {'base_class': 'CC::EaseRateAction', 'ifunctions': {}, 'sfunctions': {'create(action, rate)': {'ret_type': 'CC::EaseInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'rate'}], 'sublime': 'create(${1:action}, ${2:rate})$0'}}}, 'CC::NodeData': {'ifunctions': {'reset_data()': {'ret_type': 'void', 'arguments': [], 'sublime': 'reset_data'}}, 'sfunctions': {}}, 'CC::EventCustom': {'base_class': 'CC::Event', 'ifunctions': {'get_event_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_event_name'}}, 'sfunctions': {'new(event_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'event_name'}], 'sublime': 'new(${1:event_name})$0'}}}, 'CC::EaseBackIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBackIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::SplitCols': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {}, 'sfunctions': {'create(duration, cols)': {'ret_type': 'CC::SplitCols', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'int', 'name': 'cols'}], 'sublime': 'create(${1:duration}, ${2:cols})$0'}}}, 'CC::TransitionProgress': {'base_class': 'CC::TransitionScene', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgress', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::Layer': {'base_class': 'CC::Node', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::Layer', 'arguments': [], 'sublime': 'create'}}}, 'CC::Touch': {'base_class': 'CC::Ref', 'ifunctions': {'get_previous_location()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_previous_location'}, 'get_previous_location_in_view()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_previous_location_in_view'}, 'set_touch_info(id, x, y)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'id'}, {'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}], 'sublime': 'set_touch_info(${1:id}, ${2:x}, ${3:y})$0'}, 'get_location()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_location'}, 'get_start_location_in_view()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_start_location_in_view'}, 'get_delta()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_delta'}, 'get_start_location()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_start_location'}, 'get_location_in_view()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_location_in_view'}, 'get_id()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_id'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::TransitionSlideInL': {'base_class': 'CC::TransitionScene', 'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}, 'action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'action'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionSlideInL', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::MoveTo': {'base_class': 'CC::MoveBy', 'ifunctions': {}, 'sfunctions': {'create(duration, position)': {'ret_type': 'CC::MoveTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'create(${1:duration}, ${2:position})$0'}}}, 'CC::Device': {'ifunctions': {}, 'sfunctions': {'get_dpi()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_dpi'}, 'set_accelerometer_interval(interval)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'interval'}], 'sublime': 'set_accelerometer_interval(${1:interval})$0'}, 'set_accelerometer_enabled(enabled?)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'enabled?'}], 'sublime': 'set_accelerometer_enabled(${1:enabled?})$0'}, 'set_keep_screen_on(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_keep_screen_on(${1:value})$0'}}}, 'CC::TransitionScene': {'base_class': 'CC::Scene', 'ifunctions': {'hide_out_show_in()': {'ret_type': 'void', 'arguments': [], 'sublime': 'hide_out_show_in'}, 'finish()': {'ret_type': 'void', 'arguments': [], 'sublime': 'finish'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionScene', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::EventKeyboard': {'base_class': 'CC::Event', 'ifunctions': {}, 'sfunctions': {'new(key_code, pressed?)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'key_code'}, {'type': 'bool', 'name': 'pressed?'}], 'sublime': 'new(${1:key_code}, ${2:pressed?})$0'}}}, 'CC::Spawn': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {}}, 'CC::JumpBy': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, position, height, jumps)': {'ret_type': 'CC::JumpBy', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Vec2', 'name': 'position'}, {'type': 'float', 'name': 'height'}, {'type': 'int', 'name': 'jumps'}], 'sublime': 'create(${1:duration}, ${2:position}, ${3:height}, ${4:jumps})$0'}}}, 'CC::TiledGrid3D': {'base_class': 'CC::GridBase', 'ifunctions': {}, 'sfunctions': {'create(grid_size)': {'ret_type': 'CC::TiledGrid3D', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:grid_size})$0'}, 'create(grid_size, texture, flipped)': {'ret_type': 'CC::TiledGrid3D', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'bool', 'name': 'flipped'}], 'sublime': 'create(${1:grid_size}, ${2:texture}, ${3:flipped})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::Speed': {'base_class': 'CC::Action', 'ifunctions': {'get_inner_action()': {'ret_type': 'CC::ActionInterval', 'arguments': [], 'sublime': 'get_inner_action'}, 'set_speed(speed)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'speed'}], 'sublime': 'set_speed(${1:speed})$0'}, 'set_inner_action(action)': {'ret_type': 'void', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'set_inner_action(${1:action})$0'}, 'get_speed()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_speed'}}, 'sfunctions': {'create(action, speed)': {'ret_type': 'CC::Speed', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}, {'type': 'float', 'name': 'speed'}], 'sublime': 'create(${1:action}, ${2:speed})$0'}}}, 'CC::TransitionFade': {'base_class': 'CC::TransitionScene', 'ifunctions': {}, 'sfunctions': {'create(duration, scene, color)': {'ret_type': 'CC::TransitionFade', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Scene', 'name': 'scene'}, {'type': 'CC::Color3B', 'name': 'color'}], 'sublime': 'create(${1:duration}, ${2:scene}, ${3:color})$0'}, 'create(duration, scene)': {'ret_type': 'CC::TransitionFade', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:duration}, ${2:scene})$0'}}}, 'CC::TintTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, color)': {'ret_type': 'CC::TintTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Color3B', 'name': 'color'}], 'sublime': 'create(${1:duration}, ${2:color})$0'}, 'create(duration, red, green, blue)': {'ret_type': 'CC::TintTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'int', 'name': 'red'}, {'type': 'int', 'name': 'green'}, {'type': 'int', 'name': 'blue'}], 'sublime': 'create(${1:duration}, ${2:red}, ${3:green}, ${4:blue})$0'}}}, 'CC::Grid3D': {'base_class': 'CC::GridBase', 'ifunctions': {'set_need_depth_test_for_blit(needed_depth_test)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'needed_depth_test'}], 'sublime': 'set_need_depth_test_for_blit(${1:needed_depth_test})$0'}, 'get_need_depth_test_for_blit()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'get_need_depth_test_for_blit'}}, 'sfunctions': {'create(grid_size)': {'ret_type': 'CC::Grid3D', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:grid_size})$0'}, 'create(grid_size, texture, flipped)': {'ret_type': 'CC::Grid3D', 'arguments': [{'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'bool', 'name': 'flipped'}], 'sublime': 'create(${1:grid_size}, ${2:texture}, ${3:flipped})$0'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::GLView': {'base_class': 'CC::Ref', 'ifunctions': {'set_design_resolution_size(width, height, resolution_policy)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}, {'type': 'int', 'name': 'resolution_policy'}], 'sublime': 'set_design_resolution_size(${1:width}, ${2:height}, ${3:resolution_policy})$0'}, 'get_design_resolution_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_design_resolution_size'}, 'open_glready?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'open_glready?'}, 'get_visible_origin()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_visible_origin'}, 'set_view_name(viewname)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'viewname'}], 'sublime': 'set_view_name(${1:viewname})$0'}, 'get_frame_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_frame_size'}, 'scissor_enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'scissor_enabled?'}, 'get_visible_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_visible_size'}, 'set_imekeyboard_state(open)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'open'}], 'sublime': 'set_imekeyboard_state(${1:open})$0'}, 'poll_events()': {'ret_type': 'void', 'arguments': [], 'sublime': 'poll_events'}, 'set_frame_zoom_factor(zoom_factor)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'zoom_factor'}], 'sublime': 'set_frame_zoom_factor(${1:zoom_factor})$0'}, 'set_content_scale_factor(scale_factor)': {'ret_type': 'bool', 'arguments': [{'type': 'float', 'name': 'scale_factor'}], 'sublime': 'set_content_scale_factor(${1:scale_factor})$0'}, 'swap_buffers()': {'ret_type': 'void', 'arguments': [], 'sublime': 'swap_buffers'}, 'end()': {'ret_type': 'void', 'arguments': [], 'sublime': 'end'}, 'get_view_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_view_name'}, 'retina_display?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'retina_display?'}, 'set_scissor_in_points(x, y, w, h)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}, {'type': 'float', 'name': 'w'}, {'type': 'float', 'name': 'h'}], 'sublime': 'set_scissor_in_points(${1:x}, ${2:y}, ${3:w}, ${4:h})$0'}, 'get_scissor_rect()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_scissor_rect'}, 'set_view_port_in_points(x, y, w, h)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}, {'type': 'float', 'name': 'w'}, {'type': 'float', 'name': 'h'}], 'sublime': 'set_view_port_in_points(${1:x}, ${2:y}, ${3:w}, ${4:h})$0'}, 'get_view_port_rect()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_view_port_rect'}, 'get_scale_x()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scale_x'}, 'get_visible_rect()': {'ret_type': 'CC::Rect', 'arguments': [], 'sublime': 'get_visible_rect'}, 'get_retina_factor()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_retina_factor'}, 'get_scale_y()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_scale_y'}, 'get_frame_zoom_factor()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_frame_zoom_factor'}, 'get_resolution_policy()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_resolution_policy'}, 'set_frame_size(width, height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'set_frame_size(${1:width}, ${2:height})$0'}, 'get_content_scale_factor()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_content_scale_factor'}, 'window_should_close()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'window_should_close'}}, 'sfunctions': {'get_glcontext_attrs()': {'ret_type': 'GLContextAttrs', 'arguments': [], 'sublime': 'get_glcontext_attrs'}, 'set_glcontext_attrs(gl_context_attrs)': {'ret_type': 'void', 'arguments': [{'type': 'GLContextAttrs', 'name': 'gl_context_attrs'}], 'sublime': 'set_glcontext_attrs(${1:gl_context_attrs})$0'}}}, 'CC::Waves': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_amplitude()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude'}, 'set_amplitude_rate(amplitude_rate)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude_rate'}], 'sublime': 'set_amplitude_rate(${1:amplitude_rate})$0'}, 'set_amplitude(amplitude)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'amplitude'}], 'sublime': 'set_amplitude(${1:amplitude})$0'}, 'get_amplitude_rate()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_amplitude_rate'}}, 'sfunctions': {'create(duration, grid_size, waves, amplitude, horizontal, vertical)': {'ret_type': 'CC::Waves', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'waves'}, {'type': 'float', 'name': 'amplitude'}, {'type': 'bool', 'name': 'horizontal'}, {'type': 'bool', 'name': 'vertical'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:waves}, ${4:amplitude}, ${5:horizontal}, ${6:vertical})$0'}}}, 'CC::Lens3D': {'base_class': 'CC::Grid3DAction', 'ifunctions': {'get_lens_effect()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_lens_effect'}, 'set_lens_effect(lens_effect)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'lens_effect'}], 'sublime': 'set_lens_effect(${1:lens_effect})$0'}, 'set_concave(concave)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'concave'}], 'sublime': 'set_concave(${1:concave})$0'}, 'set_position(position)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'position'}], 'sublime': 'set_position(${1:position})$0'}, 'get_position()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_position'}}, 'sfunctions': {'create(duration, grid_size, position, radius)': {'ret_type': 'CC::Lens3D', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'CC::Vec2', 'name': 'position'}, {'type': 'float', 'name': 'radius'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:position}, ${4:radius})$0'}}}, 'CC::EventAcceleration': {'base_class': 'CC::Event', 'ifunctions': {}, 'sfunctions': {}}, 'CC::AnimationCache': {'base_class': 'CC::Ref', 'ifunctions': {'remove_animation(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'remove_animation(${1:name})$0'}, 'add_animation(animation, name)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Animation', 'name': 'animation'}, {'type': 'string', 'name': 'name'}], 'sublime': 'add_animation(${1:animation}, ${2:name})$0'}, 'add_animations_with_file(plist)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'plist'}], 'sublime': 'add_animations_with_file(${1:plist})$0'}, 'add_animations_with_dictionary(dictionary, plist)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'dictionary'}, {'type': 'string', 'name': 'plist'}], 'sublime': 'add_animations_with_dictionary(${1:dictionary}, ${2:plist})$0'}, 'init()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'init'}, 'get_animation(name)': {'ret_type': 'CC::Animation', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'get_animation(${1:name})$0'}}, 'sfunctions': {'get_instance()': {'ret_type': 'CC::AnimationCache', 'arguments': [], 'sublime': 'get_instance'}, 'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}, 'destroy_instance()': {'ret_type': 'void', 'arguments': [], 'sublime': 'destroy_instance'}}}, 'CC::DrawNode': {'base_class': 'CC::Node', 'ifunctions': {'draw_dot(pos, radius, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}, {'type': 'float', 'name': 'radius'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_dot(${1:pos}, ${2:radius}, ${3:color})$0'}, 'clear()': {'ret_type': 'void', 'arguments': [], 'sublime': 'clear'}, 'draw_solid_circle(center, radius, angle, segments, scale_x, scale_y, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'center'}, {'type': 'float', 'name': 'radius'}, {'type': 'float', 'name': 'angle'}, {'type': 'int', 'name': 'segments'}, {'type': 'float', 'name': 'scale_x'}, {'type': 'float', 'name': 'scale_y'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_solid_circle(${1:center}, ${2:radius}, ${3:angle}, ${4:segments}, ${5:scale_x}, ${6:scale_y}, ${7:color})$0'}, 'draw_solid_rect(origin, destination, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'origin'}, {'type': 'CC::Vec2', 'name': 'destination'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_solid_rect(${1:origin}, ${2:destination}, ${3:color})$0'}, 'draw_segment(from, to, radius, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'from'}, {'type': 'CC::Vec2', 'name': 'to'}, {'type': 'float', 'name': 'radius'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_segment(${1:from}, ${2:to}, ${3:radius}, ${4:color})$0'}, 'on_draw(transform, flags)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'transform'}, {'type': 'int', 'name': 'flags'}], 'sublime': 'on_draw(${1:transform}, ${2:flags})$0'}, 'draw_cubic_bezier(origin, control1, control2, destination, segments, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'origin'}, {'type': 'CC::Vec2', 'name': 'control1'}, {'type': 'CC::Vec2', 'name': 'control2'}, {'type': 'CC::Vec2', 'name': 'destination'}, {'type': 'int', 'name': 'segments'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_cubic_bezier(${1:origin}, ${2:control1}, ${3:control2}, ${4:destination}, ${5:segments}, ${6:color})$0'}, 'draw_rect(origin, destination, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'origin'}, {'type': 'CC::Vec2', 'name': 'destination'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_rect(${1:origin}, ${2:destination}, ${3:color})$0'}, 'draw_point(point, point_size, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}, {'type': 'float', 'name': 'point_size'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_point(${1:point}, ${2:point_size}, ${3:color})$0'}, 'draw_line(origin, destination, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'origin'}, {'type': 'CC::Vec2', 'name': 'destination'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_line(${1:origin}, ${2:destination}, ${3:color})$0'}, 'draw_rect(p1, p2, p3, p4, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'p1'}, {'type': 'CC::Vec2', 'name': 'p2'}, {'type': 'CC::Vec2', 'name': 'p3'}, {'type': 'CC::Vec2', 'name': 'p4'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_rect(${1:p1}, ${2:p2}, ${3:p3}, ${4:p4}, ${5:color})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'on_draw_glline(transform, flags)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'transform'}, {'type': 'int', 'name': 'flags'}], 'sublime': 'on_draw_glline(${1:transform}, ${2:flags})$0'}, 'draw_circle(center, radius, angle, segments, draw_line_to_center, scale_x, scale_y, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'center'}, {'type': 'float', 'name': 'radius'}, {'type': 'float', 'name': 'angle'}, {'type': 'int', 'name': 'segments'}, {'type': 'bool', 'name': 'draw_line_to_center'}, {'type': 'float', 'name': 'scale_x'}, {'type': 'float', 'name': 'scale_y'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_circle(${1:center}, ${2:radius}, ${3:angle}, ${4:segments}, ${5:draw_line_to_center}, ${6:scale_x}, ${7:scale_y}, ${8:color})$0'}, 'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'draw_quad_bezier(origin, control, destination, segments, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'origin'}, {'type': 'CC::Vec2', 'name': 'control'}, {'type': 'CC::Vec2', 'name': 'destination'}, {'type': 'int', 'name': 'segments'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_quad_bezier(${1:origin}, ${2:control}, ${3:destination}, ${4:segments}, ${5:color})$0'}, 'on_draw_glpoint(transform, flags)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Mat4', 'name': 'transform'}, {'type': 'int', 'name': 'flags'}], 'sublime': 'on_draw_glpoint(${1:transform}, ${2:flags})$0'}, 'draw_triangle(p1, p2, p3, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'p1'}, {'type': 'CC::Vec2', 'name': 'p2'}, {'type': 'CC::Vec2', 'name': 'p3'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_triangle(${1:p1}, ${2:p2}, ${3:p3}, ${4:color})$0'}, 'draw_circle(center, radius, angle, segments, draw_line_to_center, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'center'}, {'type': 'float', 'name': 'radius'}, {'type': 'float', 'name': 'angle'}, {'type': 'int', 'name': 'segments'}, {'type': 'bool', 'name': 'draw_line_to_center'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_circle(${1:center}, ${2:radius}, ${3:angle}, ${4:segments}, ${5:draw_line_to_center}, ${6:color})$0'}, 'draw_solid_circle(center, radius, angle, segments, color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'center'}, {'type': 'float', 'name': 'radius'}, {'type': 'float', 'name': 'angle'}, {'type': 'int', 'name': 'segments'}, {'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'draw_solid_circle(${1:center}, ${2:radius}, ${3:angle}, ${4:segments}, ${5:color})$0'}}, 'sfunctions': {'create()': {'ret_type': 'CC::DrawNode', 'arguments': [], 'sublime': 'create'}}}, 'CC::Component': {'base_class': 'CC::Ref', 'ifunctions': {'set_owner(p_owner)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'p_owner'}], 'sublime': 'set_owner(${1:p_owner})$0'}, 'get_owner()': {'ret_type': 'CC::Node', 'arguments': [], 'sublime': 'get_owner'}, 'get_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_name'}, 'set_name(name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'set_name(${1:name})$0'}, 'set_enabled(b)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'b'}], 'sublime': 'set_enabled(${1:b})$0'}, 'init()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'init'}, 'enabled?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'enabled?'}, 'update(delta)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'delta'}], 'sublime': 'update(${1:delta})$0'}}, 'sfunctions': {'create()': {'ret_type': 'CC::Component', 'arguments': [], 'sublime': 'create'}}}, 'CC::SpotLight': {'base_class': 'CC::BaseLight', 'ifunctions': {'set_outer_angle(angle)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'angle'}], 'sublime': 'set_outer_angle(${1:angle})$0'}, 'get_inner_angle()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_inner_angle'}, 'get_range()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_range'}, 'get_cos_inner_angle()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_cos_inner_angle'}, 'set_direction(dir)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec3', 'name': 'dir'}], 'sublime': 'set_direction(${1:dir})$0'}, 'get_outer_angle()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_outer_angle'}, 'get_direction_in_world()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_direction_in_world'}, 'set_inner_angle(angle)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'angle'}], 'sublime': 'set_inner_angle(${1:angle})$0'}, 'get_direction()': {'ret_type': 'CC::Vec3', 'arguments': [], 'sublime': 'get_direction'}, 'get_cos_outer_angle()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_cos_outer_angle'}, 'set_range(range)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'range'}], 'sublime': 'set_range(${1:range})$0'}}, 'sfunctions': {'create(direction, position, color, inner_angle, outer_angle, range)': {'ret_type': 'CC::SpotLight', 'arguments': [{'type': 'CC::Vec3', 'name': 'direction'}, {'type': 'CC::Vec3', 'name': 'position'}, {'type': 'CC::Color3B', 'name': 'color'}, {'type': 'float', 'name': 'inner_angle'}, {'type': 'float', 'name': 'outer_angle'}, {'type': 'float', 'name': 'range'}], 'sublime': 'create(${1:direction}, ${2:position}, ${3:color}, ${4:inner_angle}, ${5:outer_angle}, ${6:range})$0'}}}, 'CC::TransitionProgressInOut': {'base_class': 'CC::TransitionProgress', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgressInOut', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::NodeGrid': {'base_class': 'CC::Node', 'ifunctions': {'set_grid(grid)': {'ret_type': 'void', 'arguments': [{'type': 'CC::GridBase', 'name': 'grid'}], 'sublime': 'set_grid(${1:grid})$0'}, 'set_target(target)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'target'}], 'sublime': 'set_target(${1:target})$0'}, 'get_grid()': {'ret_type': 'CC::GridBase', 'arguments': [], 'sublime': 'get_grid'}}, 'sfunctions': {'create()': {'ret_type': 'CC::NodeGrid', 'arguments': [], 'sublime': 'create'}}}, 'CC::FadeOutDownTiles': {'base_class': 'CC::FadeOutUpTiles', 'ifunctions': {}, 'sfunctions': {'create(duration, grid_size)': {'ret_type': 'CC::FadeOutDownTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:duration}, ${2:grid_size})$0'}}}, 'CC::TransitionMoveInR': {'base_class': 'CC::TransitionMoveInL', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionMoveInR', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::FiniteTimeAction': {'base_class': 'CC::Action', 'ifunctions': {'get_duration()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_duration'}, 'set_duration(duration)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'duration'}], 'sublime': 'set_duration(${1:duration})$0'}}, 'sfunctions': {}}, 'CC::EventListenerFocus': {'base_class': 'CC::EventListener', 'ifunctions': {}, 'sfunctions': {'create()': {'ret_type': 'CC::EventListenerFocus', 'arguments': [], 'sublime': 'create'}}}, 'CC::EventTouch': {'base_class': 'CC::Event', 'ifunctions': {'set_event_code(event_code)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'event_code'}], 'sublime': 'set_event_code(${1:event_code})$0'}, 'get_event_code()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_event_code'}, 'get_touches()': {'ret_type': 'array', 'arguments': [], 'sublime': 'get_touches'}, 'set_touches(touches)': {'ret_type': 'void', 'arguments': [{'type': 'array', 'name': 'touches'}], 'sublime': 'set_touches(${1:touches})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::TextureCache': {'base_class': 'CC::Ref', 'ifunctions': {'get_cached_texture_info()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_cached_texture_info'}, 'remove_unused_textures()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_unused_textures'}, 'unbind_all_image_async()': {'ret_type': 'void', 'arguments': [], 'sublime': 'unbind_all_image_async'}, 'wait_for_quit()': {'ret_type': 'void', 'arguments': [], 'sublime': 'wait_for_quit'}, 'remove_texture_for_key(key)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'key'}], 'sublime': 'remove_texture_for_key(${1:key})$0'}, 'get_description()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_description'}, 'add_image(image, key)': {'ret_type': 'CC::Texture2D', 'arguments': [{'type': 'CC::Image', 'name': 'image'}, {'type': 'string', 'name': 'key'}], 'sublime': 'add_image(${1:image}, ${2:key})$0'}, 'add_image(filepath)': {'ret_type': 'CC::Texture2D', 'arguments': [{'type': 'string', 'name': 'filepath'}], 'sublime': 'add_image(${1:filepath})$0'}, 'get_texture_for_key(key)': {'ret_type': 'CC::Texture2D', 'arguments': [{'type': 'string', 'name': 'key'}], 'sublime': 'get_texture_for_key(${1:key})$0'}, 'remove_all_textures()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_textures'}, 'remove_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'remove_texture(${1:texture})$0'}, 'unbind_image_async(filename)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'unbind_image_async(${1:filename})$0'}, 'reload_texture(file_name)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'file_name'}], 'sublime': 'reload_texture(${1:file_name})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::TMXLayer': {'base_class': 'CC::SpriteBatchNode', 'ifunctions': {'get_map_tile_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_map_tile_size'}, 'set_layer_orientation(orientation)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'orientation'}], 'sublime': 'set_layer_orientation(${1:orientation})$0'}, 'setup_tiles()': {'ret_type': 'void', 'arguments': [], 'sublime': 'setup_tiles'}, 'set_tile_gid(gid, tile_coordinate)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'gid'}, {'type': 'CC::Vec2', 'name': 'tile_coordinate'}], 'sublime': 'set_tile_gid(${1:gid}, ${2:tile_coordinate})$0'}, 'get_layer_orientation()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_layer_orientation'}, 'get_position_at(tile_coordinate)': {'ret_type': 'CC::Vec2', 'arguments': [{'type': 'CC::Vec2', 'name': 'tile_coordinate'}], 'sublime': 'get_position_at(${1:tile_coordinate})$0'}, 'set_properties(properties)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'properties'}], 'sublime': 'set_properties(${1:properties})$0'}, 'get_layer_size()': {'ret_type': 'CC::Size', 'arguments': [], 'sublime': 'get_layer_size'}, 'release_map()': {'ret_type': 'void', 'arguments': [], 'sublime': 'release_map'}, 'set_layer_size(size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'size'}], 'sublime': 'set_layer_size(${1:size})$0'}, 'set_layer_name(layer_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'layer_name'}], 'sublime': 'set_layer_name(${1:layer_name})$0'}, 'get_layer_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_layer_name'}, 'set_tile_gid(gid, tile_coordinate, flags)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'gid'}, {'type': 'CC::Vec2', 'name': 'tile_coordinate'}, {'type': 'int', 'name': 'flags'}], 'sublime': 'set_tile_gid(${1:gid}, ${2:tile_coordinate}, ${3:flags})$0'}, 'get_properties()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_properties'}, 'get_tile_at(tile_coordinate)': {'ret_type': 'CC::Sprite', 'arguments': [{'type': 'CC::Vec2', 'name': 'tile_coordinate'}], 'sublime': 'get_tile_at(${1:tile_coordinate})$0'}, 'get_tile_set()': {'ret_type': 'CC::TMXTilesetInfo', 'arguments': [], 'sublime': 'get_tile_set'}, 'set_map_tile_size(size)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'size'}], 'sublime': 'set_map_tile_size(${1:size})$0'}, 'remove_tile_at(tile_coordinate)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'tile_coordinate'}], 'sublime': 'remove_tile_at(${1:tile_coordinate})$0'}, 'init_with_tileset_info(tileset_info, layer_info, map_info)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::TMXTilesetInfo', 'name': 'tileset_info'}, {'type': 'CC::TMXLayerInfo', 'name': 'layer_info'}, {'type': 'CC::TMXMapInfo', 'name': 'map_info'}], 'sublime': 'init_with_tileset_info(${1:tileset_info}, ${2:layer_info}, ${3:map_info})$0'}, 'set_tile_set(info)': {'ret_type': 'void', 'arguments': [{'type': 'CC::TMXTilesetInfo', 'name': 'info'}], 'sublime': 'set_tile_set(${1:info})$0'}, 'get_property(property_name)': {'ret_type': 'CC::Value', 'arguments': [{'type': 'string', 'name': 'property_name'}], 'sublime': 'get_property(${1:property_name})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}, 'create(tileset_info, layer_info, map_info)': {'ret_type': 'CC::TMXLayer', 'arguments': [{'type': 'CC::TMXTilesetInfo', 'name': 'tileset_info'}, {'type': 'CC::TMXLayerInfo', 'name': 'layer_info'}, {'type': 'CC::TMXMapInfo', 'name': 'map_info'}], 'sublime': 'create(${1:tileset_info}, ${2:layer_info}, ${3:map_info})$0'}}}, 'CC::RotateTo': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create(duration, dst_angle3_d)': {'ret_type': 'CC::RotateTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Vec3', 'name': 'dst_angle3_d'}], 'sublime': 'create(${1:duration}, ${2:dst_angle3_d})$0'}, 'create(duration, dst_angle_x, dst_angle_y)': {'ret_type': 'CC::RotateTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'dst_angle_x'}, {'type': 'float', 'name': 'dst_angle_y'}], 'sublime': 'create(${1:duration}, ${2:dst_angle_x}, ${3:dst_angle_y})$0'}, 'create(duration, dst_angle)': {'ret_type': 'CC::RotateTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'float', 'name': 'dst_angle'}], 'sublime': 'create(${1:duration}, ${2:dst_angle})$0'}}}, 'CC::TransitionProgressOutIn': {'base_class': 'CC::TransitionProgress', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgressOutIn', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::ParallaxNode': {'base_class': 'CC::Node', 'ifunctions': {'remove_all_children_with_cleanup(cleanup)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'cleanup'}], 'sublime': 'remove_all_children_with_cleanup(${1:cleanup})$0'}, 'add_child(child, z, parallax_ratio, position_offset)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Node', 'name': 'child'}, {'type': 'int', 'name': 'z'}, {'type': 'CC::Vec2', 'name': 'parallax_ratio'}, {'type': 'CC::Vec2', 'name': 'position_offset'}], 'sublime': 'add_child(${1:child}, ${2:z}, ${3:parallax_ratio}, ${4:position_offset})$0'}}, 'sfunctions': {'create()': {'ret_type': 'CC::ParallaxNode', 'arguments': [], 'sublime': 'create'}}}, 'CC::LayerGradient': {'base_class': 'CC::LayerColor', 'ifunctions': {'compressed_interpolation?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'compressed_interpolation?'}, 'set_vector(along_vector)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'along_vector'}], 'sublime': 'set_vector(${1:along_vector})$0'}, 'get_start_color()': {'ret_type': 'CC::Color3B', 'arguments': [], 'sublime': 'get_start_color'}, 'set_start_color(start_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'start_color'}], 'sublime': 'set_start_color(${1:start_color})$0'}, 'set_start_opacity(start_opacity)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'start_opacity'}], 'sublime': 'set_start_opacity(${1:start_opacity})$0'}, 'get_end_opacity()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_end_opacity'}, 'set_compressed_interpolation(compressed_interpolation)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'compressed_interpolation'}], 'sublime': 'set_compressed_interpolation(${1:compressed_interpolation})$0'}, 'set_end_opacity(end_opacity)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'end_opacity'}], 'sublime': 'set_end_opacity(${1:end_opacity})$0'}, 'get_end_color()': {'ret_type': 'CC::Color3B', 'arguments': [], 'sublime': 'get_end_color'}, 'get_start_opacity()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_start_opacity'}, 'set_end_color(end_color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color3B', 'name': 'end_color'}], 'sublime': 'set_end_color(${1:end_color})$0'}, 'get_vector()': {'ret_type': 'CC::Vec2', 'arguments': [], 'sublime': 'get_vector'}}, 'sfunctions': {'create(start, end)': {'ret_type': 'CC::LayerGradient', 'arguments': [{'type': 'CC::Color4B', 'name': 'start'}, {'type': 'CC::Color4B', 'name': 'end'}], 'sublime': 'create(${1:start}, ${2:end})$0'}, 'create()': {'ret_type': 'CC::LayerGradient', 'arguments': [], 'sublime': 'create'}, 'create(start, end, v)': {'ret_type': 'CC::LayerGradient', 'arguments': [{'type': 'CC::Color4B', 'name': 'start'}, {'type': 'CC::Color4B', 'name': 'end'}, {'type': 'CC::Vec2', 'name': 'v'}], 'sublime': 'create(${1:start}, ${2:end}, ${3:v})$0'}}}, 'CC::TurnOffTiles': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {'turn_on_tile(pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'turn_on_tile(${1:pos})$0'}, 'turn_off_tile(pos)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'pos'}], 'sublime': 'turn_off_tile(${1:pos})$0'}}, 'sfunctions': {'create(duration, grid_size, seed)': {'ret_type': 'CC::TurnOffTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'seed'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:seed})$0'}, 'create(duration, grid_size)': {'ret_type': 'CC::TurnOffTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}], 'sublime': 'create(${1:duration}, ${2:grid_size})$0'}}}, 'CC::TMXLayerInfo': {'base_class': 'CC::Ref', 'ifunctions': {'get_properties()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_properties'}, 'set_properties(properties)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'properties'}], 'sublime': 'set_properties(${1:properties})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}}}, 'CC::GridAction': {'base_class': 'CC::ActionInterval', 'ifunctions': {'get_grid()': {'ret_type': 'CC::GridBase', 'arguments': [], 'sublime': 'get_grid'}}, 'sfunctions': {}}, 'CC::MenuItemToggle': {'base_class': 'CC::MenuItem', 'ifunctions': {'get_selected_index()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_selected_index'}, 'add_sub_item(item)': {'ret_type': 'void', 'arguments': [{'type': 'CC::MenuItem', 'name': 'item'}], 'sublime': 'add_sub_item(${1:item})$0'}, 'get_selected_item()': {'ret_type': 'CC::MenuItem', 'arguments': [], 'sublime': 'get_selected_item'}, 'get_sub_items()': {'ret_type': 'CC::Vector<cocos2d::MenuItem *>', 'arguments': [], 'sublime': 'get_sub_items'}, 'set_sub_items(items)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::MenuItem *>', 'name': 'items'}], 'sublime': 'set_sub_items(${1:items})$0'}, 'set_selected_index(index)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'set_selected_index(${1:index})$0'}}, 'sfunctions': {'create_with_callback(callback, item)': {'ret_type': 'CC::MenuItemToggle', 'arguments': [{'type': 'Proc', 'name': 'callback'}, {'type': 'CC::MenuItem', 'name': 'item'}], 'sublime': 'create_with_callback(${1:callback}, ${2:item})$0'}, 'create()': {'ret_type': 'CC::MenuItemToggle', 'arguments': [], 'sublime': 'create'}, 'create(item)': {'ret_type': 'CC::MenuItemToggle', 'arguments': [{'type': 'CC::MenuItem', 'name': 'item'}], 'sublime': 'create(${1:item})$0'}, 'create_with_callback(callback, menu_items)': {'ret_type': 'CC::MenuItemToggle', 'arguments': [{'type': 'Proc', 'name': 'callback'}, {'type': 'CC::Vector<cocos2d::MenuItem *>', 'name': 'menu_items'}], 'sublime': 'create_with_callback(${1:callback}, ${2:menu_items})$0'}}}, 'CC::ShuffleTiles': {'base_class': 'CC::TiledGrid3DAction', 'ifunctions': {'get_delta(pos)': {'ret_type': 'CC::Size', 'arguments': [{'type': 'CC::Size', 'name': 'pos'}], 'sublime': 'get_delta(${1:pos})$0'}}, 'sfunctions': {'create(duration, grid_size, seed)': {'ret_type': 'CC::ShuffleTiles', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Size', 'name': 'grid_size'}, {'type': 'int', 'name': 'seed'}], 'sublime': 'create(${1:duration}, ${2:grid_size}, ${3:seed})$0'}}}, 'CC::EventListenerAcceleration': {'base_class': 'CC::EventListener', 'ifunctions': {}, 'sfunctions': {'create(callback)': {'ret_type': 'CC::EventListenerAcceleration', 'arguments': [{'type': 'Proc', 'name': 'callback'}], 'sublime': 'create(${1:callback})$0'}}}, 'CC::TransitionFadeTR': {'base_class': 'CC::TransitionScene', 'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}, 'action_with_size(size)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::Size', 'name': 'size'}], 'sublime': 'action_with_size(${1:size})$0'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionFadeTR', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::EaseQuarticActionIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuarticActionIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::AsyncTaskPool': {'ifunctions': {'stop_tasks(type)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'type'}], 'sublime': 'stop_tasks(${1:type})$0'}}, 'sfunctions': {'destory_instance()': {'ret_type': 'void', 'arguments': [], 'sublime': 'destory_instance'}, 'get_instance()': {'ret_type': 'CC::AsyncTaskPool', 'arguments': [], 'sublime': 'get_instance'}}}, 'CC::EaseQuadraticActionInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuadraticActionInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::ParticleSystemQuad': {'base_class': 'CC::ParticleSystem', 'ifunctions': {'set_texture_with_rect(texture, rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'set_texture_with_rect(${1:texture}, ${2:rect})$0'}, 'listen_renderer_recreated(event)': {'ret_type': 'void', 'arguments': [{'type': 'CC::EventCustom', 'name': 'event'}], 'sublime': 'listen_renderer_recreated(${1:event})$0'}, 'set_display_frame(sprite_frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'sprite_frame'}], 'sublime': 'set_display_frame(${1:sprite_frame})$0'}}, 'sfunctions': {'create(filename)': {'ret_type': 'CC::ParticleSystemQuad', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'create(${1:filename})$0'}, 'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleSystemQuad', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create(dictionary)': {'ret_type': 'CC::ParticleSystemQuad', 'arguments': [{'type': 'string', 'name': 'dictionary'}], 'sublime': 'create(${1:dictionary})$0'}, 'create()': {'ret_type': 'CC::ParticleSystemQuad', 'arguments': [], 'sublime': 'create'}}}, 'CC::Animation': {'base_class': 'CC::Ref', 'ifunctions': {'clone()': {'ret_type': 'CC::Animation', 'arguments': [], 'sublime': 'clone'}, 'get_delay_per_unit()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_delay_per_unit'}, 'get_duration()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_duration'}, 'get_total_delay_units()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_total_delay_units'}, 'set_loops(loops)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'loops'}], 'sublime': 'set_loops(${1:loops})$0'}, 'get_restore_original_frame()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'get_restore_original_frame'}, 'add_sprite_frame_with_texture(pob_texture, rect)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'pob_texture'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'add_sprite_frame_with_texture(${1:pob_texture}, ${2:rect})$0'}, 'set_frames(frames)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vector<cocos2d::AnimationFrame *>', 'name': 'frames'}], 'sublime': 'set_frames(${1:frames})$0'}, 'add_sprite_frame(frame)': {'ret_type': 'void', 'arguments': [{'type': 'CC::SpriteFrame', 'name': 'frame'}], 'sublime': 'add_sprite_frame(${1:frame})$0'}, 'add_sprite_frame_with_file(filename)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'add_sprite_frame_with_file(${1:filename})$0'}, 'set_restore_original_frame(restore_original_frame)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'restore_original_frame'}], 'sublime': 'set_restore_original_frame(${1:restore_original_frame})$0'}, 'set_delay_per_unit(delay_per_unit)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'delay_per_unit'}], 'sublime': 'set_delay_per_unit(${1:delay_per_unit})$0'}, 'get_frames()': {'ret_type': 'CC::Vector<cocos2d::AnimationFrame *>', 'arguments': [], 'sublime': 'get_frames'}, 'get_loops()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_loops'}}, 'sfunctions': {'create_with_sprite_frames(array_of_sprite_frame_names, delay)': {'ret_type': 'CC::Animation', 'arguments': [{'type': 'CC::Vector<cocos2d::SpriteFrame *>', 'name': 'array_of_sprite_frame_names'}, {'type': 'float', 'name': 'delay'}], 'sublime': 'create_with_sprite_frames(${1:array_of_sprite_frame_names}, ${2:delay})$0'}, 'create(array_of_animation_frame_names, delay_per_unit)': {'ret_type': 'CC::Animation', 'arguments': [{'type': 'CC::Vector<cocos2d::AnimationFrame *>', 'name': 'array_of_animation_frame_names'}, {'type': 'float', 'name': 'delay_per_unit'}], 'sublime': 'create(${1:array_of_animation_frame_names}, ${2:delay_per_unit})$0'}, 'create()': {'ret_type': 'CC::Animation', 'arguments': [], 'sublime': 'create'}, 'create(array_of_animation_frame_names, delay_per_unit, loops)': {'ret_type': 'CC::Animation', 'arguments': [{'type': 'CC::Vector<cocos2d::AnimationFrame *>', 'name': 'array_of_animation_frame_names'}, {'type': 'float', 'name': 'delay_per_unit'}, {'type': 'int', 'name': 'loops'}], 'sublime': 'create(${1:array_of_animation_frame_names}, ${2:delay_per_unit}, ${3:loops})$0'}, 'create_with_sprite_frames(array_of_sprite_frame_names, delay, loops)': {'ret_type': 'CC::Animation', 'arguments': [{'type': 'CC::Vector<cocos2d::SpriteFrame *>', 'name': 'array_of_sprite_frame_names'}, {'type': 'float', 'name': 'delay'}, {'type': 'int', 'name': 'loops'}], 'sublime': 'create_with_sprite_frames(${1:array_of_sprite_frame_names}, ${2:delay}, ${3:loops})$0'}, 'create_with_sprite_frames(array_of_sprite_frame_names)': {'ret_type': 'CC::Animation', 'arguments': [{'type': 'CC::Vector<cocos2d::SpriteFrame *>', 'name': 'array_of_sprite_frame_names'}], 'sublime': 'create_with_sprite_frames(${1:array_of_sprite_frame_names})$0'}}}, 'CC::Ref': {'ifunctions': {'get_reference_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_reference_count'}, 'retain()': {'ret_type': 'void', 'arguments': [], 'sublime': 'retain'}, 'release()': {'ret_type': 'void', 'arguments': [], 'sublime': 'release'}}, 'sfunctions': {}}, 'CC::JumpTo': {'base_class': 'CC::JumpBy', 'ifunctions': {}, 'sfunctions': {'create(duration, position, height, jumps)': {'ret_type': 'CC::JumpTo', 'arguments': [{'type': 'float', 'name': 'duration'}, {'type': 'CC::Vec2', 'name': 'position'}, {'type': 'float', 'name': 'height'}, {'type': 'int', 'name': 'jumps'}], 'sublime': 'create(${1:duration}, ${2:position}, ${3:height}, ${4:jumps})$0'}}}, 'CC::EaseQuarticActionInOut': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuarticActionInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::TransitionEaseScene': {'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}}, 'sfunctions': {}}, 'CC::Sequence': {'base_class': 'CC::ActionInterval', 'ifunctions': {}, 'sfunctions': {'create_with_two_actions(action_one, action_two)': {'ret_type': 'CC::Sequence', 'arguments': [{'type': 'CC::FiniteTimeAction', 'name': 'action_one'}, {'type': 'CC::FiniteTimeAction', 'name': 'action_two'}], 'sublime': 'create_with_two_actions(${1:action_one}, ${2:action_two})$0'}, 'create(action1)': {'ret_type': 'CC::Sequence', 'arguments': [{'type': 'CC::FiniteTimeAction', 'name': 'action1'}], 'sublime': 'create(${1:action1})$0'}, 'create(array_of_actions)': {'ret_type': 'CC::Sequence', 'arguments': [{'type': 'CC::Vector<cocos2d::FiniteTimeAction *>', 'name': 'array_of_actions'}], 'sublime': 'create(${1:array_of_actions})$0'}}}, 'CC::PointLight': {'base_class': 'CC::BaseLight', 'ifunctions': {'get_range()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_range'}, 'set_range(range)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'range'}], 'sublime': 'set_range(${1:range})$0'}}, 'sfunctions': {'create(position, color, range)': {'ret_type': 'CC::PointLight', 'arguments': [{'type': 'CC::Vec3', 'name': 'position'}, {'type': 'CC::Color3B', 'name': 'color'}, {'type': 'float', 'name': 'range'}], 'sublime': 'create(${1:position}, ${2:color}, ${3:range})$0'}}}, 'CC::TransitionFadeDown': {'base_class': 'CC::TransitionFadeTR', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionFadeDown', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::ParticleRain': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleRain', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleRain', 'arguments': [], 'sublime': 'create'}}}, 'CC::FlipX3D': {'base_class': 'CC::Grid3DAction', 'ifunctions': {}, 'sfunctions': {'create(duration)': {'ret_type': 'CC::FlipX3D', 'arguments': [{'type': 'float', 'name': 'duration'}], 'sublime': 'create(${1:duration})$0'}}}, 'CC::TransitionProgressHorizontal': {'base_class': 'CC::TransitionProgress', 'ifunctions': {}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionProgressHorizontal', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}, 'CC::GLViewImpl': {'base_class': 'CC::GLView', 'ifunctions': {}, 'sfunctions': {'create_with_rect(view_name, rect, frame_zoom_factor)': {'ret_type': 'CC::GLViewImpl', 'arguments': [{'type': 'string', 'name': 'view_name'}, {'type': 'CC::Rect', 'name': 'rect'}, {'type': 'float', 'name': 'frame_zoom_factor'}], 'sublime': 'create_with_rect(${1:view_name}, ${2:rect}, ${3:frame_zoom_factor})$0'}, 'create_with_rect(view_name, rect)': {'ret_type': 'CC::GLViewImpl', 'arguments': [{'type': 'string', 'name': 'view_name'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create_with_rect(${1:view_name}, ${2:rect})$0'}, 'create_with_full_screen(view_name)': {'ret_type': 'CC::GLViewImpl', 'arguments': [{'type': 'string', 'name': 'view_name'}], 'sublime': 'create_with_full_screen(${1:view_name})$0'}, 'create(viewname)': {'ret_type': 'CC::GLViewImpl', 'arguments': [{'type': 'string', 'name': 'viewname'}], 'sublime': 'create(${1:viewname})$0'}}}, 'CC::Size': {'ifunctions': {'equals(target)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Size', 'name': 'target'}], 'sublime': 'equals(${1:target})$0'}, 'set_size(width, height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'set_size(${1:width}, ${2:height})$0'}}, 'sfunctions': {'size()': {'ret_type': 'void', 'arguments': [], 'sublime': 'size'}, 'size(width, height)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'width'}, {'type': 'float', 'name': 'height'}], 'sublime': 'size(${1:width}, ${2:height})$0'}, 'size(other)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Size', 'name': 'other'}], 'sublime': 'size(${1:other})$0'}, 'size(point)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Vec2', 'name': 'point'}], 'sublime': 'size(${1:point})$0'}}}, 'CC::ParticleFlower': {'base_class': 'CC::ParticleSystemQuad', 'ifunctions': {}, 'sfunctions': {'create_with_total_particles(number_of_particles)': {'ret_type': 'CC::ParticleFlower', 'arguments': [{'type': 'int', 'name': 'number_of_particles'}], 'sublime': 'create_with_total_particles(${1:number_of_particles})$0'}, 'create()': {'ret_type': 'CC::ParticleFlower', 'arguments': [], 'sublime': 'create'}}}, 'CC::EaseQuinticActionIn': {'base_class': 'CC::ActionEase', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseQuinticActionIn', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::EaseBounceInOut': {'base_class': 'CC::EaseBounce', 'ifunctions': {}, 'sfunctions': {'create(action)': {'ret_type': 'CC::EaseBounceInOut', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'create(${1:action})$0'}}}, 'CC::Image': {'base_class': 'CC::Ref', 'ifunctions': {'get_number_of_mipmaps()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_number_of_mipmaps'}, 'save_to_file(filename, to_rgb?)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'bool', 'name': 'to_rgb?'}], 'sublime': 'save_to_file(${1:filename}, ${2:to_rgb?})$0'}, 'get_file_type()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_file_type'}, 'init_with_image_file(path)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'path'}], 'sublime': 'init_with_image_file(${1:path})$0'}, 'compressed?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'compressed?'}, 'get_bit_per_pixel()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_bit_per_pixel'}, 'get_width()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_width'}, 'has_premultiplied_alpha()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'has_premultiplied_alpha'}, 'get_height()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_height'}, 'get_render_format()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_render_format'}, 'has_alpha()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'has_alpha'}, 'save_to_file(filename)': {'ret_type': 'bool', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'save_to_file(${1:filename})$0'}}, 'sfunctions': {'new()': {'ret_type': 'void', 'arguments': [], 'sublime': 'new'}, 'set_pvrimages_have_premultiplied_alpha(have_alpha_premultiplied)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'have_alpha_premultiplied'}], 'sublime': 'set_pvrimages_have_premultiplied_alpha(${1:have_alpha_premultiplied})$0'}}}, 'CC::Color4B': {'ifunctions': {}, 'sfunctions': {'color4_b(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4F', 'name': 'color'}], 'sublime': 'color4_b(${1:color})$0'}, 'color4_b()': {'ret_type': 'void', 'arguments': [], 'sublime': 'color4_b'}, 'color4_b(r, g, b, a)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'r'}, {'type': 'int', 'name': 'g'}, {'type': 'int', 'name': 'b'}, {'type': 'int', 'name': 'a'}], 'sublime': 'color4_b(${1:r}, ${2:g}, ${3:b}, ${4:a})$0'}}}, 'CC::TransitionZoomFlipX': {'base_class': 'CC::TransitionSceneOriented', 'ifunctions': {}, 'sfunctions': {'create(t, s)': {'ret_type': 'CC::TransitionZoomFlipX', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}], 'sublime': 'create(${1:t}, ${2:s})$0'}, 'create(t, s, o)': {'ret_type': 'CC::TransitionZoomFlipX', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 's'}, {'type': 'int', 'name': 'o'}], 'sublime': 'create(${1:t}, ${2:s}, ${3:o})$0'}}}, 'CC::Color4F': {'ifunctions': {'equals(other)': {'ret_type': 'bool', 'arguments': [{'type': 'CC::Color4F', 'name': 'other'}], 'sublime': 'equals(${1:other})$0'}}, 'sfunctions': {'color4_f(r, g, b, a)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'r'}, {'type': 'float', 'name': 'g'}, {'type': 'float', 'name': 'b'}, {'type': 'float', 'name': 'a'}], 'sublime': 'color4_f(${1:r}, ${2:g}, ${3:b}, ${4:a})$0'}, 'color4_f(color)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Color4B', 'name': 'color'}], 'sublime': 'color4_f(${1:color})$0'}, 'color4_f()': {'ret_type': 'void', 'arguments': [], 'sublime': 'color4_f'}}}, 'CC::TransitionShrinkGrow': {'base_class': 'CC::TransitionScene', 'ifunctions': {'ease_action_with_action(action)': {'ret_type': 'CC::ActionInterval', 'arguments': [{'type': 'CC::ActionInterval', 'name': 'action'}], 'sublime': 'ease_action_with_action(${1:action})$0'}}, 'sfunctions': {'create(t, scene)': {'ret_type': 'CC::TransitionShrinkGrow', 'arguments': [{'type': 'float', 'name': 't'}, {'type': 'CC::Scene', 'name': 'scene'}], 'sublime': 'create(${1:t}, ${2:scene})$0'}}}}, 'tree': {'CC': {'Console': 'CC::Console', 'TransitionMoveInB': 'CC::TransitionMoveInB', 'TransitionMoveInL': 'CC::TransitionMoveInL', 'TileMapAtlas': 'CC::TileMapAtlas', 'TransitionMoveInT': 'CC::TransitionMoveInT', 'TMXTilesetInfo': 'CC::TMXTilesetInfo', 'TransitionMoveInR': 'CC::TransitionMoveInR', 'Color4F': 'CC::Color4F', 'Hide': 'CC::Hide', 'ParticleSpiral': 'CC::ParticleSpiral', 'Color4B': 'CC::Color4B', 'AnimationCache': 'CC::AnimationCache', 'ActionCamera': 'CC::ActionCamera', 'ProgressFromTo': 'CC::ProgressFromTo', 'MoveTo': 'CC::MoveTo', 'JumpBy': 'CC::JumpBy', 'EventListenerKeyboard': 'CC::EventListenerKeyboard', 'EventListenerMouse': 'CC::EventListenerMouse', 'TransitionRotoZoom': 'CC::TransitionRotoZoom', 'Director': 'CC::Director', 'Scheduler': 'CC::Scheduler', 'EaseElasticOut': 'CC::EaseElasticOut', 'EaseQuadraticActionInOut': 'CC::EaseQuadraticActionInOut', 'EaseBackOut': 'CC::EaseBackOut', 'Texture2D': 'CC::Texture2D', 'TransitionFlipX': 'CC::TransitionFlipX', 'Rect': 'CC::Rect', 'FadeOutDownTiles': 'CC::FadeOutDownTiles', 'StopGrid': 'CC::StopGrid', 'ParticleBatchNode': 'CC::ParticleBatchNode', 'TransitionScene': 'CC::TransitionScene', 'SkewBy': 'CC::SkewBy', 'EaseQuadraticActionOut': 'CC::EaseQuadraticActionOut', 'Layer': 'CC::Layer', 'EaseElastic': 'CC::EaseElastic', 'TMXTiledMap': 'CC::TMXTiledMap', 'Grid3DAction': 'CC::Grid3DAction', 'SpotLight': 'CC::SpotLight', 'FadeIn': 'CC::FadeIn', 'DirectionLight': 'CC::DirectionLight', 'GLProgramState': 'CC::GLProgramState', 'EventListenerCustom': 'CC::EventListenerCustom', 'FlipY3D': 'CC::FlipY3D', 'EaseSineInOut': 'CC::EaseSineInOut', 'TransitionFlipAngular': 'CC::TransitionFlipAngular', 'EaseElasticInOut': 'CC::EaseElasticInOut', 'EaseBounce': 'CC::EaseBounce', 'Show': 'CC::Show', 'FadeOut': 'CC::FadeOut', 'CallFunc': 'CC::CallFunc', 'EventMouse': 'CC::EventMouse', 'GLView': 'CC::GLView', 'FlipX3D': 'CC::FlipX3D', 'EaseBezierAction': 'CC::EaseBezierAction', 'ParticleFireworks': 'CC::ParticleFireworks', 'MenuItemImage': 'CC::MenuItemImage', 'TransitionJumpZoom': 'CC::TransitionJumpZoom', 'ParticleFire': 'CC::ParticleFire', 'MenuItem': 'CC::MenuItem', 'ActionEase': 'CC::ActionEase', 'TransitionSceneOriented': 'CC::TransitionSceneOriented', 'Event': 'CC::Event', 'TransitionZoomFlipAngular': 'CC::TransitionZoomFlipAngular', 'EaseIn': 'CC::EaseIn', 'EaseExponentialInOut': 'CC::EaseExponentialInOut', 'EaseBackInOut': 'CC::EaseBackInOut', 'Waves3D': 'CC::Waves3D', 'EaseExponentialOut': 'CC::EaseExponentialOut', 'Label': 'CC::Label', 'Application': 'CC::Application', 'DelayTime': 'CC::DelayTime', 'LabelAtlas': 'CC::LabelAtlas', 'Ref': 'CC::Ref', 'AsyncTaskPool': 'CC::AsyncTaskPool', 'ParticleSnow': 'CC::ParticleSnow', 'Sprite3DData': 'CC::Sprite3DData', 'FadeOutTRTiles': 'CC::FadeOutTRTiles', 'EaseElasticIn': 'CC::EaseElasticIn', 'EaseCircleActionInOut': 'CC::EaseCircleActionInOut', 'MenuItemSprite': 'CC::MenuItemSprite', 'Animation3DData': 'CC::Animation3DData', 'EaseQuarticActionOut': 'CC::EaseQuarticActionOut', 'FiniteTimeAction': 'CC::FiniteTimeAction', 'EventAcceleration': 'CC::EventAcceleration', 'EaseCubicActionIn': 'CC::EaseCubicActionIn', 'TextureCache': 'CC::TextureCache', 'SpriteBatchNode': 'CC::SpriteBatchNode', 'ParticleSystem': 'CC::ParticleSystem', 'ActionTween': 'CC::ActionTween', 'TransitionFadeDown': 'CC::TransitionFadeDown', 'ParticleSun': 'CC::ParticleSun', 'TransitionProgressHorizontal': 'CC::TransitionProgressHorizontal', 'TMXObjectGroup': 'CC::TMXObjectGroup', 'TMXLayer': 'CC::TMXLayer', 'FlipX': 'CC::FlipX', 'FlipY': 'CC::FlipY', 'EventKeyboard': 'CC::EventKeyboard', 'TransitionSplitCols': 'CC::TransitionSplitCols', 'Timer': 'CC::Timer', 'FadeTo': 'CC::FadeTo', 'ProgressTimer': 'CC::ProgressTimer', 'RepeatForever': 'CC::RepeatForever', 'Place': 'CC::Place', 'EventListenerAcceleration': 'CC::EventListenerAcceleration', 'TiledGrid3D': 'CC::TiledGrid3D', 'EaseBounceOut': 'CC::EaseBounceOut', 'Color3B': 'CC::Color3B', 'TintBy': 'CC::TintBy', 'TransitionShrinkGrow': 'CC::TransitionShrinkGrow', 'ClippingNode': 'CC::ClippingNode', 'ParticleFlower': 'CC::ParticleFlower', 'EaseCircleActionIn': 'CC::EaseCircleActionIn', 'ParticleSmoke': 'CC::ParticleSmoke', 'Image': 'CC::Image', 'LayerMultiplex': 'CC::LayerMultiplex', 'Blink': 'CC::Blink', 'JumpTo': 'CC::JumpTo', 'Vec4': 'CC::Vec4', 'ParticleExplosion': 'CC::ParticleExplosion', 'Vec2': 'CC::Vec2', 'Vec3': 'CC::Vec3', 'Touch': 'CC::Touch', 'NodeData': 'CC::NodeData', 'AnimationFrame': 'CC::AnimationFrame', 'NodeGrid': 'CC::NodeGrid', 'TMXLayerInfo': 'CC::TMXLayerInfo', 'EaseSineIn': 'CC::EaseSineIn', 'EaseBounceIn': 'CC::EaseBounceIn', 'Camera': 'CC::Camera', 'GLProgram': 'CC::GLProgram', 'ParticleGalaxy': 'CC::ParticleGalaxy', 'Twirl': 'CC::Twirl', 'MenuItemLabel': 'CC::MenuItemLabel', 'EaseQuinticActionIn': 'CC::EaseQuinticActionIn', 'LayerColor': 'CC::LayerColor', 'FadeOutBLTiles': 'CC::FadeOutBLTiles', 'TransitionProgress': 'CC::TransitionProgress', 'EaseRateAction': 'CC::EaseRateAction', 'LayerGradient': 'CC::LayerGradient', 'EventListenerTouchAllAtOnce': 'CC::EventListenerTouchAllAtOnce', 'GLViewImpl': 'CC::GLViewImpl', 'Node': 'CC::Node', 'ToggleVisibility': 'CC::ToggleVisibility', 'Repeat': 'CC::Repeat', 'CardinalSplineBy': 'CC::CardinalSplineBy', 'TransitionFlipY': 'CC::TransitionFlipY', 'TurnOffTiles': 'CC::TurnOffTiles', 'TintTo': 'CC::TintTo', 'CatmullRomTo': 'CC::CatmullRomTo', 'ActionInstant': 'CC::ActionInstant', 'TransitionFadeBL': 'CC::TransitionFadeBL', 'TargetedAction': 'CC::TargetedAction', 'DrawNode': 'CC::DrawNode', 'TransitionTurnOffTiles': 'CC::TransitionTurnOffTiles', 'RotateTo': 'CC::RotateTo', 'TransitionSplitRows': 'CC::TransitionSplitRows', 'Device': 'CC::Device', 'TransitionProgressRadialCCW': 'CC::TransitionProgressRadialCCW', 'EventListenerFocus': 'CC::EventListenerFocus', 'TransitionPageTurn': 'CC::TransitionPageTurn', 'BezierTo': 'CC::BezierTo', 'Menu': 'CC::Menu', 'SpriteFrame': 'CC::SpriteFrame', 'ActionManager': 'CC::ActionManager', 'UserDefault': 'CC::UserDefault', 'TransitionZoomFlipX': 'CC::TransitionZoomFlipX', 'EventFocus': 'CC::EventFocus', 'EventListener': 'CC::EventListener', 'EaseQuinticActionInOut': 'CC::EaseQuinticActionInOut', 'SpriteFrameCache': 'CC::SpriteFrameCache', 'PointLight': 'CC::PointLight', 'TransitionCrossFade': 'CC::TransitionCrossFade', 'Ripple3D': 'CC::Ripple3D', 'Action': 'CC::Action', 'Lens3D': 'CC::Lens3D', 'GridBase': 'CC::GridBase', 'ScaleTo': 'CC::ScaleTo', 'AnimationFrameData': 'CC::AnimationFrameData', 'Spawn': 'CC::Spawn', 'EaseQuarticActionInOut': 'CC::EaseQuarticActionInOut', 'ShakyTiles3D': 'CC::ShakyTiles3D', 'PageTurn3D': 'CC::PageTurn3D', 'TransitionSlideInT': 'CC::TransitionSlideInT', 'Grid3D': 'CC::Grid3D', 'ParticleSystemQuad': 'CC::ParticleSystemQuad', 'EaseCircleActionOut': 'CC::EaseCircleActionOut', 'TransitionProgressInOut': 'CC::TransitionProgressInOut', 'EaseCubicActionInOut': 'CC::EaseCubicActionInOut', 'SkewTo': 'CC::SkewTo', 'EaseBackIn': 'CC::EaseBackIn', 'SplitRows': 'CC::SplitRows', 'RenderTexture': 'CC::RenderTexture', 'Follow': 'CC::Follow', 'Animate': 'CC::Animate', 'ActionInterval': 'CC::ActionInterval', 'ShuffleTiles': 'CC::ShuffleTiles', 'Size': 'CC::Size', 'ParticleMeteor': 'CC::ParticleMeteor', 'EaseQuarticActionIn': 'CC::EaseQuarticActionIn', 'TransitionFadeTR': 'CC::TransitionFadeTR', 'EaseInOut': 'CC::EaseInOut', 'TransitionZoomFlipY': 'CC::TransitionZoomFlipY', 'ScaleBy': 'CC::ScaleBy', 'EventTouch': 'CC::EventTouch', 'Animation': 'CC::Animation', 'CardinalSplineTo': 'CC::CardinalSplineTo', 'TMXMapInfo': 'CC::TMXMapInfo', 'EaseExponentialIn': 'CC::EaseExponentialIn', 'ReuseGrid': 'CC::ReuseGrid', 'MenuItemAtlasFont': 'CC::MenuItemAtlasFont', 'EaseQuinticActionOut': 'CC::EaseQuinticActionOut', 'EventDispatcher': 'CC::EventDispatcher', 'Liquid': 'CC::Liquid', 'OrbitCamera': 'CC::OrbitCamera', 'ParallaxNode': 'CC::ParallaxNode', 'ClippingRectangleNode': 'CC::ClippingRectangleNode', 'EventCustom': 'CC::EventCustom', 'TransitionFade': 'CC::TransitionFade', 'Component': 'CC::Component', 'FadeOutUpTiles': 'CC::FadeOutUpTiles', 'EaseCubicActionOut': 'CC::EaseCubicActionOut', 'EventListenerTouchOneByOne': 'CC::EventListenerTouchOneByOne', 'ParticleRain': 'CC::ParticleRain', 'Waves': 'CC::Waves', 'AtlasNode': 'CC::AtlasNode', 'EaseOut': 'CC::EaseOut', 'TransitionSlideInL': 'CC::TransitionSlideInL', 'MenuItemFont': 'CC::MenuItemFont', 'TransitionFadeUp': 'CC::TransitionFadeUp', 'EaseSineOut': 'CC::EaseSineOut', 'JumpTiles3D': 'CC::JumpTiles3D', 'MenuItemToggle': 'CC::MenuItemToggle', 'RemoveSelf': 'CC::RemoveSelf', 'SplitCols': 'CC::SplitCols', 'TransitionProgressVertical': 'CC::TransitionProgressVertical', 'MoveBy': 'CC::MoveBy', 'ProtectedNode': 'CC::ProtectedNode', 'MotionStreak': 'CC::MotionStreak', 'RotateBy': 'CC::RotateBy', 'FileUtils': 'CC::FileUtils', 'BezierBy': 'CC::BezierBy', 'Sprite': 'CC::Sprite', 'ProgressTo': 'CC::ProgressTo', 'TransitionProgressOutIn': 'CC::TransitionProgressOutIn', 'CatmullRomBy': 'CC::CatmullRomBy', 'GridAction': 'CC::GridAction', 'TransitionEaseScene': 'CC::TransitionEaseScene', 'Sequence': 'CC::Sequence', 'Shaky3D': 'CC::Shaky3D', 'TransitionProgressRadialCW': 'CC::TransitionProgressRadialCW', 'EaseBounceInOut': 'CC::EaseBounceInOut', 'TransitionSlideInR': 'CC::TransitionSlideInR', 'BaseLight': 'CC::BaseLight', 'Scene': 'CC::Scene', 'NodeDatas': 'CC::NodeDatas', 'AmbientLight': 'CC::AmbientLight', 'GLProgramCache': 'CC::GLProgramCache', 'TiledGrid3DAction': 'CC::TiledGrid3DAction', 'EaseQuadraticActionIn': 'CC::EaseQuadraticActionIn', 'WavesTiles3D': 'CC::WavesTiles3D', 'PointArray': 'CC::PointArray', 'TransitionSlideInB': 'CC::TransitionSlideInB', 'Speed': 'CC::Speed', 'ShatteredTiles3D': 'CC::ShatteredTiles3D'}}}
