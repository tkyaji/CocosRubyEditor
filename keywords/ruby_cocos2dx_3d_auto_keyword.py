def get_keywords():
	return {'classes': {'CC::Mesh': {'base_class': 'CC::Ref', 'ifunctions': {'set_blend_func(blend_func)': {'ret_type': 'void', 'arguments': [{'type': 'CC::BlendFunc', 'name': 'blend_func'}], 'sublime': 'set_blend_func(${1:blend_func})$0'}, 'set_visible(visible)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'visible'}], 'sublime': 'set_visible(${1:visible})$0'}, 'get_name()': {'ret_type': 'string', 'arguments': [], 'sublime': 'get_name'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'set_texture(tex_path)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'tex_path'}], 'sublime': 'set_texture(${1:tex_path})$0'}, 'get_texture()': {'ret_type': 'CC::Texture2D', 'arguments': [], 'sublime': 'get_texture'}, 'set_texture(tex)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'tex'}], 'sublime': 'set_texture(${1:tex})$0'}, 'visible?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'visible?'}}, 'sfunctions': {}}, 'CC::Animation3D': {'base_class': 'CC::Ref', 'ifunctions': {'get_duration()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_duration'}}, 'sfunctions': {'create(filename)': {'ret_type': 'CC::Animation3D', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'create(${1:filename})$0'}, 'create(filename, animation_name)': {'ret_type': 'CC::Animation3D', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'string', 'name': 'animation_name'}], 'sublime': 'create(${1:filename}, ${2:animation_name})$0'}}}, 'CC::AttachNode': {'base_class': 'CC::Node', 'ifunctions': {}, 'sfunctions': {'create(attach_bone)': {'ret_type': 'CC::AttachNode', 'arguments': [{'type': 'CC::Bone3D', 'name': 'attach_bone'}], 'sublime': 'create(${1:attach_bone})$0'}}}, 'CC::Sprite3D': {'base_class': 'CC::Node', 'ifunctions': {'set_cull_face_enabled(enable)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'enable'}], 'sublime': 'set_cull_face_enabled(${1:enable})$0'}, 'set_force_depth_write(value)': {'ret_type': 'void', 'arguments': [{'type': 'bool', 'name': 'value'}], 'sublime': 'set_force_depth_write(${1:value})$0'}, 'remove_all_attach_node()': {'ret_type': 'void', 'arguments': [], 'sublime': 'remove_all_attach_node'}, 'get_skeleton()': {'ret_type': 'CC::Skeleton3D', 'arguments': [], 'sublime': 'get_skeleton'}, 'set_texture(texture)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'set_texture(${1:texture})$0'}, 'set_texture(tex_file)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'tex_file'}], 'sublime': 'set_texture(${1:tex_file})$0'}, 'set_light_mask(mask)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'mask'}], 'sublime': 'set_light_mask(${1:mask})$0'}, 'get_blend_func()': {'ret_type': 'CC::BlendFunc', 'arguments': [], 'sublime': 'get_blend_func'}, 'get_mesh_by_name(name)': {'ret_type': 'CC::Mesh', 'arguments': [{'type': 'string', 'name': 'name'}], 'sublime': 'get_mesh_by_name(${1:name})$0'}, 'get_mesh_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_mesh_count'}, 'set_cull_face(cull_face)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'cull_face'}], 'sublime': 'set_cull_face(${1:cull_face})$0'}, 'force_depth_write?()': {'ret_type': 'bool', 'arguments': [], 'sublime': 'force_depth_write?'}, 'get_mesh_by_index(index)': {'ret_type': 'CC::Mesh', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'get_mesh_by_index(${1:index})$0'}, 'get_mesh()': {'ret_type': 'CC::Mesh', 'arguments': [], 'sublime': 'get_mesh'}, 'get_light_mask()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_light_mask'}, 'get_attach_node(bone_name)': {'ret_type': 'CC::AttachNode', 'arguments': [{'type': 'string', 'name': 'bone_name'}], 'sublime': 'get_attach_node(${1:bone_name})$0'}, 'remove_attach_node(bone_name)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'bone_name'}], 'sublime': 'remove_attach_node(${1:bone_name})$0'}}, 'sfunctions': {'create_async(model_path, texture_path, callback, callbackparam)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'model_path'}, {'type': 'string', 'name': 'texture_path'}, {'type': 'Proc', 'name': 'callback'}, {'type': 'void', 'name': 'callbackparam'}], 'sublime': 'create_async(${1:model_path}, ${2:texture_path}, ${3:callback}, ${4:callbackparam})$0'}, 'create_async(model_path, callback, callbackparam)': {'ret_type': 'void', 'arguments': [{'type': 'string', 'name': 'model_path'}, {'type': 'Proc', 'name': 'callback'}, {'type': 'void', 'name': 'callbackparam'}], 'sublime': 'create_async(${1:model_path}, ${2:callback}, ${3:callbackparam})$0'}, 'create(model_path)': {'ret_type': 'CC::Sprite3D', 'arguments': [{'type': 'string', 'name': 'model_path'}], 'sublime': 'create(${1:model_path})$0'}, 'create(model_path, texture_path)': {'ret_type': 'CC::Sprite3D', 'arguments': [{'type': 'string', 'name': 'model_path'}, {'type': 'string', 'name': 'texture_path'}], 'sublime': 'create(${1:model_path}, ${2:texture_path})$0'}, 'create()': {'ret_type': 'CC::Sprite3D', 'arguments': [], 'sublime': 'create'}}}, 'CC::Skeleton3D': {'base_class': 'CC::Ref', 'ifunctions': {'get_root_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_root_count'}, 'get_root_bone(index)': {'ret_type': 'CC::Bone3D', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'get_root_bone(${1:index})$0'}, 'get_bone_by_name(id)': {'ret_type': 'CC::Bone3D', 'arguments': [{'type': 'string', 'name': 'id'}], 'sublime': 'get_bone_by_name(${1:id})$0'}, 'get_bone_index(bone)': {'ret_type': 'int', 'arguments': [{'type': 'CC::Bone3D', 'name': 'bone'}], 'sublime': 'get_bone_index(${1:bone})$0'}, 'get_bone_count()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_bone_count'}, 'update_bone_matrix()': {'ret_type': 'void', 'arguments': [], 'sublime': 'update_bone_matrix'}, 'get_bone_by_index(index)': {'ret_type': 'CC::Bone3D', 'arguments': [{'type': 'int', 'name': 'index'}], 'sublime': 'get_bone_by_index(${1:index})$0'}}, 'sfunctions': {}}, 'CC::Animate3D': {'base_class': 'CC::ActionInterval', 'ifunctions': {'set_speed(speed)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'speed'}], 'sublime': 'set_speed(${1:speed})$0'}, 'set_origin_interval(interval)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'interval'}], 'sublime': 'set_origin_interval(${1:interval})$0'}, 'get_weight()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_weight'}, 'get_origin_interval()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_origin_interval'}, 'get_speed()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_speed'}, 'set_weight(weight)': {'ret_type': 'void', 'arguments': [{'type': 'float', 'name': 'weight'}], 'sublime': 'set_weight(${1:weight})$0'}}, 'sfunctions': {'create(animation, from_time, duration)': {'ret_type': 'CC::Animate3D', 'arguments': [{'type': 'CC::Animation3D', 'name': 'animation'}, {'type': 'float', 'name': 'from_time'}, {'type': 'float', 'name': 'duration'}], 'sublime': 'create(${1:animation}, ${2:from_time}, ${3:duration})$0'}, 'create(animation)': {'ret_type': 'CC::Animate3D', 'arguments': [{'type': 'CC::Animation3D', 'name': 'animation'}], 'sublime': 'create(${1:animation})$0'}, 'create_with_frames(animation, start_frame, end_frame, frame_rate)': {'ret_type': 'CC::Animate3D', 'arguments': [{'type': 'CC::Animation3D', 'name': 'animation'}, {'type': 'int', 'name': 'start_frame'}, {'type': 'int', 'name': 'end_frame'}, {'type': 'float', 'name': 'frame_rate'}], 'sublime': 'create_with_frames(${1:animation}, ${2:start_frame}, ${3:end_frame}, ${4:frame_rate})$0'}, 'get_transition_time()': {'ret_type': 'float', 'arguments': [], 'sublime': 'get_transition_time'}, 'create_with_frames(animation, start_frame, end_frame)': {'ret_type': 'CC::Animate3D', 'arguments': [{'type': 'CC::Animation3D', 'name': 'animation'}, {'type': 'int', 'name': 'start_frame'}, {'type': 'int', 'name': 'end_frame'}], 'sublime': 'create_with_frames(${1:animation}, ${2:start_frame}, ${3:end_frame})$0'}}}, 'CC::BillBoard': {'base_class': 'CC::Sprite', 'ifunctions': {'get_mode()': {'ret_type': 'int', 'arguments': [], 'sublime': 'get_mode'}, 'set_mode(mode)': {'ret_type': 'void', 'arguments': [{'type': 'int', 'name': 'mode'}], 'sublime': 'set_mode(${1:mode})$0'}, 'visit(renderer, parent_transform, parent_flags)': {'ret_type': 'void', 'arguments': [{'type': 'CC::Renderer', 'name': 'renderer'}, {'type': 'CC::Mat4', 'name': 'parent_transform'}, {'type': 'int', 'name': 'parent_flags'}], 'sublime': 'visit(${1:renderer}, ${2:parent_transform}, ${3:parent_flags})$0'}}, 'sfunctions': {'create(filename)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'string', 'name': 'filename'}], 'sublime': 'create(${1:filename})$0'}, 'create(mode)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'int', 'name': 'mode'}], 'sublime': 'create(${1:mode})$0'}, 'create()': {'ret_type': 'CC::BillBoard', 'arguments': [], 'sublime': 'create'}, 'create_with_texture(texture, mode)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}, {'type': 'int', 'name': 'mode'}], 'sublime': 'create_with_texture(${1:texture}, ${2:mode})$0'}, 'create_with_texture(texture)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'CC::Texture2D', 'name': 'texture'}], 'sublime': 'create_with_texture(${1:texture})$0'}, 'create(filename, rect)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'CC::Rect', 'name': 'rect'}], 'sublime': 'create(${1:filename}, ${2:rect})$0'}, 'create(filename, rect, mode)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'CC::Rect', 'name': 'rect'}, {'type': 'int', 'name': 'mode'}], 'sublime': 'create(${1:filename}, ${2:rect}, ${3:mode})$0'}, 'create(filename, mode)': {'ret_type': 'CC::BillBoard', 'arguments': [{'type': 'string', 'name': 'filename'}, {'type': 'int', 'name': 'mode'}], 'sublime': 'create(${1:filename}, ${2:mode})$0'}}}}, 'tree': {'CC': {'Animate3D': 'CC::Animate3D', 'Sprite3D': 'CC::Sprite3D', 'AttachNode': 'CC::AttachNode', 'BillBoard': 'CC::BillBoard', 'Skeleton3D': 'CC::Skeleton3D', 'Mesh': 'CC::Mesh', 'Animation3D': 'CC::Animation3D'}}}
